{"version":3,"sources":["layout/ScrollToTop.tsx","utils/createBrowserHistory.tsx","utils/constants.tsx","api/httpService.tsx","api/activityService.tsx","features/activities/util.tsx","stores/activityStore.tsx","stores/commonStore.tsx","api/userService.tsx","stores/userStore.tsx","api/profileService.tsx","api/photoService.tsx","stores/profileStore.tsx","stores/activityHubStore.tsx","stores/rootStore.tsx","common/modals/modalContainer.tsx","features/nav/NavBar.tsx","features/home/HomePage.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","layout/Spinner.tsx","features/activities/dashboard/ActivityFilter.tsx","features/activities/dashboard/ActivityListLoader.tsx","features/activities/dashboard/ActivityDashboard.tsx","layout/ProgressBar.tsx","common/elements/TextAreaInput.tsx","features/activities/details/ActivityDetailChat.tsx","features/activities/details/ActivityDetailHeader.tsx","features/activities/details/ActivityDetailInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","models/IActivity.tsx","utils/util.tsx","common/elements/TextInput.tsx","common/elements/SelectInput.tsx","common/elements/DateInput.tsx","common/options/categoryOptions.tsx","features/activities/forms/ActivityForm.tsx","common/elements/ErrorMessage.tsx","features/user/forms/LoginForm.tsx","utils/customValidators.tsx","features/user/forms/RegisterForm.tsx","features/user/profile/ProfileHeader.tsx","common/upload/PhotoDropzone.tsx","common/upload/PhotoCropper.tsx","common/upload/PhotoUpload.tsx","features/user/profile/ProfilePhoto.tsx","features/user/profile/forms/ProfileEditForm.tsx","features/user/profile/ProfileAbout.tsx","features/user/profile/ProfileEvents.tsx","features/user/profile/ProfileCard.tsx","features/user/profile/ProfileFollowing.tsx","features/user/profile/ProfileContent.tsx","features/user/profile/UserProfile.tsx","layout/NotFound.tsx","layout/SecureRoute.tsx","layout/App.tsx","index.tsx"],"names":["ScrollToTop","pathname","useLocation","useEffect","window","scrollTo","createBrowserHistory","BASE_SERVICE_URL","process","axiosInstance","axios","create","baseURL","constants","withCredentials","timeout","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","error","Promise","reject","response","message","status","toast","removeItem","indexOf","push","info","processResponse","dbResponse","data","httpService","get","url","qsParams","a","params","post","body","put","delete","postForm","formData","activityService","list","details","id","activity","update","attend","unattend","getComments","createAttendee","user","isHost","appUserId","displayName","image","removeAttendee","attendees","length","filter","attendee","activityStore","rootStore","getActivity","activityRegistry","getQSParams","URLSearchParams","append","currentPageNumber","toString","predicate","forEach","value","key","toISOString","groupActivitiesByDate","sortedArray","Object","entries","reduce","accumulator","currentValue","date","moment","format","getCurrentUser","userStore","getCurrentUserInstance","this","reaction","keys","clear","loadActivities","Math","ceil","totalActivitiesCount","Array","from","values","sort","b","getTime","observable","Map","action","selectedActivity","showForm","isLoadingActivity","isSaving","isDeleting","isLoadingActivities","Date","isCurrentUserGoing","some","isUserGoing","isCurrentUserHost","isUserHost","host","hosts","getHost","set","setIsLoadingActivities","count","activities","registerActivity","setTotalActivityCount","console","setSelectedActivity","setIsLoadingActivity","setIsSaving","runInAction","setShowFormFlag","setIsDeleting","comments","comment","activityId","activityHubStore","sendComment","pageNumber","computed","commonStore","getToken","setItem","appLoaded","userService","current","login","command","register","toJS","mainPhoto","isUserLoggedIn","setToken","setUser","log","profileService","userActivities","qsParam","followers","userId","followings","profile","follow","unfollow","photoService","upload","file","FormData","setMain","photoId","profileStore","activeTabIndex","index","loadFollowers","userProfile","undefined","userName","username","tabIndex","setUserProfile","photo","photos","p","setMainPhoto","aboutProfile","setDisplayName","followersCount","following","isUserViewingFollowersTab","u","isLoadingfollowers","setUserActivities","ref","hubConnection","HubConnectionBuilder","withUrl","accessTokenFactory","configureLogging","LogLevel","Information","build","start","then","state","invoke","catch","on","onReceivingCommentFromServer","stop","configure","enforceActions","modalSize","rootStoreContext","createContext","observer","useContext","Menu","fixed","inverted","Container","Item","header","as","NavLink","to","exact","src","alt","name","Button","content","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","logout","rootStoreObject","userStoreObj","commonStoreObj","Segment","textAlign","vertical","className","Header","size","style","marginBottom","styles","borderColor","borderWidth","ActivityListItemAttendee","List","horizontal","map","path","Popup","trigger","circular","bordered","ActivityListItem","Group","Content","title","Description","Label","basic","color","Icon","venue","city","secondary","clearing","description","floated","activityStoreObj","activityByDate","group","divided","item","Spinner","loading","Loader","active","inline","setPredicate","width","marginTop","attached","has","onChange","ActivityListLoader","Placeholder","fluid","minHeight","Line","Paragraph","disabled","setPageNumber","totalPages","fetch","loadNextHandler","Grid","Column","pageStart","loadMore","hasMore","initialLoad","ProgressBar","Dimmer","TextAreaInput","input","rows","placeholder","meta","touched","Form","Field","addComment","createHubConnection","stopHubConnection","useState","isLoadingComments","setIsLoadingComments","load","border","Comment","Avatar","userImage","Author","userDisplayName","Metadata","createdAt","Text","onSubmit","render","handleSubmit","submitting","pristine","form","reset","component","labelPosition","primary","activityImageStyle","activityImageTextStyle","bottom","left","height","setLoading","attendActivity","unAttendActivity","padding","category","ActivityDetailInfo","verticalAlign","relaxed","ribbon","Extra","props","loadActivity","match","ActivityFormValues","time","assign","combineDateAndTime","year","getFullYear","month","getMonth","day","getDate","dateString","timeString","getHours","getMinutes","TextInput","type","SelectInput","options","Select","_event","DateInput","onBlur","onKeyDown","e","preventDefault","categoryOptions","validationRules","combineValidators","isRequired","composeValidators","hasLengthGreaterThan","setActivity","redirectToDetailPage","onCancelClickHandler","onFinalFormSubmit","util","editActivity","createActivity","validate","initialValues","widths","invalid","ModelContainer","settings","actions","closeIcon","closeOnDocumentClick","closeOnDimmerClick","closeOnEscape","open","Large","defaultOpen","onClose","onOpen","onActionClick","Modal","event","Actions","ErrorMessage","Message","negative","statusText","errors","flat","err","idx","LoginForm","password","redirectToHomePage","canAccessSecureResource","onLoginHandler","FORM_ERROR","submitError","dirtySinceLastSubmit","Tiny","isValidEmail","createValidator","test","isValidPassword","RegisterForm","firstName","hasLengthLessThan","lastName","email","onRegisterHandler","rootStoreObj","isUpdatingFollowFlag","setIsUpdatingFollowFlag","isViewingOwnProfile","onFollowClickHandler","Statistic","label","followingCount","Divider","Reveal","animated","hidden","visible","dropzoneStyles","borderRadius","paddingTop","dropzoneActive","PhotoDropzone","setFiles","onDrop","useCallback","acceptedFiles","files","preview","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoCropper","cropper","useRef","previewImage","aspectRatio","guides","viewMode","dragMode","scalable","cropBoxMovable","cropBoxResizable","crop","getCroppedCanvas","toBlob","blob","setImage","PhotoUpload","uploadPhoto","isUploading","setIsUploading","onUploadClick","revokeObjectURL","sub","overflow","deletePhoto","addPhotoMode","setAddPhotoMode","isSettingMainPhoto","setIsSettingMainPhoto","isDeletingPhoto","setIsDeletingPhoto","target","setTarget","onPhotoUploadHandler","onSetMainPhotoHandler","currentTarget","onDeletePhotoHandler","Tab","Pane","paddingBottom","Card","itemsPerRow","extra","updateProfile","setEditMode","onUpdateProfileHandler","bio","ProfileAbout","editMode","panes","menuItem","pane","loadingActivities","setLoadingActivities","loadUserActivities","menu","onTabChange","_","activeIndex","handleTabChange","objectFit","Meta","isFollowersTab","menuPosition","setActiveTab","getUserProfile","isLoadingProfile","setIsLoadingProfile","NotFound","Inline","Component","rest","withRouter","location","finally","setAppLoaded","loadUser","Fragment","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","UserProfile","momentLocalizer","ReactDOM","history","document","querySelector"],"mappings":"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","file":"static/js/main.4c5fc613.chunk.js","sourcesContent":["import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n    const { pathname } = useLocation();\r\n    //Display top of the form as soon as location(URL) changes. \r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n    }, [pathname]);\r\n\r\n    return null;\r\n}","import { createBrowserHistory } from 'history';\r\nexport default createBrowserHistory();","export const BASE_SERVICE_URL = process.env.REACT_APP_API_BASE_URL ?? '';\r\n\r\n//Navigation Link\r\nexport const NAV_HOME = '/'; \r\nexport const NAV_LOGIN = '/Login'; \r\nexport const NAV_REGISTER = '/Register'; \r\nexport const NAV_ACTIVITY_DETAIL = '/activities'; \r\nexport const NAV_ACTIVITIES = '/activities'; \r\nexport const NAV_CREATE_ACTIVITY = '/createactivity'; \r\nexport const NAV_MANAGE_ACTIVITY = '/manageactivity'; \r\nexport const NAV_USER_PROFILE = '/profile'; \r\nexport const NAV_NOT_FOUND = '/notfound'; \r\n\r\n//Security\r\nexport const AUTH_TOKEN_NAME = 'SN_JWT_Token';\r\n\r\n//Followers/Following\r\nexport const PREDICATE_FOLLOWERS = 'followers';\r\nexport const PREDICATE_FOLLOWINGS = 'followings';\r\nexport const TAB_INDEX_FOLLOWERS = 3;\r\nexport const TAB_INDEX_FOLLOWINGS = 4;\r\nexport const PREDICATE_PAST = 'past';\r\nexport const PREDICATE_HOSTING = 'hosting';\r\n\r\n\r\n//\r\nexport const PREDICATE_ALL = 'all';\r\nexport const PREDICATE_IS_GOING = 'isGoing';\r\nexport const PREDICATE_IS_HOST = 'isHost';\r\nexport const PREDICATE_START_DATE = 'startDate';","import axios, { AxiosResponse } from 'axios';\r\nimport createBrowserHistory from '../utils/createBrowserHistory';\r\nimport * as constants from '../utils/constants';\r\nimport { toast } from 'react-toastify';\r\n\r\n//const SLEEP_TIME = 100;\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: `${constants.BASE_SERVICE_URL}/api/`,\r\n    withCredentials: true,\r\n    timeout: 30000\r\n});\r\n\r\naxiosInstance.interceptors.request.use((config) => {\r\n    //Add JWT Authorization Token to request if exists.\r\n    const token: string | null = window.localStorage.getItem(constants.AUTH_TOKEN_NAME);\r\n    if (token) {\r\n        config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n}, error => {\r\n    return Promise.reject(error);\r\n});\r\n\r\naxiosInstance.interceptors.response.use((response) => response, (error) => {\r\n    if (error.message === 'Network Error' && !error.response) {\r\n        toast.error('Network error server is down for maintenance, Please try after sometime');\r\n        return;\r\n    }\r\n    const { status, headers } = error.response;\r\n    if (status === 400)\r\n        toast.error('Bad request, Please check data');\r\n    else if (status === 401) {\r\n        window.localStorage.removeItem(constants.AUTH_TOKEN_NAME);\r\n        if (headers['www-authenticate'] && headers['www-authenticate'].indexOf('invalid_token') >= 0) {\r\n            createBrowserHistory.push(constants.NAV_LOGIN);\r\n            toast.info('Your session has expired, please login again');\r\n        }\r\n    }\r\n    else if (status === 404) {\r\n        createBrowserHistory.push(constants.NAV_NOT_FOUND);\r\n    }\r\n    else if (status === 500) {\r\n        toast.error('Server Issue - Oops, something went wrong');\r\n    }\r\n    throw error.response;\r\n});\r\n\r\nconst processResponse = (dbResponse: AxiosResponse) => {\r\n    return dbResponse.data;\r\n};\r\n\r\n//const addDelay = (ms: number) => (dbResponse: AxiosResponse) => {\r\n//    return new Promise<AxiosResponse>(resolve => setTimeout(() => resolve(dbResponse), ms));\r\n//};\r\n\r\nconst httpService = {\r\n    get: async (url: string, qsParams?: URLSearchParams) => {\r\n        const dbResponse: AxiosResponse = await axiosInstance.get(url, { params: qsParams });\r\n        //.then(addDelay(SLEEP_TIME));\r\n        return processResponse(dbResponse);\r\n    },\r\n    post: async (url: string, body: {}) => {\r\n        const dbResponse: AxiosResponse = await axiosInstance.post(url, body);\r\n        //.then(addDelay(SLEEP_TIME));\r\n        return processResponse(dbResponse);\r\n    },\r\n    put: async (url: string, body: {}) => {\r\n        const dbResponse: AxiosResponse = await axiosInstance.put(url, body);\r\n        //.then(addDelay(SLEEP_TIME));\r\n        return processResponse(dbResponse);\r\n    },\r\n    delete: async (url: string) => {\r\n        const dbResponse: AxiosResponse = await axiosInstance.delete(url);\r\n        //.then(addDelay(SLEEP_TIME));\r\n        return processResponse(dbResponse);\r\n    },\r\n    postForm: async (url: string, formData: FormData) => {\r\n        const dbResponse: AxiosResponse = await axiosInstance.post(url, formData, {\r\n            headers: { 'Content-type': 'multipart/form-data' }\r\n        });\r\n        return processResponse(dbResponse);\r\n    }\r\n};\r\n\r\nexport default httpService;","import httpService from './httpService';\r\n\r\nimport { IActivity } from '../models/IActivity';\r\n\r\n\r\nconst activityService = {\r\n    list: (qsParams: URLSearchParams) => {\r\n        return httpService.get(`/activities`, qsParams);\r\n    },\r\n    details: (id: string) => {\r\n        return httpService.get(`/activities/${id}`);\r\n    },\r\n    create: (activity: IActivity) => {\r\n        //return httpService.post('/activities', activity) as unknown as string;\r\n        return httpService.post('/activities', activity);\r\n    },\r\n    update: (activity: IActivity) => {\r\n        return httpService.put(`/activities/${activity.id}`, activity);\r\n    },\r\n    delete: (id: string) => {\r\n        return httpService.delete(`/activities/${id}`);\r\n    },\r\n    attend: (id: string) => {\r\n        return httpService.post(`/activities/${id}/attend`, {});\r\n    },\r\n    unattend: (id: string) => {\r\n        return httpService.post(`/activities/${id}/unattend`, {});\r\n    },\r\n    getComments: (id: string) => {\r\n        return httpService.get(`/activities/${id}/comments`);\r\n    }\r\n};\r\n\r\nexport default activityService;","import { IActivity, IAttendee } from '../../models/IActivity';\r\nimport { IUser } from '../../models/IUser';\r\n\r\n//export const getHostName = (activity: IActivity): string => {\r\n//    if (activity != null && activity.attendees.length > 0) {\r\n//        const hosts = activity.attendees?.filter((attendee) => attendee.isHost);\r\n//        const hostName = hosts.length > 0 ? hosts[0].displayName : '';\r\n//        return hostName;\r\n//    }\r\n//    return '';\r\n//};\r\n\r\nexport const isUserGoing = (activity: IActivity, user: IUser): boolean => {\r\n    if (activity != null && activity.attendees.length > 0 && user) {\r\n        return activity.attendees.some((attendee) => attendee.appUserId === user.appUserId);\r\n    }\r\n    return false;\r\n};\r\n\r\nexport const isUserHost = (activity: IActivity, user: IUser): boolean => {\r\n    if (activity != null && activity.attendees.length > 0 && user) {\r\n        return activity.attendees.some((attendee) => attendee.appUserId === user.appUserId && attendee.isHost === true);\r\n    }\r\n    return false;\r\n};\r\n\r\nexport const getHost = (activity: IActivity): IAttendee | null => {\r\n    if (activity != null && activity.attendees.length > 0) {\r\n        const hosts = activity.attendees.filter((attendee) => attendee.isHost === true);\r\n        if (hosts.length > 0)\r\n            return hosts[0];\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\nexport const createAttendee = (user: IUser, isHost: boolean): IAttendee => {\r\n    return {\r\n        appUserId: user.appUserId,\r\n        displayName: user.displayName,\r\n        image: user.image,\r\n        isHost: isHost\r\n    };\r\n};\r\n\r\nexport const removeAttendee = (activity: IActivity, user: IUser) => {\r\n    if (activity != null && activity.attendees.length > 0) {\r\n        return activity.attendees.filter((attendee) => attendee.appUserId !== user.appUserId);\r\n    };\r\n    return [];\r\n};","import { observable, action, computed, runInAction, reaction } from 'mobx';\r\nimport moment from 'moment';\r\nimport { toast } from 'react-toastify';\r\n\r\nimport { IActivity, IComment } from '../models/IActivity';\r\nimport activityService from '../api/activityService';\r\nimport { rootStore } from './rootStore';\r\nimport { isUserGoing, isUserHost, getHost, createAttendee, removeAttendee } from '../features/activities/util';\r\nimport * as constants from '../utils/constants';\r\n\r\nconst PAGE_SIZE: number = 2;\r\nexport default class activityStore {\r\n    rootStore: rootStore;\r\n\r\n    constructor(rootStore: rootStore) {\r\n        this.rootStore = rootStore;\r\n\r\n        reaction(() => this.predicate.keys(), () => {\r\n            this.currentPageNumber = 0;\r\n            this.activityRegistry.clear();\r\n            this.loadActivities();\r\n        });\r\n    }\r\n\r\n    @observable activityRegistry = new Map<string, IActivity>();\r\n    @observable selectedActivity: IActivity | null = null;\r\n    @observable isLoadingActivity = false;\r\n    @observable isLoadingActivities = false;\r\n    @observable showForm = false;\r\n    @observable isSaving = false;\r\n    @observable isDeleting = false;\r\n\r\n    //Paging and Filter\r\n    @observable totalActivitiesCount = 0;\r\n    @observable currentPageNumber = 0;\r\n    @observable predicate = new Map();\r\n\r\n    getActivity = (id: string): IActivity | undefined => {\r\n        return this.activityRegistry.get(id);\r\n    };\r\n\r\n    @action setSelectedActivity = (activity: IActivity) => {\r\n        this.selectedActivity = activity;\r\n    };\r\n\r\n    @action setShowFormFlag = (value: boolean) => {\r\n        this.showForm = value;\r\n    };\r\n\r\n    @action setIsLoadingActivity = (value: boolean) => {\r\n        this.isLoadingActivity = value;\r\n    };\r\n\r\n    @action setIsSaving = (value: boolean) => {\r\n        this.isSaving = value;\r\n    };\r\n\r\n    @action setIsDeleting = (value: boolean) => {\r\n        this.isDeleting = value;\r\n    };\r\n\r\n    @action setIsLoadingActivities = (value: boolean) => {\r\n        this.isLoadingActivities= value;\r\n    };\r\n\r\n    @action registerActivity = (activity: IActivity) => {\r\n        activity.date = new Date(activity.date);\r\n        const user = this.getCurrentUser();\r\n        if (user) {\r\n            activity.isCurrentUserGoing = isUserGoing(activity, user);\r\n            activity.isCurrentUserHost = isUserHost(activity, user);\r\n            activity.host = getHost(activity);\r\n        }\r\n        this.activityRegistry.set(activity.id, activity);\r\n    };\r\n\r\n    @action loadActivities = async () => {\r\n        try {\r\n            this.setIsLoadingActivities(true);\r\n            const { count, activities } = await activityService.list(this.getQSParams());\r\n            if (activities) {\r\n                activities.forEach((activity: IActivity) => {\r\n                    this.registerActivity(activity);\r\n                });\r\n            }\r\n            this.setTotalActivityCount(count);\r\n            this.setIsLoadingActivities(false);\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    };\r\n\r\n    @action loadActivity = async (id: string) => {\r\n        if (!id || (id && id.length === 0))\r\n            return;\r\n\r\n        let activity: IActivity | undefined = this.getActivity(id);\r\n        if (activity) {\r\n            this.setSelectedActivity(activity);\r\n            return activity;\r\n        }\r\n\r\n        this.setIsLoadingActivity(true);\r\n        try {\r\n            activity = await activityService.details(id);\r\n            this.registerActivity(activity!);\r\n            this.setSelectedActivity(activity!);\r\n            this.setIsLoadingActivity(false);\r\n            return activity;\r\n        } catch (error) {\r\n            console.error(error);\r\n            this.setIsLoadingActivity(false);\r\n        }\r\n    };\r\n\r\n    @action createActivity = async (activity: IActivity): Promise<string> => {\r\n        this.setIsSaving(true);\r\n\r\n        try {\r\n            activity.id = await activityService.create(activity);\r\n            runInAction(() => {\r\n                activity.attendees = activity.attendees || [];\r\n                activity.attendees.push(createAttendee(this.getCurrentUser()!, true));\r\n            });\r\n            this.registerActivity(activity);\r\n            this.setIsSaving(false);\r\n            this.setShowFormFlag(false);\r\n            return activity.id;\r\n        } catch (error) {\r\n            console.error(error);\r\n            this.setIsSaving(false);\r\n            this.setShowFormFlag(false);\r\n        }\r\n        return '';\r\n    };\r\n\r\n    @action editActivity = async (activity: IActivity): Promise<boolean> => {\r\n        this.setIsSaving(true);\r\n        try {\r\n            await activityService.update(activity);\r\n            this.registerActivity(activity);\r\n            this.setIsSaving(false);\r\n            this.setShowFormFlag(false);\r\n            return true;\r\n        } catch (error) {\r\n            console.error(error);\r\n            this.setIsSaving(false);\r\n            this.setShowFormFlag(false);\r\n        }\r\n        return false;\r\n    };\r\n\r\n    @action deleteActivity = async (id: string) => {\r\n        this.setIsDeleting(true);\r\n        try {\r\n            await activityService.delete(id);\r\n            runInAction(() => {\r\n                this.activityRegistry.delete(id);\r\n            });\r\n            this.setIsDeleting(false);\r\n            this.setShowFormFlag(false);\r\n        } catch (error) {\r\n            console.error(error);\r\n            this.setIsDeleting(false);\r\n            this.setShowFormFlag(false);\r\n        }\r\n    };\r\n\r\n    @action attend = async (activity: IActivity) => {\r\n        try {\r\n            await activityService.attend(activity.id);\r\n            runInAction(() => {\r\n                activity.attendees = activity.attendees || [];\r\n                activity.attendees.push(createAttendee(this.getCurrentUser()!, false));\r\n            });\r\n            this.registerActivity(activity);\r\n        } catch (error) {\r\n            console.error(error);\r\n            toast.error('Problem signin up to activity, Please try again later!');\r\n        }\r\n    };\r\n\r\n    @action unattend = async (activity: IActivity) => {\r\n        try {\r\n            await activityService.unattend(activity.id);\r\n            runInAction(() => {\r\n                activity.attendees = removeAttendee(activity, this.getCurrentUser()!);\r\n            });\r\n            this.registerActivity(activity);\r\n        } catch (error) {\r\n            console.error(error);\r\n            toast.error('Problem cancelling attendance, Please try again later!');\r\n        }\r\n    };\r\n\r\n    @action getComments = async () => {\r\n        try {\r\n            if (this.selectedActivity && this.selectedActivity.comments)\r\n                return;\r\n\r\n            const comments = await activityService.getComments(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                if (this.selectedActivity)\r\n                    this.selectedActivity.comments = comments || [];\r\n            });\r\n        } catch (error) {\r\n            console.error(error);\r\n            toast.error('Problem fetching comments, Please try again later!');\r\n        }\r\n    };\r\n\r\n    @action addComment = async (comment: any) => {\r\n        comment.activityId = this.selectedActivity!.id;\r\n        try {\r\n            await this.rootStore.activityHubStore.sendComment(comment);\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    };\r\n\r\n    @action onReceivingCommentFromServer = (comment: IComment) => {\r\n        this.selectedActivity?.comments.push(comment)\r\n    };\r\n\r\n    @action setTotalActivityCount = (count: number) => {\r\n        this.totalActivitiesCount = count;\r\n    };\r\n\r\n    @action setPageNumber = (pageNumber: number) => {\r\n        this.currentPageNumber = pageNumber;\r\n    };\r\n\r\n    @action setPredicate = (key: string, value: string | Date) => {\r\n        this.predicate.clear();\r\n        if (key !== constants.PREDICATE_ALL)\r\n            this.predicate.set(key, value);\r\n    }\r\n\r\n    getQSParams = (): URLSearchParams => {\r\n        const params = new URLSearchParams();\r\n        params.append('offset', (this.currentPageNumber * PAGE_SIZE).toString());\r\n        params.append('limit', PAGE_SIZE.toString());\r\n\r\n        this.predicate.forEach((value, key) => {\r\n            if (key === constants.PREDICATE_START_DATE)\r\n                params.append(key, (value as Date).toISOString());\r\n            else\r\n                params.append(key, value.toString());\r\n        });\r\n        return params;\r\n    }\r\n\r\n    @computed get totalPages(): number {\r\n        return Math.ceil(this.totalActivitiesCount / PAGE_SIZE);\r\n    };\r\n\r\n    @computed get activityByDate(): [string, IActivity[]][] {\r\n        const sortedArray = Array.from(this.activityRegistry.values()).sort(\r\n            (a, b): number => {\r\n                if (a.date && b.date) {\r\n                    return a.date.getTime() - b.date.getTime();\r\n                }\r\n                else if (a)\r\n                    return 1;\r\n                return 0;\r\n            }\r\n        )\r\n        return this.groupActivitiesByDate(sortedArray);\r\n    };\r\n\r\n    groupActivitiesByDate = (sortedArray: IActivity[]): [string, IActivity[]][] => {\r\n        const initialValue: { [key: string]: IActivity[] } = {};\r\n        return Object.entries(sortedArray.reduce((accumulator, currentValue) => {\r\n            const date = moment(currentValue.date).format(\"MM-DD-yyyy\");\r\n            accumulator[date] = accumulator[date] ? [...accumulator[date], currentValue] : [currentValue];\r\n            return accumulator;\r\n        }, initialValue));\r\n    };\r\n\r\n    getCurrentUser = () => {\r\n        return this.rootStore.userStore.getCurrentUserInstance();\r\n    };\r\n};\r\n\r\n","import { observable, action } from 'mobx';\r\nimport { rootStore } from './rootStore';\r\nimport * as constants from '../utils/constants';\r\n\r\nclass commonStore {\r\n    rootStore: rootStore;\r\n\r\n    constructor(rootStore: rootStore) {\r\n        this.rootStore = rootStore;\r\n\r\n        //reaction(() => this.token,\r\n        //    (token) => {\r\n        //        if (token)\r\n        //            window.localStorage.setItem(constants.AUTH_TOKEN_NAME, token);\r\n        //        else\r\n        //            window.localStorage.removeItem(constants.AUTH_TOKEN_NAME);\r\n        //    });\r\n    };\r\n\r\n    //@observable token: string | null = window.localStorage.getItem(constants.AUTH_TOKEN_NAME);\r\n    @observable appLoaded: boolean = false;\r\n\r\n    @action setToken(token: string | null) {\r\n        //this.token = token;\r\n        if (token)\r\n            window.localStorage.setItem(constants.AUTH_TOKEN_NAME, token);\r\n        else\r\n            window.localStorage.removeItem(constants.AUTH_TOKEN_NAME);\r\n    }\r\n\r\n    @action setAppLoaded() {\r\n        this.appLoaded = true;\r\n    }\r\n\r\n    getToken = (): string | null => {\r\n        return window.localStorage.getItem(constants.AUTH_TOKEN_NAME);\r\n    };\r\n};\r\n\r\nexport default commonStore;","import httpService from './httpService';\r\nimport { IUser, ILogin, IRegister } from '../models/IUser';\r\n\r\nconst userService = {\r\n    current: (): Promise<IUser> => {\r\n        return httpService.get('/user');\r\n    },\r\n    login: (command: ILogin): Promise<IUser> => {\r\n        return httpService.post('/user/login', command);\r\n    },\r\n    register: (command: IRegister): Promise<IUser> => {\r\n        return httpService.post('/user/register', command);\r\n    }\r\n};\r\n\r\nexport default userService;","import { observable, action, computed, toJS } from 'mobx';\r\n\r\nimport { IUser, ILogin, IRegister } from '../models/IUser';\r\nimport userService from '../api/userService';\r\nimport { rootStore } from './rootStore';\r\nimport * as constants from '../utils/constants';\r\nimport createBrowserHistory from '../utils/createBrowserHistory';\r\nimport { IPhoto } from '../models/IProfile';\r\n\r\nclass userStore {\r\n    rootStore: rootStore;\r\n\r\n    constructor(rootStore: rootStore) {\r\n        this.rootStore = rootStore;\r\n    }\r\n\r\n    @observable user: IUser | null = null;\r\n\r\n    @computed get isUserLoggedIn(): Boolean {\r\n        return !!this.user;\r\n    };\r\n\r\n    @computed get canAccessSecureResource(): boolean {\r\n        const token = this.rootStore.commonStore.getToken();\r\n        return !!(this.isUserLoggedIn && token && token.length > 0);\r\n    };\r\n\r\n    @action setUser = (user: IUser | null) => {\r\n        this.user = user;\r\n    };\r\n\r\n    @action login = async (command: ILogin) => {\r\n        try {\r\n            this.rootStore.commonStore.setToken(null);\r\n            const user = await userService.login(command);\r\n            this.setUser(user);\r\n            this.rootStore.commonStore.setToken(user.token);\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    };\r\n\r\n    @action register = async (command: IRegister) => {\r\n        try {\r\n            if (!this.isUserLoggedIn) {\r\n                const user = await userService.register(command);\r\n                this.setUser(user);\r\n                this.rootStore.commonStore.setToken(user.token);\r\n            }\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    };\r\n\r\n    @action current = async () => {\r\n        try {\r\n            if (!this.user) {\r\n                const user = await userService.current();\r\n                this.setUser(user);\r\n            }\r\n            return this.user;\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    };\r\n\r\n    @action setMainPhoto(mainPhoto: IPhoto) {\r\n        if (this.user)\r\n            this.user.image = mainPhoto.url;\r\n    }\r\n\r\n    @action setDisplayName(displayName: string) {\r\n        if (this.user)\r\n            this.user.displayName = displayName;\r\n    }\r\n\r\n    @action logout = () => {\r\n        this.rootStore.commonStore.setToken(null);\r\n        this.setUser(null);\r\n        createBrowserHistory.push(constants.NAV_HOME);\r\n    };\r\n\r\n    getCurrentUserInstance = () => {\r\n        return toJS(this.user);\r\n    };\r\n};\r\n\r\nexport default userStore;","import { IProfile } from \"../models/IProfile\";\r\nimport httpService from \"./httpService\";\r\nimport { IUserActivity } from \"../models/IActivity\";\r\n\r\nconst profileService = {\r\n    get: (appUserId: string): Promise<IProfile> => {\r\n        return httpService.get(`profile/${appUserId}`);\r\n    },\r\n    userActivities: (appUserId: string, qsParam: URLSearchParams): Promise<IUserActivity[]> => {\r\n        return httpService.get(`profile/${appUserId}/activities`, qsParam);\r\n    },\r\n    followers: (userId: string): Promise<IProfile[]> => {\r\n        return httpService.get(`profile/${userId}/followers`);\r\n    },\r\n    followings: (userId: string): Promise<IProfile[]> => {\r\n        return httpService.get(`profile/${userId}/followings`);\r\n    },\r\n    update: (profile: IProfile): Promise<string> => {\r\n        return httpService.put('profile/', profile);\r\n    },\r\n    follow: (userId: string) => {\r\n        return httpService.post(`profile/${userId}/follow`, {});\r\n    },\r\n    unfollow: (userId: string) => {\r\n        return httpService.post(`profile/${userId}/unfollow`, {});\r\n    }\r\n};\r\n\r\nexport default profileService;","import httpService from './httpService';\r\nimport { IPhoto } from '../models/IProfile';\r\n\r\nconst photoService = {\r\n    upload: (file: Blob): Promise<IPhoto> => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return httpService.postForm('photo/', formData);\r\n    },\r\n    setMain: (photoId: string): Promise<void> => {\r\n        return httpService.post(`photo/${photoId}/setmain`, photoId);\r\n    },\r\n    delete: (photoId: string): Promise<void> => {\r\n        return httpService.delete(`photo/${photoId}`);\r\n    }\r\n};\r\n\r\nexport default photoService;","import { rootStore } from './rootStore';\r\nimport { action, computed, runInAction, observable, reaction } from 'mobx';\r\nimport { toast } from 'react-toastify';\r\n\r\nimport profileService from '../api/profileService';\r\nimport photoService from '../api/photoService';\r\nimport { IProfile, IPhoto } from '../models/IProfile';\r\nimport * as constants from '../utils/constants';\r\nimport { IUserActivity } from '../models/IActivity';\r\n\r\nexport default class profileStore {\r\n    rootStore: rootStore;\r\n    @observable userProfile: IProfile | null = null;\r\n    @observable activeTabIndex: string | number | undefined = 0;\r\n    @observable followers: IProfile[] | undefined = undefined;\r\n    @observable isLoadingfollowers: boolean = false;\r\n    @observable userActivities: IUserActivity[] | null = null;\r\n\r\n    constructor(rootStore: rootStore) {\r\n        this.rootStore = rootStore;\r\n\r\n        reaction(() => this.activeTabIndex, index => {\r\n            if (index === constants.TAB_INDEX_FOLLOWERS)\r\n                this.loadFollowers(this.userProfile!.appUserId, constants.PREDICATE_FOLLOWERS);\r\n            else if (index === constants.TAB_INDEX_FOLLOWINGS)\r\n                this.loadFollowers(this.userProfile!.appUserId, constants.PREDICATE_FOLLOWINGS);\r\n            else\r\n                this.followers = undefined;\r\n        });\r\n    }\r\n\r\n    @computed get isViewingOwnProfile(): boolean {\r\n        return !!(this.rootStore.userStore.user?.userName === this.userProfile?.username);\r\n    };\r\n\r\n    @computed get isUserViewingFollowersTab(): boolean {\r\n        return (this.activeTabIndex === constants.TAB_INDEX_FOLLOWERS);\r\n    };\r\n\r\n    @computed get isUserViewingFollowingTab(): boolean {\r\n        return (this.activeTabIndex === constants.TAB_INDEX_FOLLOWINGS);\r\n    };\r\n\r\n    @action setActiveTab = (tabIndex: string | number | undefined) => {\r\n        this.activeTabIndex = tabIndex;\r\n    };\r\n\r\n    @action setUserProfile = (userProfile: IProfile) => {\r\n        this.userProfile = userProfile;\r\n    };\r\n\r\n    @action getUserProfile = async (appUserId: string) => {\r\n        try {\r\n            const profile = await profileService.get(appUserId);\r\n            this.setUserProfile(profile);\r\n        } catch (error) {\r\n            console.error(error);\r\n            toast.error('Error loading user profile');\r\n        }\r\n    };\r\n\r\n    @action uploadPhoto = async (file: Blob): Promise<IPhoto | undefined> => {\r\n        try {\r\n            const photo = await photoService.upload(file);\r\n            runInAction(() => {\r\n                this.userProfile?.photos.push(photo);\r\n            });\r\n            return photo;\r\n        } catch (error) {\r\n            console.error(error);\r\n            toast.error('Error uploading photo');\r\n        }\r\n    };\r\n\r\n    @action setMainPhoto = async (photoId: string): Promise<void> => {\r\n        try {\r\n            await photoService.setMain(photoId);\r\n            runInAction(() => {\r\n                if (this.userProfile) {\r\n                    this.userProfile.mainPhoto = this.userProfile?.photos?.filter((p) => p.id === photoId)[0];\r\n                    this.rootStore.userStore.setMainPhoto(this.userProfile.mainPhoto);\r\n                }\r\n            });\r\n        } catch (error) {\r\n            console.error(error);\r\n            toast.error('Problem setting photo as main');\r\n        }\r\n    };\r\n\r\n    @action deletePhoto = async (photoId: string): Promise<void> => {\r\n        try {\r\n            await photoService.delete(photoId);\r\n            runInAction(() => {\r\n                this.userProfile!.photos = this.userProfile!.photos!.filter((p) => p.id !== photoId);\r\n            });\r\n        } catch (error) {\r\n            console.error(error);\r\n            toast.error('Problem deleting photo');\r\n        }\r\n    }\r\n\r\n    @action updateProfile = async (aboutProfile: IProfile) => {\r\n        try {\r\n            const displayName = await profileService.update(aboutProfile);\r\n            runInAction(() => {\r\n                this.rootStore.userStore.setDisplayName(displayName);\r\n                this.userProfile = { ...this.userProfile, ...aboutProfile };\r\n                this.userProfile!.displayName = displayName;\r\n            });\r\n        } catch (error) {\r\n            console.error(error);\r\n            toast.error('Problem updating user profile');\r\n        }\r\n    };\r\n\r\n    @action follow = async (userId: string) => {\r\n        try {\r\n            const user: IProfile = await profileService.follow(userId);\r\n            runInAction(() => {\r\n                this.userProfile!.followersCount += 1;\r\n                this.userProfile!.following = true;\r\n                if (this.isUserViewingFollowersTab) {\r\n                    this.followers = this.followers ?? [];\r\n                    this.followers.push(user);\r\n                }\r\n            });\r\n        } catch (error) {\r\n            console.error(error);\r\n            toast.error('Problem following user');\r\n        }\r\n    };\r\n\r\n    @action unfollow = async (userId: string) => {\r\n        try {\r\n            await profileService.unfollow(userId);\r\n            runInAction(() => {\r\n                this.userProfile!.followersCount -= 1;\r\n                this.userProfile!.following = false;\r\n                if (this.isUserViewingFollowersTab) {\r\n                    this.followers = this.followers?.filter(u => u.appUserId !== this.rootStore.userStore.user?.appUserId);\r\n                }\r\n            });\r\n        } catch (error) {\r\n            console.error(error);\r\n            toast.error('Problem unfollowing user');\r\n        }\r\n    };\r\n\r\n    @action loadFollowers = async (userId: string, predicate: string) => {\r\n        try {\r\n            this.isLoadingfollowers = true;\r\n            let followers: IProfile[] | undefined = undefined;\r\n\r\n            if (predicate === constants.PREDICATE_FOLLOWERS)\r\n                followers = await profileService.followers(userId);\r\n            else\r\n                followers = await profileService.followings(userId);\r\n\r\n            runInAction(() => {\r\n                this.followers = followers && followers.length > 0 ? followers : undefined;\r\n                this.isLoadingfollowers = false;\r\n            });\r\n        } catch (error) {\r\n            console.error(error);\r\n            toast.error('Problem loading followers');\r\n            this.isLoadingfollowers = false;\r\n        }\r\n        return null;\r\n    };\r\n\r\n    @action setUserActivities = (userActivities: IUserActivity[]) => {\r\n        this.userActivities = userActivities;\r\n    };\r\n\r\n    @action loadUserActivities = async (appUserId: string, predicate: string) => {\r\n        try {\r\n            const qsParams = new URLSearchParams();\r\n            qsParams.set('Predicate', predicate);\r\n            const userActivities = await profileService.userActivities(appUserId, qsParams);\r\n            this.setUserActivities(userActivities);\r\n        } catch (error) {\r\n            console.error(error);\r\n            toast.error('Problem loading user activities');\r\n        }\r\n        return null;\r\n    };\r\n};\r\n\r\n","import { observable, action } from 'mobx';\r\nimport { toast } from 'react-toastify';\r\nimport { HubConnection, HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\r\n\r\nimport { rootStore } from './rootStore';\r\nimport * as constants from '../utils/constants';\r\n\r\nexport default class activityHubStore {\r\n    rootStore: rootStore;\r\n\r\n    constructor(rootStore: rootStore) {\r\n        this.rootStore = rootStore;\r\n    }\r\n\r\n    @observable.ref hubConnection: HubConnection | null = null;\r\n\r\n    @action createHubConnection = (activityId: string) => {\r\n        //Build Hub Connection\r\n        this.hubConnection = new HubConnectionBuilder()\r\n            .withUrl(`${constants.BASE_SERVICE_URL}/activitychat`, {\r\n                //Send token as part as QueryString.\r\n                accessTokenFactory: () => this.rootStore.commonStore.getToken()!\r\n            })\r\n            .configureLogging(LogLevel.Information)\r\n            .build();\r\n\r\n        //Start Hub Connection.\r\n        this.hubConnection.start()\r\n            .then(() => this.hubConnection?.state!)\r\n            .then(() => {\r\n                console.log(`Attempting to join group ${activityId}`);\r\n                if (this.hubConnection!.state === 'Connected')\r\n                    this.hubConnection?.invoke('AddToGroup', activityId);\r\n            })\r\n            .catch(error => console.log(`Error establishing a connection: ${error}`));\r\n\r\n        //Event Handlers on Receiving message from server.\r\n        this.hubConnection.on('ReceiveComment', comment => {\r\n            this.rootStore.activityStore.onReceivingCommentFromServer(comment);\r\n        });\r\n\r\n        this.hubConnection.on(\"GroupNotification\", message => {\r\n            toast.info(message);\r\n        });\r\n    };\r\n\r\n    @action stopHubConnection = (activityId: string) => {\r\n        this.hubConnection!.invoke('RemoveFromGroup', activityId)\r\n            .then(() => {\r\n                this.hubConnection!.stop();\r\n            })\r\n            .then(() => {\r\n                console.log('Connection stopped');\r\n            })\r\n            .catch(error => console.log(`Error establishing a connection: ${error}`));\r\n    };\r\n\r\n    @action sendComment = async (comment: any) => {\r\n        await this.hubConnection!.invoke('SendComment', comment);\r\n    };\r\n}","import { createContext } from 'react';\r\nimport { configure } from 'mobx';\r\n\r\nimport activityStore from './activityStore';\r\nimport commonStore from './commonStore';\r\nimport userStore from './userStore';\r\nimport profileStore from './profileStore';\r\nimport activityHubStore from './activityHubStore';\r\n\r\n// don't allow state modifications outside actions\r\nconfigure({ enforceActions: \"always\" });\r\n\r\nexport class rootStore {\r\n\r\n    activityStore: activityStore;\r\n    userStore: userStore;\r\n    commonStore: commonStore;\r\n    profileStore: profileStore;\r\n    activityHubStore: activityHubStore;\r\n\r\n    constructor() {\r\n        this.activityStore = new activityStore(this);\r\n        this.userStore = new userStore(this);\r\n        this.commonStore = new commonStore(this);\r\n        this.profileStore = new profileStore(this);\r\n        this.activityHubStore = new activityHubStore(this);\r\n    }\r\n};\r\n\r\n\r\nexport const rootStoreContext = createContext(new rootStore());\r\n\r\n","import React, { SyntheticEvent } from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\n\r\nexport enum modalSize {\r\n    Mini = 'mini',\r\n    Tiny = 'tiny',\r\n    Small = 'small',\r\n    Large = 'large',\r\n    Fullscreen = 'fullscreen'\r\n};\r\n\r\ninterface IProps {\r\n    content: any;\r\n    actions?: any;\r\n    trigger?: any;\r\n\r\n    closeIcon?: boolean;\r\n    closeOnEscape?: boolean;\r\n    closeOnDocumentClick?: boolean;\r\n    closeOnDimmerClick?: boolean;\r\n    defaultOpen?: boolean;\r\n    //\r\n    open?: boolean,\r\n    size?: modalSize,\r\n    title?: string;\r\n\r\n    onClose?: (event: SyntheticEvent, data: object) => void;\r\n    onOpen?: (event: SyntheticEvent, data: object) => void;\r\n    onActionClick?: (event: SyntheticEvent, data: object) => void;\r\n};\r\n\r\nconst ModelContainer: React.FC<IProps> = (props) => {\r\n    const settings: IProps = {\r\n        trigger: props.trigger,\r\n        content: props.content,\r\n        title: props.title,\r\n        actions: props.actions,\r\n        closeIcon: props.closeIcon || true,\r\n        closeOnDocumentClick: props.closeOnDocumentClick || false,\r\n        closeOnDimmerClick: props.closeOnDocumentClick || false,\r\n        closeOnEscape: props.closeOnEscape || false,\r\n        open: props.open,\r\n        size: props.size || modalSize.Large,\r\n        defaultOpen: props.defaultOpen || false,\r\n        onClose: props.onClose,\r\n        onOpen: props.onOpen,\r\n        onActionClick: props.onActionClick\r\n    };\r\n\r\n    const onOpen = (event: SyntheticEvent, data: object) => {\r\n        if (settings.onOpen) {\r\n            settings.onOpen(event, data);\r\n        }\r\n    };\r\n\r\n    const onClose = (event: SyntheticEvent, data: object) => {\r\n        event.preventDefault();\r\n        if (settings.onClose) {\r\n            settings.onClose(event, data);\r\n        }\r\n    };\r\n\r\n    const onActionClick = (event: SyntheticEvent, data: object) => {\r\n        if (settings.onActionClick) {\r\n            settings.onActionClick(event, data);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Modal\r\n            closeIcon={settings.closeIcon}\r\n            defaultOpen={settings.defaultOpen}\r\n            closeOnDimmerClick={settings.closeOnDimmerClick}\r\n            closeOnDocumentClick={settings.closeOnDocumentClick}\r\n            closeOnEscape={settings.closeOnEscape}\r\n            size={settings.size as any}\r\n            open={settings.open}\r\n            onOpen={onOpen}\r\n            onClose={onClose}\r\n            onActionClick={onActionClick}\r\n        >\r\n\r\n            {settings.title && (<Modal.Header>{settings.title}</Modal.Header>)}\r\n\r\n            <Modal.Content>\r\n                {settings.content}\r\n            </Modal.Content>\r\n\r\n            {settings.actions && (<Modal.Actions>{settings.actions}</Modal.Actions>)}\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default ModelContainer;","import React, { useContext, Fragment } from 'react';\r\nimport { Container, Menu, Button, Dropdown, Image } from 'semantic-ui-react';\r\nimport { NavLink, Link } from 'react-router-dom';\r\n\r\nimport * as constants from '../../utils/constants';\r\nimport { rootStoreContext } from '../../stores/rootStore';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nconst NavBar: React.FC = () => {\r\n    const rootStoreObj = useContext(rootStoreContext);\r\n    const userStore = rootStoreObj.userStore;\r\n\r\n    return (\r\n        <Menu fixed=\"top\" inverted>\r\n            <Container>\r\n                <Menu.Item header as={NavLink} to={`${constants.NAV_HOME}`} exact >\r\n                    <img src=\"/assets/logo.png\" alt=\"logo\" />\r\n                    Social Network\r\n                </Menu.Item>\r\n                {userStore.isUserLoggedIn && userStore.user &&\r\n                    (<Fragment>\r\n                        <Menu.Item name='Activities' as={NavLink} to={`${constants.NAV_ACTIVITIES}`} />\r\n\r\n                        <Menu.Item>\r\n                            <Button as={NavLink} to={`${constants.NAV_CREATE_ACTIVITY}`}\r\n                                content=\"Create Activity\" positive />\r\n                        </Menu.Item>\r\n\r\n                        <Menu.Item position='right'>\r\n                            <Image avatar spaced='right' src={userStore.user?.image || '/assets/user.png'} />\r\n                            <Dropdown pointing='top left' text={userStore.user?.displayName}>\r\n                                <Dropdown.Menu>\r\n                                    <Dropdown.Item\r\n                                        as={Link}\r\n                                        to={`${constants.NAV_USER_PROFILE}/${userStore.user?.appUserId}`}\r\n                                        text='My profile'\r\n                                        icon='user'\r\n                                    />\r\n                                    <Dropdown.Item onClick={() => userStore.logout()} text='Logout' icon='power' />\r\n                                </Dropdown.Menu>\r\n                            </Dropdown>\r\n                        </Menu.Item>\r\n                    </Fragment>)}\r\n            </Container>\r\n        </Menu>\r\n    )\r\n};\r\n\r\nexport default observer(NavBar);","import React, { useContext, Fragment } from 'react';\r\nimport { Container, Header, Segment, Image, Button } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport * as constants from '../../utils/constants';\r\nimport { rootStoreContext } from '../../stores/rootStore';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\n\r\nconst Home: React.FC = () => {\r\n    const rootStoreObject = useContext(rootStoreContext);\r\n    const userStoreObj = rootStoreObject.userStore;\r\n    const commonStoreObj = rootStoreObject.commonStore;\r\n\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead'>\r\n            <Container text>\r\n                <Header as='h1' inverted>\r\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{ marginBottom: 12 }} />\r\n                    Social Network\r\n                </Header>\r\n\r\n                {userStoreObj.isUserLoggedIn === true && commonStoreObj.getToken()\r\n                    ? (<Fragment>\r\n                        <Header as='h2' inverted content={`Welcome back ${userStoreObj.user!.displayName}`} />\r\n                        <Button as={Link} to={constants.NAV_ACTIVITIES} size='huge' inverted>\r\n                            Go to activities!\r\n                        </Button>\r\n                    </Fragment>)\r\n                    : (<Fragment>\r\n                        <Button as={Link} to={constants.NAV_LOGIN} size='huge' inverted>\r\n                            Login\r\n                        </Button>\r\n                        <Button as={Link} to={constants.NAV_REGISTER} size='huge' inverted>\r\n                            Register\r\n                        </Button>\r\n                    </Fragment>)\r\n                }\r\n            </Container>\r\n        </Segment>\r\n    );\r\n}\r\n\r\nexport default observer(Home);","import React from 'react';\r\nimport { List, Image, Popup } from 'semantic-ui-react';\r\nimport { IAttendee } from '../../../models/IActivity';\r\n\r\ninterface IProps {\r\n    attendees: IAttendee[]\r\n}\r\n\r\nconst styles = {\r\n    borderColor: 'orange',\r\n    borderWidth: 2\r\n};\r\n\r\nconst ActivityListItemAttendee: React.FC<IProps> = ({ attendees }) => {\r\n    return (\r\n        <List horizontal>\r\n            {\r\n                attendees?.map((attendee: IAttendee) => {\r\n                    let path = attendee.image || '/assets/user.png';\r\n                    return (\r\n                        <List.Item key={attendee.appUserId}>\r\n                            <Popup\r\n                                header={attendee.displayName}\r\n                                trigger={\r\n                                    <Image src={path} size='mini'\r\n                                        circular\r\n                                        bordered\r\n                                        style={attendee.following ? styles : null}\r\n                                    />\r\n                                }\r\n                            />\r\n                        </List.Item>\r\n                    );\r\n                })\r\n            }\r\n        </List>\r\n    )\r\n};\r\n\r\nexport default ActivityListItemAttendee;","import React from 'react';\r\nimport { Item, Button, Segment, Icon, Label } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport moment from 'moment';\r\n\r\nimport { IActivity } from '../../../models/IActivity';\r\nimport ActivityListItemAttendee from './ActivityListItemAttendee';\r\nimport * as constants from '../../../utils/constants';\r\n\r\ninterface IProps {\r\n    activity: IActivity;\r\n};\r\n\r\nconst ActivityListItem: React.FC<IProps> = ({ activity }) => {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image\r\n                            size='tiny'\r\n                            circular\r\n                            src={activity.host?.image || '/assets/user.png'}\r\n                            style={{ marginBottom: 3 }}\r\n                        />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`${constants.NAV_ACTIVITIES}/${activity.id}`}>\r\n                                {activity.title}\r\n                            </Item.Header>\r\n                            <Item.Description>\r\n                                Hosted by {' '}\r\n                                <Link to={`${constants.NAV_USER_PROFILE}/${activity.host?.appUserId}`}>\r\n                                    {activity.host?.displayName}\r\n                                </Link>\r\n                            </Item.Description>\r\n                            {activity.isCurrentUserHost && (\r\n                                <Item.Description>\r\n                                    <Label\r\n                                        basic\r\n                                        color='orange'\r\n                                        content='You are hosting this activity'\r\n                                    />\r\n                                </Item.Description>\r\n                            )}\r\n                            {activity.isCurrentUserGoing && !activity.isCurrentUserHost && (\r\n                                <Item.Description>\r\n                                    <Label\r\n                                        basic\r\n                                        color='green'\r\n                                        content='You are going to this activity'\r\n                                    />\r\n                                </Item.Description>\r\n                            )}\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <Icon name=\"clock\" />{moment(activity.date).format(\"h:mm A\")}\r\n                <Icon name=\"marker\" />{activity.venue}, {activity.city}\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.attendees} />\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                <Button\r\n                    as={Link}\r\n                    to={`${constants.NAV_ACTIVITIES}/${activity.id}`}\r\n                    name={activity.id}\r\n                    content=\"View\"\r\n                    floated=\"right\"\r\n                    color=\"blue\" />\r\n            </Segment>\r\n        </Segment.Group>\r\n\r\n    );\r\n};\r\n\r\nexport default ActivityListItem;","import React, { useContext, Fragment } from 'react';\r\nimport { Item,  Label } from 'semantic-ui-react';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nimport { rootStoreContext } from '../../../stores/rootStore';\r\nimport ActivityListItem from './ActivityListItem';\r\n\r\n\r\nconst ActivityList: React.FC = () => {\r\n    const rootStoreObj = useContext(rootStoreContext);\r\n    const activityStoreObj = rootStoreObj.activityStore;\r\n\r\n    return (\r\n        <Fragment>\r\n            {\r\n                activityStoreObj.activityByDate.map(([group, activities]) => {\r\n                    return (\r\n                        <Fragment key={group}>\r\n                            <Label size=\"large\" color=\"blue\">\r\n                                {group}\r\n                            </Label>\r\n                            <Item.Group divided>\r\n                                {\r\n                                    activities.map((item) => {\r\n                                        return <ActivityListItem key={item.id} activity={item} />\r\n                                    })\r\n                                }\r\n                            </Item.Group>\r\n                        </Fragment>\r\n                    )\r\n                })\r\n            }\r\n        </Fragment>\r\n    )\r\n};\r\n\r\nexport default observer(ActivityList);","import React from 'react';\r\nimport { Loader } from 'semantic-ui-react';\r\n\r\ninterface IProps {\r\n    message?: string;\r\n    loading: boolean;\r\n}\r\nconst Spinner: React.FC<IProps> = ({ message, loading }) => {\r\n    return (\r\n        <Loader active={loading} inline='centered'>{message}</Loader>\r\n    )\r\n};\r\n\r\nexport default Spinner;\r\n","import React, { Fragment, useContext } from 'react';\r\nimport { Menu, Header } from 'semantic-ui-react';\r\nimport { Calendar } from 'react-widgets';\r\n\r\nimport { rootStoreContext } from '../../../stores/rootStore';\r\nimport * as constants from '../../../utils/constants';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nconst ActivityFilter = () => {\r\n    const rootStoreObj = useContext(rootStoreContext);\r\n    const { setPredicate, predicate } = rootStoreObj.activityStore;\r\n\r\n    return (\r\n        <Fragment>\r\n            <Menu vertical size={'large'} style={{ width: '100%', marginTop: 50 }}>\r\n                <Header icon={'filter'} attached color={'teal'} content={'Filters'} />\r\n                <Menu.Item\r\n                    active={!predicate.has(constants.PREDICATE_IS_GOING) && !predicate.has(constants.PREDICATE_IS_HOST)}\r\n                    onClick={() => setPredicate(constants.PREDICATE_ALL, 'true')}\r\n                    color={'blue'}\r\n                    name={'all'}\r\n                    content={'All Activities'} />\r\n\r\n                <Menu.Item\r\n                    active={predicate.has(constants.PREDICATE_IS_GOING)}\r\n                    onClick={() => setPredicate(constants.PREDICATE_IS_GOING, 'true')}\r\n                    color={'blue'}\r\n                    name={'username'}\r\n                    content={\"I'm Going\"} />\r\n\r\n                <Menu.Item\r\n                    active={predicate.has(constants.PREDICATE_IS_HOST)}\r\n                    onClick={() => setPredicate(constants.PREDICATE_IS_HOST, 'true')}\r\n                    color={'blue'}\r\n                    name={'host'}\r\n                    content={\"I'm hosting\"}\r\n                />\r\n            </Menu>\r\n            <Header icon={'calendar'} attached color={'teal'} content={'Select Date'} />\r\n            <Calendar\r\n                onChange={(date) => setPredicate(constants.PREDICATE_START_DATE, date!)}\r\n                value={predicate.get(constants.PREDICATE_START_DATE) || new Date()}\r\n            />\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default observer(ActivityFilter);","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nconst ActivityListLoader = () => {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 50 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default ActivityListLoader;","import React, { useEffect, useContext } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\n\r\nimport ActivityList from './ActivityList';\r\nimport { rootStoreContext } from '../../../stores/rootStore';\r\nimport Spinner from '../../../layout/Spinner';\r\nimport ActivityFilter from './ActivityFilter';\r\nimport ActivityListLoader from './ActivityListLoader';\r\n\r\nconst ActivityDashboard: React.FC = () => {\r\n    const rootStoreObj = useContext(rootStoreContext);\r\n    const { loadActivities, isLoadingActivities, setPageNumber, currentPageNumber, totalPages } = rootStoreObj.activityStore;\r\n\r\n    useEffect(() => {\r\n        const fetch = async () => {\r\n            await loadActivities();\r\n        }\r\n        fetch();\r\n    }, [loadActivities]);\r\n\r\n    const loadNextHandler = async () => {\r\n        setPageNumber(currentPageNumber + 1);\r\n        await loadActivities();\r\n    };\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10} >\r\n                {(isLoadingActivities && currentPageNumber === 0)\r\n                    ? (<ActivityListLoader />) : (\r\n                        <InfiniteScroll\r\n                            pageStart={0}\r\n                            loadMore={loadNextHandler}\r\n                            hasMore={!isLoadingActivities && currentPageNumber + 1 < totalPages}\r\n                            initialLoad={false}>\r\n                            <ActivityList />\r\n                        </InfiniteScroll>\r\n                    )}\r\n            </Grid.Column>\r\n            <Grid.Column width={6} >\r\n                <ActivityFilter />\r\n            </Grid.Column>\r\n            <Grid.Column width={10} >\r\n                <Spinner loading={isLoadingActivities} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default observer(ActivityDashboard);","import React from 'react';\r\nimport { Dimmer, Loader } from 'semantic-ui-react';\r\n\r\nconst ProgressBar: React.FC<{\r\n    message: string,\r\n    inverted?: boolean\r\n}> = ({ message = \"Loading\", inverted = true }) => {\r\n    return (\r\n        <Dimmer active inverted={inverted}>\r\n            <Loader content={message} />\r\n        </Dimmer>\r\n    )\r\n};\r\n\r\nexport default ProgressBar;","import React from 'react';\r\nimport { FieldRenderProps } from 'react-final-form';\r\nimport { FormFieldProps, Form, Label } from 'semantic-ui-react';\r\n\r\ninterface IProps extends FieldRenderProps<string, HTMLElement>, FormFieldProps { }\r\n\r\nconst TextAreaInput: React.FC<IProps> = ({\r\n    input,\r\n    width,\r\n    rows,\r\n    placeholder,\r\n    meta: { touched, error }\r\n}) => {\r\n    return (\r\n        <Form.Field error={touched && !!error} width={width}>\r\n            <textarea rows={rows} {...input} placeholder={placeholder} />\r\n            {touched && error && (\r\n                <Label basic color='red'>\r\n                    {error}\r\n                </Label>\r\n            )}\r\n        </Form.Field>\r\n    );\r\n};\r\n\r\nexport default TextAreaInput;","import React, { Fragment, useContext, useEffect, useState } from 'react';\r\nimport { Segment, Header, Comment, Button, Form } from 'semantic-ui-react';\r\nimport { Form as FinalForm, Field } from 'react-final-form';\r\nimport moment from 'moment';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { rootStoreContext } from '../../../stores/rootStore';\r\nimport { IComment } from '../../../models/IActivity';\r\nimport * as constants from '../../../utils/constants';\r\nimport TextAreaInput from '../../../common/elements/TextAreaInput';\r\nimport Spinner from '../../../layout/Spinner';\r\n\r\n\r\nconst ActivityDetailChat: React.FC = () => {\r\n    const rootStoreObject = useContext(rootStoreContext);\r\n    const { addComment, selectedActivity, getComments } = rootStoreObject.activityStore;\r\n    const { createHubConnection, stopHubConnection } = rootStoreObject.activityHubStore;\r\n    const [isLoadingComments, setIsLoadingComments] = useState(false);\r\n\r\n\r\n    useEffect(() => {\r\n        if (selectedActivity) {\r\n            createHubConnection(selectedActivity.id);\r\n\r\n            //Stop hub connection on component unmount\r\n            return () => {\r\n                return stopHubConnection(selectedActivity.id);\r\n            };\r\n        }\r\n    }, [createHubConnection, stopHubConnection, selectedActivity]);\r\n\r\n    useEffect(() => {\r\n        const load = async () => {\r\n            setIsLoadingComments(true);\r\n            await getComments();\r\n            setIsLoadingComments(false);\r\n        };\r\n        if (selectedActivity)\r\n            load();\r\n    }, [getComments, selectedActivity]);\r\n\r\n    if (isLoadingComments)\r\n        return <Spinner message=\"Loading Comment\" loading={true} />\r\n\r\n    return (\r\n        <Fragment>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{ border: 'none' }}>\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Comment.Group>\r\n                    {\r\n                        selectedActivity && selectedActivity!.comments &&\r\n                        selectedActivity.comments.map((comment: IComment) => {\r\n                            return (\r\n                                <Comment key={comment.id}>\r\n                                    <Comment.Avatar src={comment.userImage || '/assets/user.png'} />\r\n                                    <Comment.Content>\r\n                                        <Comment.Author as={Link} to={`${constants.NAV_USER_PROFILE}/${comment?.userId}`}>\r\n                                            {comment.userDisplayName}\r\n                                        </Comment.Author>\r\n                                        <Comment.Metadata>\r\n                                            <div>{moment(comment.createdAt).format('dddd Do MMM')} at {moment(comment.createdAt).format('h:mm A')}  </div>\r\n                                        </Comment.Metadata>\r\n                                        <Comment.Text>{comment.body}</Comment.Text>\r\n                                    </Comment.Content>\r\n                                </Comment>)\r\n                        })\r\n                    }\r\n                    <FinalForm\r\n                        onSubmit={addComment}\r\n                        render={({ handleSubmit, submitting, pristine, form }) => (\r\n                            <Form onSubmit={() => handleSubmit()!.then(() => form.reset())}>\r\n                                <Field\r\n                                    name='Body'\r\n                                    component={TextAreaInput}\r\n                                    rows={2}\r\n                                    placeholder='Add your comment'\r\n                                />\r\n\r\n                                <Button\r\n                                    content='Add Reply'\r\n                                    labelPosition='left'\r\n                                    icon='edit'\r\n                                    primary\r\n                                    loading={submitting}\r\n                                    disabled={pristine}\r\n                                />\r\n                            </Form>\r\n                        )}\r\n                    />\r\n                </Comment.Group>\r\n            </Segment>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default observer(ActivityDetailChat);","import React, { useState, useContext } from 'react';\r\nimport { Segment, Image, Item, Header, Button } from 'semantic-ui-react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Link } from 'react-router-dom';\r\nimport moment from 'moment';\r\n\r\nimport { IActivity } from '../../../models/IActivity';\r\nimport * as constants from '../../../utils/constants';\r\nimport { rootStoreContext } from '../../../stores/rootStore';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\nconst ActivityDetailHeader: React.FC<{ activity: IActivity | undefined }> = ({ activity }) => {\r\n    const rootStoreObject = useContext(rootStoreContext);\r\n\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n\r\n    const attendActivity = async () => {\r\n        setLoading(true);\r\n        try {\r\n            await rootStoreObject.activityStore.attend(activity!);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const unAttendActivity = async () => {\r\n        setLoading(true);\r\n        try {\r\n            await rootStoreObject.activityStore.unattend(activity!);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{ padding: '0' }}>\r\n                <Image\r\n                    src={`/assets/categoryImages/${activity?.category}.jpg`}\r\n                    fluid style={activityImageStyle} />\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header size='huge' content={activity?.title} style={{ color: 'white' }} />\r\n                                <p>{moment(activity?.date).format('dddd Do MMM')}</p>\r\n                                <p>\r\n                                    Hosted by{' '}\r\n                                    <Link to={`${constants.NAV_USER_PROFILE}/${activity?.host?.appUserId}`}>\r\n                                        <strong>{activity?.host?.displayName}</strong>\r\n                                    </Link>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached=\"bottom\">                \r\n                {\r\n                    !activity?.isCurrentUserHost && !activity?.isCurrentUserGoing &&\r\n                    <Button loading={loading} onClick={attendActivity} color='teal'>Join Activity</Button>\r\n                }\r\n                {\r\n                    !activity?.isCurrentUserHost && activity?.isCurrentUserGoing &&\r\n                    <Button loading={loading} onClick={unAttendActivity} >Cancel attendence</Button>\r\n                }\r\n                {activity?.isCurrentUserHost &&\r\n                    <Button as={Link} to={`${constants.NAV_MANAGE_ACTIVITY}/${activity?.id}`}\r\n                        color='orange' floated='right'>Manage Event</Button>\r\n                }\r\n            </Segment>\r\n        </Segment.Group>\r\n    );\r\n};\r\n\r\nexport default observer(ActivityDetailHeader);","import React from 'react';\r\nimport { Segment, Grid, Icon } from 'semantic-ui-react';\r\nimport moment from 'moment';\r\n\r\nimport { IActivity } from '../../../models/IActivity';\r\n\r\nconst ActivityDetailInfo: React.FC<{ activity: IActivity | undefined }> = ({ activity }) => {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity?.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <span>{moment(activity?.date).format('dddd Do MMM')} at {moment(activity?.date).format('h:mm A')}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>\r\n                            {activity?.venue}, {activity?.city}\r\n                        </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    );\r\n};\r\n\r\nexport default ActivityDetailInfo;","import React, { Fragment } from 'react';\r\nimport { Segment, List, Image, Item, Label } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { IAttendee } from '../../../models/IActivity';\r\nimport { NAV_USER_PROFILE } from '../../../utils/constants';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\ninterface IProps {\r\n    attendees: IAttendee[]\r\n}\r\n\r\nconst ActivityDetailedSidebar: React.FC<IProps> = ({ attendees }) => {\r\n    return (\r\n        <Fragment>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'>\r\n                {`${attendees?.length} ${attendees?.length > 1 ? 'People' : 'Person'} going`}\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {\r\n                        attendees?.map((attendee: IAttendee) => {\r\n                            return (\r\n                                <Item key={attendee.appUserId} style={{ position: 'relative' }}>\r\n                                    {attendee.isHost &&\r\n                                        (<Label\r\n                                            style={{ position: 'absolute' }}\r\n                                            color='orange'\r\n                                            ribbon='right'>\r\n                                            Host\r\n                                        </Label>)\r\n                                    }\r\n                                    <Image size='tiny' src={attendee.image || '/assets/user.png'} />\r\n                                    <Item.Content verticalAlign='middle'>\r\n                                        <Item.Header as='h3'>\r\n                                            <Link to={`${NAV_USER_PROFILE}/${attendee.appUserId}`}>\r\n                                                {attendee.displayName}\r\n                                            </Link>\r\n                                        </Item.Header>\r\n                                        {attendee.following &&\r\n                                            <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>\r\n                                        }\r\n                                    </Item.Content>\r\n                                </Item>\r\n                            );\r\n                        })\r\n                    }\r\n                </List>\r\n            </Segment>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default observer(ActivityDetailedSidebar);","import React, { useContext, useEffect } from 'react';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nimport { rootStoreContext } from '../../../stores/rootStore';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport ProgressBar from '../../../layout/ProgressBar';\r\nimport ActivityDetailChat from './ActivityDetailChat';\r\nimport ActivityDetailHeader from './ActivityDetailHeader';\r\nimport ActivityDetailInfo from './ActivityDetailInfo';\r\nimport ActivityDetailSidebar from './ActivityDetailedSidebar';\r\n\r\ninterface iRouteProps {\r\n    id: string;\r\n};\r\n\r\nconst ActivityDetails: React.FC<RouteComponentProps<iRouteProps>> = (props) => {\r\n    const rootStoreObj = useContext(rootStoreContext);\r\n    const activityStoreObj = rootStoreObj.activityStore;\r\n    const { loadActivity, selectedActivity } = activityStoreObj;\r\n\r\n    useEffect(() => {\r\n        if (props.match.params.id && props.match.params.id.length > 0) {\r\n            const load = async () => {\r\n                await loadActivity(props.match.params.id);\r\n            };\r\n            load();\r\n        }\r\n    }, [loadActivity, props.match.params.id]);\r\n\r\n    if (activityStoreObj.isLoadingActivity)\r\n        return <ProgressBar message=\"Loading Activity\" />\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityDetailHeader activity={selectedActivity!} />\r\n                <ActivityDetailInfo activity={selectedActivity!} />\r\n                <ActivityDetailChat />\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <ActivityDetailSidebar attendees={selectedActivity?.attendees!} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n};\r\n\r\nexport default observer(ActivityDetails);","export interface IUserActivity {\r\n    activityId: string;\r\n    title: string;\r\n    description: string;\r\n    category: string;\r\n    date: Date;\r\n};\r\n\r\nexport interface IActivity {\r\n    id: string;\r\n    title: string;\r\n    description: string;\r\n    category: string;\r\n    date: Date;\r\n    city: string;\r\n    venue: string;\r\n    host: IAttendee | null;\r\n    isCurrentUserGoing: boolean;\r\n    isCurrentUserHost: boolean;\r\n    attendees: IAttendee[];\r\n    comments: IComment[];\r\n};\r\n\r\nexport interface IComment {\r\n    id: string;\r\n    body: string;\r\n    createdAt: Date;\r\n    userId: string;\r\n    userDisplayName: string;\r\n    userImage: string;\r\n}\r\n\r\nexport interface IAttendee {\r\n    appUserId: string,\r\n    displayName: string,\r\n    image: string,\r\n    isHost: boolean,\r\n    following?: boolean\r\n};\r\n\r\n//following \"extends Partial<IActivity>\" line will inherit all the properties from IActivity and make all them optional \r\nexport interface IActivityFormValues extends Partial<IActivity> {\r\n    time?: Date\r\n}\r\n\r\nexport class ActivityFormValues implements IActivityFormValues {\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    description: string = '';\r\n    category: string = '';\r\n    date?: Date = undefined;\r\n    time?: Date = undefined;\r\n    city: string = '';\r\n    venue: string = '';\r\n\r\n    constructor(value?: IActivityFormValues) {\r\n        Object.assign(this, value);\r\n        if (value && value.date)\r\n            this.time = value.date;\r\n    }\r\n}","//import moment from \"moment\";\r\n\r\nexport const combineDateAndTime = (date: Date, time: Date) => {\r\n    const year = date.getFullYear();\r\n    const month = date.getMonth() + 1;\r\n    const day = date.getDate();\r\n    const dateString = `${year}-${month}-${day}`;\r\n    const timeString = time.getHours() + ':' + time.getMinutes() + ':00';\r\n    const dt = new Date(dateString + ' ' + timeString);\r\n\r\n    //const dt2 = moment(`${dateString}${timeString}`, \"YYYY-MM-DDHH:mm:SS\").local();\r\n    return dt;\r\n    //return dt2;\r\n};\r\n\r\n//export const combineDateAndTime = (date: Date, time: Date) => {\r\n\r\n//    //const year = date.getFullYear();\r\n//    //const month = date.getMonth() + 1;\r\n//    //const day = date.getDate();\r\n//    //const dateString = date.toISOString().split('T')[0];\r\n//    //const timeString = time.toISOString().split(' ')[0];\r\n\r\n//    //const dtIso = new Date(dateString + 'T' + timeString + '.000Z');\r\n//    //return dtIso;\r\n//    //console.log(dateString + 'T' + timeString);\r\n\r\n//    //console.log(moment(date.toISOString()).format('YYYY-MM-DD') + 'T' + moment(time.toISOString()).format('HH:mm:SS') + '.000Z');\r\n\r\n//    //const dtLocal = new Date(moment(date).format('YYYY-MM-DD') + 'T' + moment(time.toISOString()).format('HH:mm:SS') + '.000Z');\r\n\r\n//    ////const dtLocal: Date = moment(dtIso).local().toDate();\r\n//    //console.log(dtLocal);\r\n//    //return dtLocal;\r\n//};","import React from 'react';\r\nimport { FieldRenderProps } from 'react-final-form';\r\nimport { FormFieldProps, Form, Label } from 'semantic-ui-react';\r\n\r\ninterface IProps extends FieldRenderProps<string, HTMLElement>, FormFieldProps { }\r\n\r\nconst TextInput: React.FC<IProps> = ({\r\n    input,\r\n    width,\r\n    type,\r\n    placeholder,\r\n    meta: { touched, error }\r\n}) => {\r\n    return (\r\n        <Form.Field error={touched && !!error} type={type} width={width}>\r\n            <input {...input} placeholder={placeholder} />\r\n            {touched && error && (\r\n                <Label basic color='red'>\r\n                    {error}\r\n                </Label>\r\n            )}\r\n        </Form.Field>\r\n    );\r\n};\r\n\r\nexport default TextInput;\r\n","import React from 'react';\r\nimport { FieldRenderProps } from 'react-final-form';\r\nimport { FormFieldProps, Form, Select, Label } from 'semantic-ui-react';\r\n\r\ninterface IProps extends FieldRenderProps<string, HTMLElement>, FormFieldProps { }\r\n\r\nconst SelectInput: React.FC<IProps> = ({\r\n    input,\r\n    options,\r\n    width,\r\n    placeholder,\r\n    meta: { touched, error } }) => {\r\n    return (\r\n        <Form.Field error={touched && !!error} width={width}>\r\n            <Select placeholder={placeholder}\r\n                value={input.value}\r\n                options={options}\r\n                onChange={(_event, data) => input.onChange(data.value)}>\r\n            </Select>\r\n            {touched && error && (\r\n                <Label basic color='red'>\r\n                    {error}\r\n                </Label>\r\n            )}\r\n        </Form.Field>\r\n    )\r\n};\r\n\r\nexport default SelectInput;","import React from 'react';\r\nimport { FieldRenderProps } from 'react-final-form';\r\nimport { FormFieldProps, Form, Label } from 'semantic-ui-react';\r\nimport { DateTimePicker } from 'react-widgets';\r\n\r\ninterface IProps extends FieldRenderProps<Date, HTMLElement>, FormFieldProps { }\r\n\r\nconst DateInput: React.FC<IProps> = ({\r\n    input,\r\n    width,\r\n    date = false,\r\n    time = false,\r\n    placeholder,\r\n    meta: { touched, error },\r\n    ...rest\r\n}) => {\r\n    return (\r\n        <Form.Field error={touched && !!error} width={width}>\r\n            <DateTimePicker\r\n                placeholder={placeholder}\r\n                value={input.value || undefined}\r\n                onChange={input.onChange}\r\n                onBlur={input.onBlur}\r\n                onKeyDown={(e) => e.preventDefault()}\r\n                date={date}\r\n                time={time}\r\n            />\r\n\r\n            {touched && error && (\r\n                <Label basic color='red'>\r\n                    {error}\r\n                </Label>\r\n            )}\r\n        </Form.Field>\r\n    );\r\n};\r\n\r\nexport default DateInput;","export const categoryOptions = [\r\n    { key: 'drinks', text: 'Drinks', value: 'drinks' },\r\n    { key: 'culture', text: 'Culture', value: 'culture' },\r\n    { key: 'film', text: 'Film', value: 'film' },\r\n    { key: 'food', text: 'Food', value: 'food' },\r\n    { key: 'music', text: 'Music', value: 'music' },\r\n    { key: 'travel', text: 'Travel', value: 'travel' }\r\n];","import React, { useState, useContext, useEffect } from 'react';\r\nimport { Form, Segment, Button, Grid } from 'semantic-ui-react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Form as FinalForm, Field } from 'react-final-form';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { combineValidators, isRequired, composeValidators, hasLengthGreaterThan } from 'revalidate';\r\n\r\nimport { rootStoreContext } from '../../../stores/rootStore';\r\nimport { ActivityFormValues } from '../../../models/IActivity';\r\nimport * as constants from '../../../utils/constants';\r\nimport * as util from '../../../utils/util';\r\nimport TextInput from '../../../common/elements/TextInput';\r\nimport TextAreaInput from '../../../common/elements/TextAreaInput';\r\nimport SelectInput from '../../../common/elements/SelectInput';\r\nimport DateInput from '../../../common/elements/DateInput';\r\nimport { categoryOptions } from '../../../common/options/categoryOptions';\r\nimport createBrowserHistory from '../../../utils/createBrowserHistory';\r\n\r\ninterface IRouteProp {\r\n    id: string;\r\n}\r\n\r\nconst validationRules = combineValidators({\r\n    title: isRequired({ message: 'The Event title is required' }),\r\n    description: composeValidators(\r\n        isRequired('Description'),\r\n        hasLengthGreaterThan(4)({ message: 'Description needs to be at least 5 characters' }),\r\n    )(),\r\n    category: isRequired({ message: 'The Event category is required' }),\r\n    date: isRequired('Date'),\r\n    time: isRequired('Time'),\r\n    city: isRequired('City'),\r\n    venue: isRequired('Venue')\r\n});\r\n\r\nconst ActivityForm: React.FC<RouteComponentProps<IRouteProp>> = (props) => {\r\n    const rootStoreObj = useContext(rootStoreContext);\r\n    const activityStoreObj = rootStoreObj.activityStore;\r\n    const { loadActivity } = activityStoreObj;\r\n    const [activity, setActivity] = useState(new ActivityFormValues());\r\n\r\n    useEffect(() => {\r\n        if (props.match.params.id) {\r\n            loadActivity(props.match.params.id)\r\n                .then((activity) => {\r\n                    setActivity(new ActivityFormValues(activity));\r\n                })\r\n        }\r\n    }, [loadActivity, props.match.params.id]);\r\n\r\n    const redirectToDetailPage = (id: string) => {\r\n        createBrowserHistory.push(`${constants.NAV_ACTIVITY_DETAIL}/${id}`);\r\n    }\r\n\r\n    const onCancelClickHandler = () => {\r\n        if (activity.id)\r\n            redirectToDetailPage(activity.id);\r\n        else\r\n            createBrowserHistory.push(constants.NAV_ACTIVITIES);\r\n    }\r\n\r\n    const onFinalFormSubmit = async (values: any) => {\r\n        const { date, time, ...activity } = values;\r\n        activity.date = util.combineDateAndTime(values.date!, values.time!);\r\n        if (activity.id) {\r\n            const isSuccess = await activityStoreObj.editActivity(activity);\r\n            if (isSuccess)\r\n                redirectToDetailPage(activity.id);\r\n        }\r\n        else {\r\n            const id = await activityStoreObj.createActivity(activity);\r\n            if (id && id !== '') {\r\n                activity.id = id;\r\n                redirectToDetailPage(id);\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <Segment clearing>\r\n                    <FinalForm onSubmit={onFinalFormSubmit}\r\n                        validate={validationRules}\r\n                        initialValues={activity}\r\n                        render={(props) => (\r\n                            <Form\r\n                                onSubmit={props.handleSubmit}\r\n                                loading={activityStoreObj.isLoadingActivity}>\r\n                                <Field\r\n                                    name='title'\r\n                                    placeholder='Title'\r\n                                    value={activity.title}\r\n                                    component={TextInput}\r\n                                />\r\n\r\n                                <Field\r\n                                    name=\"description\"\r\n                                    placeholder=\"Description\"\r\n                                    rows={3}\r\n                                    value={activity.description}\r\n                                    component={TextAreaInput}\r\n                                />\r\n\r\n                                <Field\r\n                                    name=\"category\"\r\n                                    placeholder=\"Category\"\r\n                                    value={activity.category}\r\n                                    component={SelectInput}\r\n                                    options={categoryOptions}\r\n                                />\r\n\r\n                                <Form.Group widths='equal'>\r\n                                    <Field component={DateInput}\r\n                                        name=\"date\"\r\n                                        placeholder=\"Date\"\r\n                                        date={true}\r\n                                        value={activity.date}\r\n                                    />\r\n\r\n                                    <Field component={DateInput}\r\n                                        name=\"time\"\r\n                                        placeholder=\"Time\"\r\n                                        time={true}\r\n                                        value={activity.time}\r\n                                    />\r\n                                </Form.Group>\r\n\r\n                                <Field\r\n                                    name=\"city\"\r\n                                    placeholder=\"City\"\r\n                                    value={activity.city}\r\n                                    component={TextInput}\r\n                                />\r\n\r\n                                <Field\r\n                                    name=\"venue\"\r\n                                    placeholder=\"Venue\"\r\n                                    value={activity.venue}\r\n                                    component={TextInput}\r\n                                />\r\n\r\n                                <Button\r\n                                    floated=\"right\"\r\n                                    type=\"Submit\"\r\n                                    loading={activityStoreObj.isSaving}\r\n                                    disabled={activityStoreObj.isLoadingActivity || props.invalid || props.pristine}\r\n                                    positive content=\"Submit\" />\r\n\r\n                                <Button\r\n                                    onClick={onCancelClickHandler}\r\n                                    floated=\"right\"\r\n                                    type=\"Button\"\r\n                                    disabled={activityStoreObj.isLoadingActivity}\r\n                                    content=\"Cancel\" />\r\n                            </Form>\r\n                        )}>\r\n                    </FinalForm>\r\n                </Segment>\r\n            </Grid.Column>\r\n        </Grid >\r\n    );\r\n};\r\n\r\nexport default observer(ActivityForm);","import React from 'react';\r\nimport { AxiosResponse } from 'axios';\r\nimport { Message } from 'semantic-ui-react';\r\n\r\ninterface IProps {\r\n    error: AxiosResponse,\r\n    text?: string\r\n};\r\n\r\nconst ErrorMessage: React.FC<IProps> = (props) => {\r\n    return (\r\n        <Message negative>\r\n            <Message.Header>{props.error.statusText}</Message.Header>\r\n\r\n            {props.error.data && Object.keys(props.error.data).length > 0 &&\r\n                (\r\n                    <Message.List>\r\n                        {Object.values(props.error.data.errors).flat().map((err: string, idx: number) => {\r\n                            return (<Message.Item key={idx}>{err}</Message.Item>);\r\n                        })}\r\n                    </Message.List>\r\n                )}\r\n\r\n            {props.text && (<Message.Content>{props.text}</Message.Content>)}\r\n        </Message>\r\n    );\r\n}\r\n\r\nexport default ErrorMessage;","import React, { Fragment, useContext, useEffect } from 'react';\r\nimport { Form, Button, Header } from 'semantic-ui-react';\r\nimport { Form as FinalForm, Field } from 'react-final-form';\r\nimport { combineValidators, isRequired } from 'revalidate';\r\nimport { FORM_ERROR } from 'final-form';\r\n\r\nimport { ILogin } from '../../../models/IUser';\r\nimport TextInput from '../../../common/elements/TextInput';\r\nimport { rootStoreContext } from '../../../stores/rootStore';\r\nimport createBrowserHistory from '../../../utils/createBrowserHistory';\r\nimport * as constants from '../../../utils/constants';\r\nimport ModelContainer, { modalSize } from '../../../common/modals/modalContainer';\r\nimport ErrorMessage from '../../../common/elements/ErrorMessage';\r\n\r\nconst LoginForm = () => {\r\n    const rootStoreObj = useContext(rootStoreContext);\r\n    const userStoreObj = rootStoreObj.userStore;\r\n\r\n    const validationRules = combineValidators({\r\n        userName: isRequired('User name'),\r\n        password: isRequired('Password')\r\n    });\r\n\r\n    const redirectToHomePage = () => {\r\n        createBrowserHistory.push(constants.NAV_HOME);\r\n    };\r\n\r\n    useEffect(() => {\r\n        // If user is already logged in, redirect user to home page.\r\n        if (userStoreObj.canAccessSecureResource) {\r\n            redirectToHomePage();\r\n        }\r\n    }, [userStoreObj.canAccessSecureResource]);\r\n\r\n    const onLoginHandler = async (values: ILogin) => {\r\n        try {\r\n            await userStoreObj.login(values);\r\n            createBrowserHistory.push(constants.NAV_ACTIVITIES);\r\n        } catch (err) {\r\n            //Return Form Error to React Final Form, It will populate the submitError prop\r\n            return { [FORM_ERROR]: err.statusText }\r\n        }\r\n    };\r\n\r\n    const getContent = () => {\r\n        return (<FinalForm\r\n            onSubmit={onLoginHandler}\r\n            validate={validationRules}\r\n            render={(props) => (\r\n                <Form>\r\n                    <Header\r\n                        as=\"h2\"\r\n                        content=\"Login to Social Network\"\r\n                        color=\"teal\"\r\n                        textAlign=\"center\" />\r\n\r\n                    <Field name=\"userName\"\r\n                        component={TextInput}\r\n                        placeholder='User Name' />\r\n\r\n                    <Field name=\"password\"\r\n                        type=\"Password\"\r\n                        component={TextInput}\r\n                        placeholder='Password' />\r\n\r\n                    {props.submitError && !props.dirtySinceLastSubmit &&\r\n                        (<ErrorMessage error={props.submitError} text='Invalid user name or password' />)\r\n                    }\r\n\r\n                    <Button\r\n                        loading={props.submitting}\r\n                        disabled={(props.invalid && !props.dirtySinceLastSubmit) || props.pristine}\r\n                        onClick={props.handleSubmit}\r\n                        content=\"Login\"\r\n                        color=\"teal\"\r\n                        fluid\r\n                    />\r\n                    {/*\r\n                                *<pre>{JSON.stringify(props.form.getState(), null, 2)} </pre> \r\n                            */}\r\n                </Form>\r\n            )}\r\n        />);\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <ModelContainer\r\n                defaultOpen={true}\r\n                content={getContent()}\r\n                onClose={redirectToHomePage}\r\n                size={modalSize.Tiny} />\r\n        </Fragment>\r\n    );\r\n\r\n};\r\n\r\nexport default LoginForm;","import { createValidator } from 'revalidate';\r\n\r\nexport const isValidEmail = createValidator(\r\n    message => value => {\r\n        if (value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\r\n            return message\r\n        }\r\n    },\r\n    'Invalid email address'\r\n)\r\n\r\nexport const isValidPassword = createValidator(\r\n    message => value => {\r\n        if (value && !/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[#$^+=!*()@%&]).{6,10}$$/g.test(value)) {\r\n            return message\r\n        }\r\n    },\r\n    'Password requires atleast 1 lower case letter, 1 capital letter, 1 digit, 1 special character' +\r\n        ' and the length should be between 6-10 characters.'\r\n)\r\n\r\nexport const isGreaterThan = (n: number) => createValidator(\r\n    message => value => {\r\n        if (value && Number(value) <= n) {\r\n            return message\r\n        }\r\n    },\r\n    field => `${field} must be greater than ${n}`\r\n)","import React, { useContext } from 'react';\r\nimport { Form, Button, Header } from 'semantic-ui-react';\r\nimport { Form as FinalForm, Field } from 'react-final-form';\r\nimport { combineValidators, isRequired, composeValidators, hasLengthGreaterThan, hasLengthLessThan } from 'revalidate';\r\nimport { FORM_ERROR } from 'final-form';\r\n\r\nimport { IRegister } from '../../../models/IUser';\r\nimport TextInput from '../../../common/elements/TextInput';\r\nimport { rootStoreContext } from '../../../stores/rootStore';\r\nimport createBrowserHistory from '../../../utils/createBrowserHistory';\r\nimport { isValidEmail, isValidPassword } from '../../../utils/customValidators';\r\nimport * as constants from '../../../utils/constants';\r\nimport ModelContainer, { modalSize } from '../../../common/modals/modalContainer';\r\nimport ErrorMessage from '../../../common/elements/ErrorMessage';\r\n\r\nconst RegisterForm = () => {\r\n    const rootStoreObj = useContext(rootStoreContext);\r\n    const userStoreObj = rootStoreObj.userStore;\r\n    const onClose = () => {\r\n        createBrowserHistory.push(constants.NAV_HOME);\r\n    };\r\n\r\n    const validationRules = combineValidators({\r\n        firstName: composeValidators(\r\n            isRequired('First name'),\r\n            hasLengthGreaterThan(1)({ message: 'First name must contain atleast 2 characters!' }),\r\n            hasLengthLessThan(25)({ message: 'First name must be 24 characters or less!' })\r\n        )(),\r\n        lastName: composeValidators(\r\n            isRequired('Last name'),\r\n            hasLengthGreaterThan(1)({ message: 'Last name must contain atleast 2 characters!' }),\r\n            hasLengthLessThan(25)({ message: 'Last name must be 24 characters or less!' })\r\n        )(),\r\n        email: composeValidators(\r\n            isRequired('Email'),\r\n            isValidEmail\r\n        )(),\r\n        userName: composeValidators(\r\n            isRequired('User name'),\r\n            hasLengthGreaterThan(5)({ message: 'User name must contain atleast 6 characters!' }),\r\n            hasLengthLessThan(25)({ message: 'User name must be 24 characters or less!' })\r\n        )(),\r\n        password: composeValidators(\r\n            isRequired('Password'),\r\n            hasLengthGreaterThan(5)({ message: 'Password must contain atleast 6 characters!' }),\r\n            hasLengthLessThan(11)({ message: 'Password must be 10 characters or less!' }),\r\n            isValidPassword\r\n        )()\r\n    });\r\n\r\n    const onRegisterHandler = async (values: IRegister) => {\r\n        try {\r\n            await userStoreObj.register(values);\r\n            createBrowserHistory.push(constants.NAV_HOME);\r\n        } catch (err) {\r\n            return { [FORM_ERROR]: err };\r\n        }\r\n    };\r\n\r\n    const getModalContent = () => {\r\n        return (\r\n            <FinalForm\r\n                onSubmit={onRegisterHandler}\r\n                validate={validationRules}\r\n                render={(props) => (\r\n                    <Form>\r\n                        <Header\r\n                            as=\"h2\"\r\n                            content=\"Register\"\r\n                            color=\"teal\"\r\n                            textAlign=\"center\" />\r\n\r\n                        <Field name=\"firstName\"\r\n                            component={TextInput}\r\n                            placeholder='First Name' />\r\n\r\n                        <Field name=\"lastName\"\r\n                            component={TextInput}\r\n                            placeholder='Last Name' />\r\n\r\n                        <Field name=\"email\"\r\n                            component={TextInput}\r\n                            placeholder='Email' />\r\n\r\n                        <Field name=\"userName\"\r\n                            component={TextInput}\r\n                            placeholder='User Name' />\r\n\r\n                        <Field name=\"password\"\r\n                            type=\"Password\"\r\n                            component={TextInput}\r\n                            placeholder='Password' />\r\n\r\n                        {props.submitError && !props.dirtySinceLastSubmit &&\r\n                            (<ErrorMessage error={props.submitError} />)\r\n                        }\r\n\r\n                        <Button\r\n                            loading={props.submitting}\r\n                            disabled={(props.invalid && !props.dirtySinceLastSubmit) || props.pristine}\r\n                            onClick={props.handleSubmit}\r\n                            content=\"Register\"\r\n                            color=\"teal\"\r\n                            fluid\r\n                        />\r\n                        {/*{<pre>{JSON.stringify(props.form.getState(), null, 2)}</pre>} */}\r\n                    </Form>\r\n                )}\r\n            />\r\n        );\r\n    };\r\n\r\n    return (\r\n        <ModelContainer\r\n            defaultOpen={true}\r\n            content={getModalContent()}\r\n            onClose={onClose}\r\n            size={modalSize.Tiny}\r\n        />\r\n    );\r\n};\r\n\r\nexport default RegisterForm;","import React, { useContext, Fragment, useState } from 'react';\r\nimport { Segment, Item, Header, Button, Grid, Statistic, Divider, Reveal } from 'semantic-ui-react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { rootStoreContext } from '../../../stores/rootStore';\r\n\r\nconst ProfileHeader = () => {\r\n    const rootStoreObj = useContext(rootStoreContext);\r\n    const [isUpdatingFollowFlag, setIsUpdatingFollowFlag] = useState(false);\r\n    const { userProfile, follow, unfollow, isViewingOwnProfile } = rootStoreObj.profileStore;\r\n\r\n    const onFollowClickHandler = async () => {\r\n        setIsUpdatingFollowFlag(true);\r\n        if (userProfile!.following)\r\n            await unfollow(userProfile!.appUserId);\r\n        else\r\n            await follow(userProfile!.appUserId);\r\n        setIsUpdatingFollowFlag(false);\r\n    };\r\n\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={userProfile?.mainPhoto?.url || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1'>{userProfile?.displayName}</Header>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group widths={2}>\r\n                        <Statistic label='Followers' value={userProfile?.followersCount} />\r\n                        <Statistic label='Following' value={userProfile?.followingCount} />\r\n                    </Statistic.Group>\r\n                    {\r\n                        userProfile && !isViewingOwnProfile ?\r\n                            (\r\n                                <Fragment>\r\n                                    <Divider />\r\n                                    <Reveal animated='move'>\r\n                                        <Fragment>\r\n                                            <Reveal.Content hidden>\r\n                                                <Button\r\n                                                    onClick={() => onFollowClickHandler()}\r\n                                                    content={userProfile!.following ? 'Unfollow' : 'Follow'}\r\n                                                    loading={isUpdatingFollowFlag}\r\n                                                    className={userProfile!.following ? 'negative' : 'positive'}\r\n                                                    fluid basic />\r\n                                            </Reveal.Content>)\r\n                                            <Reveal.Content visible style={{ width: '100%' }}>\r\n                                                <Button\r\n                                                    content={userProfile!.following ? 'Following' : 'Not following'}\r\n                                                    fluid color='teal' />\r\n                                            </Reveal.Content>\r\n                                        </Fragment>\r\n                                    </Reveal>\r\n                                </Fragment>\r\n                            ) : \"\"\r\n                    }\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    );\r\n};\r\n\r\nexport default observer(ProfileHeader);\r\n","import React, { useCallback } from 'react';\r\nimport { useDropzone } from 'react-dropzone';\r\nimport { Icon, Header } from 'semantic-ui-react';\r\n\r\nconst dropzoneStyles = {\r\n    border: 'dashed 3px',\r\n    borderColor: '#eee',\r\n    borderRadius: '5px',\r\n    paddingTop: '30px',\r\n    textAlign: 'center' as 'center',\r\n    height: '200px'\r\n};\r\n\r\nconst dropzoneActive = {\r\n    borderColor: 'teal'\r\n};\r\n\r\ninterface IProps {\r\n    setFiles: (files: object[]) => void;\r\n}\r\n\r\nconst PhotoDropzone: React.FC<IProps> = ({ setFiles }) => {\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        const files: object[] = acceptedFiles.map((file: object) => {\r\n            console.log(typeof file);\r\n            return {\r\n                file: file,\r\n                preview: URL.createObjectURL(file)\r\n            };\r\n        });\r\n        console.log(files);\r\n        setFiles(files);\r\n    }, [setFiles]);\r\n\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\r\n\r\n    return (\r\n        <div {...getRootProps()}\r\n            style={isDragActive ? { ...dropzoneStyles, ...dropzoneActive } : dropzoneStyles}>\r\n            <input {...getInputProps()} />\r\n            <Icon name='upload' size='huge' />\r\n            <Header content='Drop image here' />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PhotoDropzone;\r\n","import React, { useRef } from 'react';\r\n\r\nimport Cropper from 'react-cropper';\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\ninterface IProps {\r\n    setImage: (img: Blob) => void,\r\n    previewImage: string\r\n};\r\n\r\nconst PhotoCropper: React.FC<IProps> = (props) => {\r\n    const cropper = useRef<Cropper>(null);\r\n\r\n    const cropImage = () => {\r\n        if (cropper && cropper.current) {\r\n\r\n            if (typeof cropper.current.getCroppedCanvas() === 'undefined')\r\n                return;\r\n\r\n            cropper.current.getCroppedCanvas().toBlob((blob: any) => {\r\n                props.setImage(blob);\r\n            }, 'image/jpeg');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Cropper\r\n            ref={cropper}\r\n            src={props.previewImage}\r\n            style={{ height: 200, width: '100%' }}\r\n            // Cropper.js options\r\n            aspectRatio={1 / 1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            dragMode='move'\r\n            scalable={true}\r\n            cropBoxMovable={true}\r\n            cropBoxResizable={true}\r\n            crop={cropImage}\r\n        />\r\n    );\r\n};\r\n\r\nexport default PhotoCropper;","import React, { useState, useEffect, Fragment } from 'react';\r\nimport { Grid, Header, Button } from 'semantic-ui-react';\r\n\r\nimport PhotoDropzone from './PhotoDropzone';\r\nimport PhotoCropper from './PhotoCropper';\r\n\r\ninterface IProps {\r\n    uploadPhoto: (image: Blob) => Promise<any>;\r\n};\r\n\r\nconst PhotoUpload: React.FC<IProps> = ({ uploadPhoto }) => {\r\n    const [files, setFiles] = useState<any[]>([]);\r\n    const [image, setImage] = useState<Blob | null>(null);\r\n    const [isUploading, setIsUploading] = useState(false);\r\n\r\n    const onUploadClick = async () => {\r\n        setIsUploading(true);\r\n        await uploadPhoto(image!);\r\n        setIsUploading(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        //Cleanup Resource: ObjectURL was created for preview when file was uploaded, \r\n        //to avoid memory leak, releases an object URL\r\n        return () => {\r\n            files.forEach((file) => {\r\n                URL.revokeObjectURL(file.preview);\r\n            });\r\n        };\r\n    }, [files]);\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 1 - Add Photo' />\r\n                <PhotoDropzone setFiles={setFiles} />\r\n            </Grid.Column>\r\n            <Grid.Column width={1}>\r\n            </Grid.Column>\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 2 - Resize Image' />\r\n                {\r\n                    files && files.length > 0 &&\r\n                    <PhotoCropper setImage={setImage} previewImage={files[0].preview} />\r\n                }\r\n            </Grid.Column>\r\n            <Grid.Column width={1}>\r\n            </Grid.Column >\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 3 - Preview & Upload' />\r\n                {\r\n                    files && files.length > 0 &&\r\n                    (<Fragment>\r\n                        <div className='img-preview' style={{ minHeight: 200, overflow: 'hidden' }}> </div>\r\n                        <Button.Group widths={2}>\r\n                            <Button loading={isUploading} onClick={() => onUploadClick()} icon='check' positive/>\r\n                            <Button disabled={isUploading} onClick={() => setFiles([])} icon='close'/>\r\n                        </Button.Group>\r\n                    </Fragment>)\r\n                }\r\n            </Grid.Column>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default PhotoUpload;\r\n","import React, { useState, useContext } from 'react';\r\nimport { Tab, Header, Card, Image, Button, Grid } from 'semantic-ui-react';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nimport { rootStoreContext } from '../../../stores/rootStore';\r\nimport PhotoUpload from '../../../common/upload/PhotoUpload';\r\n\r\nconst ProfilePhoto = () => {\r\n    const rootStoreObj = useContext(rootStoreContext);\r\n    const { userProfile, isViewingOwnProfile, uploadPhoto, setMainPhoto, deletePhoto } = rootStoreObj.profileStore;\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [isSettingMainPhoto, setIsSettingMainPhoto] = useState(false);\r\n    const [isDeletingPhoto, setIsDeletingPhoto] = useState(false);\r\n    const [target, setTarget] = useState('');\r\n\r\n    //useEffect(() => {\r\n    //    setAddPhotoMode(profileStoreObj.isViewingOwnProfile);\r\n    //}, [profileStoreObj.isViewingOwnProfile]);\r\n\r\n    const onAddPhoto = () => {\r\n        setAddPhotoMode(!addPhotoMode);\r\n    };\r\n\r\n    const onPhotoUploadHandler = async (photo: Blob) => {\r\n        await uploadPhoto(photo);\r\n        setAddPhotoMode(false);\r\n    };\r\n\r\n    const onSetMainPhotoHandler = async (e: React.SyntheticEvent<HTMLButtonElement>, photoId: string) => {\r\n        setTarget(e.currentTarget.name)\r\n        setIsSettingMainPhoto(true);\r\n        await setMainPhoto(photoId);\r\n        setIsSettingMainPhoto(false);\r\n    };\r\n\r\n    const onDeletePhotoHandler = async (e: React.SyntheticEvent<HTMLButtonElement>, photoId: string) => {\r\n        setTarget(e.currentTarget.name)\r\n        setIsDeletingPhoto(true);\r\n        await deletePhoto(photoId);\r\n        setIsDeletingPhoto(false);\r\n    };\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16} style={{ paddingBottom: 0 }}>\r\n                    <Header floated='left' icon='image' content='Photos' />\r\n                    {\r\n                        isViewingOwnProfile &&\r\n                        <Button onClick={() => onAddPhoto()} floated='right'\r\n                            basic content={addPhotoMode ? 'Cancel' : 'Add Photo'} />\r\n                    }\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ?\r\n                        (<div><PhotoUpload uploadPhoto={onPhotoUploadHandler} /></div>) :\r\n                        (<Card.Group itemsPerRow={5}>\r\n                            {\r\n                                userProfile && userProfile.photos &&\r\n                                userProfile.photos.map(photo => {\r\n                                    return (\r\n                                        <Card key={photo.id}>\r\n                                            <Card.Content>\r\n                                                <Image src={photo.url} />\r\n                                            </Card.Content>\r\n                                            <Card.Content extra style={{ padding: 0 }}>\r\n                                                <Button.Group fluid widths={2}>\r\n                                                    <Button\r\n                                                        name={photo.id}\r\n                                                        onClick={(e) => onSetMainPhotoHandler(e, photo.id)}\r\n                                                        loading={isSettingMainPhoto && target === photo.id}\r\n                                                        disabled={userProfile.mainPhoto?.id === photo.id}\r\n                                                        basic positive content='Main' />\r\n\r\n                                                    <Button\r\n                                                        name={photo.id}\r\n                                                        onClick={(e) => onDeletePhotoHandler(e, photo.id)}\r\n                                                        loading={isDeletingPhoto && target === photo.id}\r\n                                                        disabled={userProfile.mainPhoto?.id === photo.id}\r\n                                                        basic negative icon='trash' />\r\n                                                </Button.Group>\r\n                                            </Card.Content>\r\n                                        </Card>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </Card.Group>)}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane >\r\n    );\r\n};\r\n\r\nexport default observer(ProfilePhoto);","import React, { useState } from 'react';\r\nimport { Form, Tab, Button } from 'semantic-ui-react';\r\nimport { Form as FinalForm, Field } from 'react-final-form';\r\nimport { FORM_ERROR } from 'final-form';\r\nimport { combineValidators, isRequired, composeValidators, hasLengthGreaterThan, hasLengthLessThan } from 'revalidate';\r\n//import { toJS } from 'mobx';\r\n\r\nimport { isValidEmail } from '../../../../utils/customValidators';\r\nimport TextInput from '../../../../common/elements/TextInput';\r\nimport TextAreaInput from '../../../../common/elements/TextAreaInput';\r\nimport { IProfile } from '../../../../models/IProfile';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\ninterface IProps {\r\n    updateProfile: (profile: IProfile) => Promise<void>,\r\n    userProfile: IProfile,\r\n    setEditMode: (value:boolean) => void\r\n};\r\n\r\nconst ProfileEditForm: React.FC<IProps> = ({ updateProfile, userProfile, setEditMode }) => {\r\n    const [isSaving, setIsSaving] = useState(false);\r\n\r\n    const onUpdateProfileHandler = async (profile: IProfile) => {\r\n        try {\r\n            setIsSaving(true);\r\n            await updateProfile(profile);\r\n            setEditMode(false);\r\n            setIsSaving(false);\r\n        } catch (err) {\r\n            return { [FORM_ERROR]: err };\r\n        }\r\n    };\r\n\r\n    const validationRules = combineValidators({\r\n        firstName: composeValidators(\r\n            isRequired('First name'),\r\n            hasLengthGreaterThan(1)({ message: 'First name must contain atleast 2 characters!' }),\r\n            hasLengthLessThan(25)({ message: 'First name must be 24 characters or less!' })\r\n        )(),\r\n        lastName: composeValidators(\r\n            isRequired('Last name'),\r\n            hasLengthGreaterThan(1)({ message: 'Last name must contain atleast 2 characters!' }),\r\n            hasLengthLessThan(25)({ message: 'Last name must be 24 characters or less!' })\r\n        )(),\r\n        email: composeValidators(\r\n            isRequired('Email'),\r\n            isValidEmail\r\n        )(),\r\n        bio: hasLengthLessThan(241)({ message: 'Bio must be 240 characters or less!' })\r\n    });\r\n\r\n    if (!userProfile)\r\n        return <Tab.Pane>Loading user profile data</Tab.Pane>\r\n\r\n    //console.log(toJS(userProfile));\r\n    return (\r\n        <FinalForm\r\n            onSubmit={onUpdateProfileHandler}\r\n            validate={validationRules}\r\n            initialValues={userProfile}\r\n            render={(props) => (\r\n                <Form onSubmit={props.handleSubmit}>\r\n                    <Field name=\"firstName\"\r\n                        component={TextInput}\r\n                        value={userProfile?.firstName}\r\n                        placeholder='First Name' />\r\n\r\n                    <Field name=\"lastName\"\r\n                        component={TextInput}\r\n                        value={userProfile?.lastName}\r\n                        placeholder='Last Name' />\r\n\r\n                    <Field name=\"email\"\r\n                        component={TextInput}\r\n                        value={userProfile?.email}\r\n                        placeholder='Email' />\r\n\r\n                    <Field name=\"bio\"\r\n                        component={TextAreaInput}\r\n                        value={userProfile?.bio}\r\n                        placeholder='bio' />\r\n\r\n                    <Button\r\n                        floated=\"right\"\r\n                        type=\"Submit\"\r\n                        loading={isSaving}\r\n                        disabled={props.invalid || props.pristine}\r\n                        positive content=\"Submit\" />\r\n                </Form>\r\n            )}\r\n        />\r\n    )\r\n};\r\n\r\nexport default observer(ProfileEditForm);","import React, { useContext, useState } from 'react';\r\nimport { Tab, Grid, Button, Header, Card, Icon } from 'semantic-ui-react';\r\n\r\nimport ProfileEditForm from './forms/ProfileEditForm';\r\nimport { rootStoreContext } from '../../../stores/rootStore';\r\n\r\nconst ProfileAbout = () => {\r\n    const rootStoreObj = useContext(rootStoreContext);\r\n    const { userProfile, isViewingOwnProfile, updateProfile } = rootStoreObj.profileStore;\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header\r\n                        floated='left'\r\n                        icon='user'\r\n                        content={`About ${userProfile?.displayName}`}\r\n                    />\r\n                    {isViewingOwnProfile && (\r\n                        <Button\r\n                            floated='right'\r\n                            basic\r\n                            content={editMode ? 'Cancel' : 'Edit Profile'}\r\n                            onClick={() => setEditMode(!editMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {editMode ? (\r\n                        <ProfileEditForm\r\n                            setEditMode={setEditMode}\r\n                            updateProfile={updateProfile}\r\n                            userProfile={userProfile!} />\r\n                    ) : (\r\n                            <Card fluid>\r\n                                <Card.Content>\r\n                                    <Card.Description>\r\n                                        {userProfile?.bio}\r\n                                    </Card.Description>\r\n                                </Card.Content>\r\n                                <Card.Content extra>\r\n                                    <Icon name='mail' />\r\n                                    {userProfile?.email}\r\n                                </Card.Content>\r\n                            </Card>\r\n                        )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n};\r\n\r\nexport default ProfileAbout;\r\n\r\n//<Container text>\r\n//    <Segment.Group>\r\n//        <Segment>First Name: {.firstName}</Segment>\r\n//        <Segment>Last Name: {userProfile?.lastName}</Segment>\r\n//        <Segment>Email: {userProfile?.email}</Segment>\r\n//        <Segment>Bio: {userProfile?.bio}</Segment>\r\n//    </Segment.Group>\r\n//</Container>","import React, { useEffect, useContext, useState } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Tab, Grid, Header, Card, Image, TabProps } from 'semantic-ui-react';\r\n\r\nimport { Link } from 'react-router-dom';\r\nimport moment from 'moment';\r\n\r\nimport { rootStoreContext } from '../../../stores/rootStore';\r\nimport { IUserActivity } from '../../../models/IActivity';\r\nimport * as constants from '../../../utils/constants';\r\n\r\nconst panes = [\r\n    { menuItem: 'Future Events', pane: { key: 'futureEvents' } },\r\n    { menuItem: 'Past Events', pane: { key: 'pastEvents' } },\r\n    { menuItem: 'Hosting', pane: { key: 'hosted' } }\r\n];\r\n\r\nconst ProfileEvents = () => {\r\n    const [loadingActivities, setLoadingActivities] = useState(false);\r\n    const rootStore = useContext(rootStoreContext);\r\n    const { loadUserActivities, userProfile, userActivities } = rootStore.profileStore;\r\n\r\n    useEffect(() => {\r\n        const load = async () => {\r\n            setLoadingActivities(true);\r\n            await loadUserActivities(userProfile!.appUserId, '');\r\n            setLoadingActivities(false);\r\n        };\r\n        load();\r\n    }, [loadUserActivities, userProfile]);\r\n\r\n    const handleTabChange = (_: React.MouseEvent<HTMLDivElement, MouseEvent>, data: TabProps) => {\r\n        setLoadingActivities(true);\r\n        let predicate;\r\n        switch (data.activeIndex) {\r\n            case 1:\r\n                predicate = 'past';\r\n                break;\r\n            case 2:\r\n                predicate = 'hosting';\r\n                break;\r\n            default:\r\n                predicate = 'future';\r\n                break;\r\n        }\r\n        loadUserActivities(userProfile!.appUserId, predicate)\r\n            .then(() => { setLoadingActivities(false)});\r\n    };\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='calendar' content={'Activities'} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab\r\n                        panes={panes}\r\n                        menu={{ secondary: true, pointing: true }}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                    />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {userActivities && userActivities.map((activity: IUserActivity) => (\r\n                            <Card\r\n                                as={Link}\r\n                                to={`${constants.NAV_ACTIVITIES}/${activity.activityId}`}\r\n                                key={activity.activityId}>\r\n                                <Image\r\n                                    src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                                    style={{ minHeight: 100, objectFit: 'cover' }}\r\n                                />\r\n                                <Card.Content>\r\n                                    <Card.Header textAlign='center'>{activity.title}</Card.Header>\r\n                                    <Card.Meta textAlign='center'>\r\n                                        <div>{moment(activity.date).format(\"MMM Do YYYY\")}</div>\r\n                                        <div>{moment(activity.date).format(\"h:mm A\")}</div>\r\n                                    </Card.Meta>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n};\r\n\r\nexport default observer(ProfileEvents);","import React from 'react';\r\nimport { Card, Image, Icon } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { IProfile } from '../../../models/IProfile';\r\nimport * as constants from '../../../utils/constants';\r\n\r\ninterface IProps {\r\n    profile: IProfile;\r\n    isFollowersTab: boolean;\r\n}\r\n\r\nconst ProfileCard: React.FC<IProps> = ({ profile, isFollowersTab }) => {\r\n    return (\r\n        <Card as={Link} to={`${constants.NAV_USER_PROFILE}/${profile.appUserId}`}>\r\n            <Image src={profile.mainPhoto?.url || '/assets/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <div>\r\n                    <Icon name='user' />\r\n                    {isFollowersTab ? `${profile.followersCount}` : `${profile.followingCount}`}\r\n                </div>\r\n            </Card.Content>\r\n        </Card>\r\n    )\r\n};\r\n\r\nexport default observer(ProfileCard);","import React, { useContext } from 'react';\r\nimport { Tab, Grid, Header, Card } from 'semantic-ui-react';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nimport { rootStoreContext } from '../../../stores/rootStore';\r\nimport ProfileCard from './ProfileCard';\r\n\r\nconst ProfileFollowing = () => {\r\n    const rootStore = useContext(rootStoreContext);\r\n    const { userProfile, isLoadingfollowers, followers, isUserViewingFollowersTab } = rootStore.profileStore;\r\n\r\n    return (\r\n        <Tab.Pane loading={isLoadingfollowers}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header\r\n                        floated='left'\r\n                        icon='user'\r\n                        content={\r\n                            isUserViewingFollowersTab\r\n                                ? `${userProfile!.displayName} is followed by below users`\r\n                                : `${userProfile!.displayName} is following below users.`\r\n                        }\r\n                    />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={5}>\r\n                        {\r\n                            followers && followers.length > 0 &&\r\n                            followers?.map((profile) => {\r\n                                return <ProfileCard\r\n                                    key={profile.appUserId}\r\n                                    profile={profile}\r\n                                    isFollowersTab={isUserViewingFollowersTab}\r\n                                />\r\n                            })\r\n                        }\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n}\r\n\r\nexport default observer(ProfileFollowing);","import React, { useContext } from 'react';\r\nimport { Tab, TabProps } from 'semantic-ui-react';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nimport ProfilePhoto from './ProfilePhoto';\r\nimport ProfileAbout from './ProfileAbout';\r\nimport ProfileEvents from './ProfileEvents';\r\nimport ProfileFollowing from './ProfileFollowing';\r\nimport { rootStoreContext } from '../../../stores/rootStore';\r\n\r\nconst panes = () => [\r\n    { menuItem: 'About', render: () => <ProfileAbout /> },\r\n    { menuItem: 'Photos', render: () => <ProfilePhoto /> },\r\n    { menuItem: 'Activities', render: () => <ProfileEvents /> },\r\n    { menuItem: 'Followers', render: () => <ProfileFollowing /> },\r\n    { menuItem: 'Following', render: () => <ProfileFollowing /> }\r\n];\r\n\r\nconst ProfileContent = () => {\r\n    const rootStoreObject = useContext(rootStoreContext);\r\n    return (\r\n        <Tab menu={{ fluid: true, vertical: true }}\r\n            menuPosition='right'\r\n            panes={panes()}\r\n            onTabChange={(_, data: TabProps) => rootStoreObject.profileStore.setActiveTab(data.activeIndex)}\r\n        />\r\n    );\r\n};\r\n\r\nexport default observer(ProfileContent);","import React, { useEffect, useContext, Fragment, useState } from 'react';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { rootStoreContext } from '../../../stores/rootStore';\r\n\r\nimport ProfileHeader from './ProfileHeader';\r\nimport ProfileContent from './ProfileContent';\r\nimport ProgressBar from '../../../layout/ProgressBar';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\ninterface iRouteProps {\r\n    appUserId: string\r\n};\r\n\r\ninterface iProps extends RouteComponentProps<iRouteProps> {\r\n};\r\n\r\nconst UserProfile: React.FC<iProps> = (props) => {\r\n    const rootStoreObj = useContext(rootStoreContext);\r\n    const { getUserProfile } = rootStoreObj.profileStore;\r\n    const [isLoadingProfile, setIsLoadingProfile] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const load = async () => {\r\n            setIsLoadingProfile(true);\r\n            await getUserProfile(props.match.params.appUserId);\r\n            setIsLoadingProfile(false);\r\n        }\r\n        load();\r\n    }, [getUserProfile, props.match.params.appUserId]);\r\n\r\n    //Profile Photo\r\n    if (isLoadingProfile)\r\n        return <ProgressBar message=\"Loading Profile\" />\r\n\r\n    return (\r\n        <Fragment>\r\n            <ProfileHeader />\r\n            <ProfileContent />\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default observer(UserProfile);","import React from 'react';\r\nimport { Segment, Button, Header, Icon } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport * as constants from '../utils/constants';\r\n\r\nconst NotFound: React.FC = () => {\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name=\"search\" />\r\n                Oops, We've found everywhere but we could not find this.\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to={constants.NAV_ACTIVITIES} primary >\r\n                    Return to Activity Page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    );\r\n};\r\n\r\nexport default NotFound;","import React, { useContext } from 'react';\r\nimport { RouteProps, RouteComponentProps, Route, Redirect } from 'react-router-dom';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\n\r\nimport { rootStoreContext } from '../stores/rootStore';\r\nimport * as constants from '../utils/constants';\r\n\r\ninterface IProps extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>>\r\n}\r\n\r\n// A wrapper for <Route> that redirects to the login\r\n// screen if you're not yet authenticated.\r\nconst SecureRoute: React.FC<IProps> = ({ component: Component, ...rest }) => {\r\n    const rootStoreObj = useContext(rootStoreContext);\r\n    const { canAccessSecureResource } = rootStoreObj.userStore;\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={(props) => canAccessSecureResource ? <Component {...props} /> : <Redirect to={constants.NAV_LOGIN} />}\r\n        />\r\n    );\r\n};\r\n\r\n\r\nexport default observer(SecureRoute);\r\n","import React, { useEffect, useContext } from 'react';\r\nimport { Container } from 'semantic-ui-react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Route, withRouter, RouteComponentProps, Switch } from 'react-router-dom';\r\nimport { ToastContainer } from 'react-toastify';\r\n\r\nimport NavBar from '../features/nav/NavBar';\r\nimport HomePage from '../features/home/HomePage';\r\nimport ActivityDashboard from '../features/activities/dashboard/ActivityDashboard';\r\nimport ActivityDetails from '../features/activities/details/ActivityDetails';\r\nimport ActivityForm from '../features/activities/forms/ActivityForm';\r\nimport LoginForm from '../features/user/forms/LoginForm';\r\nimport RegisterForm from '../features/user/forms/RegisterForm';\r\nimport UserProfile from '../features/user/profile/UserProfile';\r\nimport { rootStoreContext } from '../stores/rootStore';\r\nimport * as constants from '../utils/constants';\r\nimport NotFound from './NotFound';\r\nimport ProgressBar from './ProgressBar';\r\nimport SecureRoute from './SecureRoute';\r\n\r\nconst App: React.FC<RouteComponentProps> = ({ location }) => {\r\n    const rootStoreObj = useContext(rootStoreContext);\r\n    const commonStore = rootStoreObj.commonStore;\r\n    const { current } = rootStoreObj.userStore;\r\n\r\n    useEffect(() => {\r\n        if (commonStore.getToken()) {\r\n            const loadUser = async () => {\r\n                await current().finally(() => commonStore.setAppLoaded());\r\n            };\r\n            loadUser();\r\n        }\r\n        else\r\n            commonStore.setAppLoaded();\r\n    }, [current, commonStore]);\r\n\r\n    if (!commonStore.appLoaded) {\r\n        return <ProgressBar message=\"Loading Application...\" />\r\n    }\r\n\r\n    return (\r\n\r\n        <React.Fragment>\r\n            <ToastContainer position=\"bottom-right\" />\r\n\r\n            {/*Root URL.*/}\r\n            <Route path={constants.NAV_HOME} exact component={HomePage} />\r\n\r\n            <Route path={'/(.+)'} render={() => (\r\n                <React.Fragment>\r\n                    <NavBar />\r\n                    <Container style={{ marginTop: '7em' }}>\r\n                        <Switch>\r\n                            <SecureRoute path={constants.NAV_ACTIVITIES} exact component={ActivityDashboard} />\r\n                            <SecureRoute path={`${constants.NAV_ACTIVITY_DETAIL}/:id`} exact component={ActivityDetails} />\r\n\r\n                            {/*Key: To fully unmounted and remounted component on ID change.*/}\r\n                            <SecureRoute key={location.key} exact\r\n                                path={[constants.NAV_CREATE_ACTIVITY, `${constants.NAV_MANAGE_ACTIVITY}/:id`]}\r\n                                component={ActivityForm} />\r\n\r\n                            <SecureRoute path={`${constants.NAV_USER_PROFILE}/:appUserId`} component={UserProfile} />\r\n\r\n                            <Route path={constants.NAV_LOGIN} component={LoginForm} />\r\n                            <Route path={constants.NAV_REGISTER} component={RegisterForm} />\r\n                            <Route component={NotFound} />\r\n                        </Switch>\r\n                    </Container>\r\n                </React.Fragment>\r\n            )} />\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default withRouter(observer(App));","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Router } from 'react-router-dom';\r\n\r\nimport momentLocalizer from 'react-widgets-moment';\r\n\r\nimport 'mobx-react-lite/batchingForReactDom';\r\nimport 'react-toastify/dist/ReactToastify.min.css';\r\nimport 'react-widgets/dist/css/react-widgets.css';\r\n\r\nimport './layout/styles.css';\r\n\r\nimport ScrollToTop from './layout/ScrollToTop';\r\nimport createBrowserHistory from './utils/createBrowserHistory';\r\nimport App from './layout/App';\r\n\r\nmomentLocalizer();\r\n\r\nReactDOM.render(\r\n    <Router history={createBrowserHistory}>\r\n        <React.Fragment>\r\n            <ScrollToTop />\r\n            <App />\r\n        </React.Fragment>\r\n    </Router>,\r\n    document.querySelector(\"#root\"));\r\n"],"sourceRoot":""}