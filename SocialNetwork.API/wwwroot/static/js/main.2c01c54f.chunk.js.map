{"version":3,"sources":["layout/ScrollToTop.tsx","utils/createBrowserHistory.tsx","utils/constants.tsx","api/httpService.tsx","api/activityService.tsx","features/activities/util.tsx","stores/activityStore.tsx","stores/commonStore.tsx","api/userService.tsx","stores/userStore.tsx","api/profileService.tsx","api/photoService.tsx","stores/profileStore.tsx","stores/activityHubStore.tsx","stores/rootStore.tsx","common/modals/modalContainer.tsx","features/nav/NavBar.tsx","features/home/HomePage.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","layout/Spinner.tsx","features/activities/dashboard/ActivityFilter.tsx","features/activities/dashboard/ActivityListLoader.tsx","features/activities/dashboard/ActivityDashboard.tsx","layout/ProgressBar.tsx","common/elements/TextAreaInput.tsx","features/activities/details/ActivityDetailChat.tsx","features/activities/details/ActivityDetailHeader.tsx","features/activities/details/ActivityDetailInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","models/IActivity.tsx","utils/util.tsx","common/elements/TextInput.tsx","common/elements/SelectInput.tsx","common/elements/DateInput.tsx","common/options/categoryOptions.tsx","features/activities/forms/ActivityForm.tsx","common/elements/ErrorMessage.tsx","features/user/forms/LoginForm.tsx","utils/customValidators.tsx","features/user/forms/RegisterForm.tsx","features/profile/ProfileHeader.tsx","common/upload/PhotoDropzone.tsx","common/upload/PhotoCropper.tsx","common/upload/PhotoUpload.tsx","features/profile/ProfilePhoto.tsx","features/profile/forms/ProfileEditForm.tsx","features/profile/ProfileAbout.tsx","features/profile/ProfileEvents.tsx","features/profile/ProfileCard.tsx","features/profile/ProfileFollowing.tsx","features/profile/ProfileContent.tsx","features/profile/UserProfile.tsx","layout/NotFound.tsx","layout/SecureRoute.tsx","layout/App.tsx","index.tsx"],"names":["ScrollToTop","pathname","useLocation","useEffect","window","scrollTo","createBrowserHistory","BASE_SERVICE_URL","process","FACEBOOK_APP_ID","axiosInstance","axios","create","baseURL","constants","withCredentials","timeout","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","error","Promise","reject","response","a","message","toast","originalRequest","data","status","method","errors","hasOwnProperty","push","url","endsWith","removeItem","_refreshAttempt","refreshToken","getRefreshToken","user","post","then","res","setItem","defaults","common","processResponse","dbResponse","httpService","get","qsParams","params","body","put","delete","postForm","formData","activityService","list","details","id","activity","update","attend","unattend","getComments","createAttendee","isHost","appUserId","displayName","image","removeAttendee","attendees","length","filter","attendee","activityStore","rootStore","getActivity","activityRegistry","getQSParams","URLSearchParams","append","currentPageNumber","toString","predicate","forEach","value","key","toISOString","groupActivitiesByDate","sortedArray","Object","entries","reduce","accumulator","currentValue","date","moment","format","getCurrentUser","userStore","getCurrentUserInstance","this","reaction","keys","clear","loadActivities","Math","ceil","totalActivitiesCount","Array","from","values","sort","b","getTime","observable","Map","action","selectedActivity","showForm","isLoadingActivity","isSaving","isDeleting","isLoadingActivities","Date","isCurrentUserGoing","some","isUserGoing","isCurrentUserHost","isUserHost","host","hosts","getHost","set","setIsLoadingActivities","count","activities","registerActivity","setTotalActivityCount","console","setSelectedActivity","setIsLoadingActivity","setIsSaving","runInAction","setShowFormFlag","setIsDeleting","comments","comment","activityId","activityHubStore","sendComment","pageNumber","computed","commonStore","getOrRefreshToken","getToken","decodedToken","jwt","decode","exp","now","appLoaded","userService","current","login","command","register","toJS","mainPhoto","isUserLoggedIn","setToken","setRefreshToken","setUser","log","profileService","userActivities","qsParam","followers","userId","followings","profile","follow","unfollow","photoService","upload","file","FormData","setMain","photoId","profileStore","activeTabIndex","index","loadFollowers","userProfile","undefined","userName","username","tabIndex","setUserProfile","photo","photos","p","setMainPhoto","aboutProfile","setDisplayName","followersCount","following","isUserViewingFollowersTab","u","isLoadingfollowers","setUserActivities","ref","hubConnection","HubConnectionBuilder","withUrl","accessTokenFactory","configureLogging","LogLevel","Information","build","start","state","invoke","catch","on","onReceivingCommentFromServer","dismiss","info","stop","configure","enforceActions","modalSize","rootStoreContext","createContext","observer","useContext","Menu","fixed","inverted","Container","Item","header","as","NavLink","to","exact","src","alt","name","Button","content","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","logout","rootStoreObject","userStoreObj","commonStoreObj","Segment","textAlign","vertical","className","Header","size","style","marginBottom","styles","borderColor","borderWidth","ActivityListItemAttendee","List","horizontal","map","path","Popup","trigger","circular","bordered","ActivityListItem","Group","Content","title","Description","Label","basic","color","Icon","venue","city","secondary","clearing","description","floated","activityStoreObj","activityByDate","group","divided","item","Spinner","loading","Loader","active","inline","setPredicate","width","marginTop","attached","has","onChange","ActivityListLoader","Placeholder","fluid","minHeight","Line","Paragraph","disabled","setPageNumber","totalPages","fetch","loadNextHandler","Grid","Column","pageStart","loadMore","hasMore","initialLoad","ProgressBar","Dimmer","TextAreaInput","input","rows","placeholder","meta","touched","Form","Field","addComment","createHubConnection","stopHubConnection","useState","isLoadingComments","setIsLoadingComments","load","border","Comment","Avatar","userImage","Author","userDisplayName","Metadata","createdAt","Text","onSubmit","render","handleSubmit","submitting","pristine","form","reset","component","labelPosition","primary","activityImageStyle","activityImageTextStyle","bottom","left","height","setLoading","attendActivity","unAttendActivity","padding","category","ActivityDetailInfo","verticalAlign","relaxed","ribbon","Extra","props","loadActivity","match","ActivityFormValues","time","assign","combineDateAndTime","year","getFullYear","month","getMonth","day","getDate","dateString","timeString","getHours","getMinutes","TextInput","type","SelectInput","options","Select","_event","DateInput","onBlur","onKeyDown","e","preventDefault","categoryOptions","validationRules","combineValidators","isRequired","composeValidators","hasLengthGreaterThan","setActivity","redirectToDetailPage","onCancelClickHandler","onFinalFormSubmit","util","editActivity","createActivity","validate","initialValues","widths","invalid","ModelContainer","settings","actions","closeIcon","closeOnDocumentClick","closeOnDimmerClick","closeOnEscape","open","Large","defaultOpen","onClose","onOpen","onActionClick","Modal","event","Actions","ErrorMessage","Message","negative","statusText","flat","err","idx","LoginForm","password","redirectToHomePage","canAccessSecureResource","onLoginHandler","FORM_ERROR","submitError","dirtySinceLastSubmit","Tiny","isValidEmail","createValidator","test","isValidPassword","RegisterForm","firstName","hasLengthLessThan","lastName","email","onRegisterHandler","rootStoreObj","isUpdatingFollowFlag","setIsUpdatingFollowFlag","isViewingOwnProfile","onFollowClickHandler","Statistic","label","followingCount","Divider","Reveal","animated","hidden","visible","dropzoneStyles","borderRadius","paddingTop","dropzoneActive","PhotoDropzone","setFiles","onDrop","useCallback","acceptedFiles","files","preview","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoCropper","cropper","useRef","previewImage","aspectRatio","guides","viewMode","dragMode","scalable","cropBoxMovable","cropBoxResizable","crop","getCroppedCanvas","toBlob","blob","setImage","PhotoUpload","uploadPhoto","isUploading","setIsUploading","onUploadClick","revokeObjectURL","sub","overflow","deletePhoto","addPhotoMode","setAddPhotoMode","isSettingMainPhoto","setIsSettingMainPhoto","isDeletingPhoto","setIsDeletingPhoto","target","setTarget","onPhotoUploadHandler","onSetMainPhotoHandler","currentTarget","onDeletePhotoHandler","Tab","Pane","paddingBottom","Card","itemsPerRow","extra","updateProfile","setEditMode","onUpdateProfileHandler","bio","ProfileAbout","editMode","panes","menuItem","pane","loadingActivities","setLoadingActivities","loadUserActivities","menu","onTabChange","_","activeIndex","handleTabChange","objectFit","Meta","isFollowersTab","menuPosition","setActiveTab","getUserProfile","isLoadingProfile","setIsLoadingProfile","NotFound","Inline","Component","rest","withRouter","location","setAppLoaded","finally","loadUser","Fragment","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","UserProfile","momentLocalizer","ReactDOM","history","document","querySelector"],"mappings":"6hBAGe,SAASA,IAAe,IAC3BC,EAAaC,cAAbD,SAMR,OAJAE,qBAAU,WACNC,OAAOC,SAAS,EAAG,KACpB,CAACJ,IAEG,K,YCTIK,gB,6FCDFC,GAAmBC,O,GACDA,6IAAYC,gB,2FCOrCC,EAAgBC,IAAMC,OAAO,CAC/BC,QAAQ,GAAD,OAAKC,EAAL,SACPC,iBAAiB,EACjBC,QAAS,MAGbN,EAAcO,aAAaC,QAAQC,KAAI,SAACC,GAEpC,IAAMC,EAAuBjB,OAAOkB,aAAaC,QDDtB,gBCK3B,OAHIF,IACAD,EAAOI,QAAQC,cAAf,iBAAyCJ,IAEtCD,KACR,SAAAM,GACC,OAAOC,QAAQC,OAAOF,MAG1BhB,EAAcO,aAAaY,SAASV,KAAI,SAACU,GAAD,OAAcA,IAAtD,+BAAAC,EAAA,MAAgE,WAAOJ,GAAP,6BAAAI,EAAA,yDACtC,kBAAlBJ,EAAMK,SAAgCL,EAAMG,SADY,uBAExDG,IAAMN,MAAM,2EAF4C,6BAKtDO,EAAkBP,EAAMN,OAL8B,EAM3BM,EAAMG,SAA/BT,EANoD,EAMpDA,OAAQc,EAN4C,EAM5CA,KACD,OADOC,EANsC,EAMtCA,QANsC,gBAQlC,QAAlBf,EAAOgB,QAAoBF,EAAKG,OAAOC,eAAe,MACtDhC,EAAqBiC,KDtBJ,aCyBjBP,IAAMN,MAAM,kCAZwC,0BAexC,MAAXS,EAfmD,qBAgBpDF,EAAgBO,IAAIC,SAAS,WAhBuB,wBAiBpDrC,OAAOkB,aAAaoB,WD3BD,gBC4BnBtC,OAAOkB,aAAaoB,WD3BO,wBC4B3BpC,EAAqBiC,KDvCR,UCwCbP,IAAMN,MAAM,gDApBwC,kBAqB7CC,QAAQC,OAAOF,IArB8B,WAuB9CO,EAAgBU,gBAvB8B,wBAwBpDV,EAAgBU,iBAAkB,EAC5BtB,EAAQjB,OAAOkB,aAAaC,QDnCf,gBCoCbqB,EAAexC,OAAOkB,aAAaC,QDnCd,wBCSyB,UA2B1BsB,GAAgBxB,EAAOuB,GA3BG,eA2B9CE,EA3B8C,OA4BpDb,EAAgBT,QAAhB,+BAAqDsB,EAAKzB,OA5BN,kBA6B7CV,IAAMsB,IA7BuC,gCAgCxC,MAAXE,EACL7B,EAAqBiC,KD9CA,aCgDL,MAAXJ,GACLH,IAAMN,MAAM,sDApC4C,cAsCtDA,EAAMG,SAtCgD,4CAAhE,uDAyCO,I,iLAAMgB,GAAkB,SAACxB,EAAsBuB,GAClD,OAAOjC,IAAMoC,KAAN,UAAcjC,EAAd,qBAA6D,CAChEO,MAAOA,EACPuB,aAAcA,IACfI,MAAK,SAAAC,GAIJ,OAHA7C,OAAOkB,aAAa4B,QDxDG,eCwDgCD,EAAIf,KAAKb,OAChEjB,OAAOkB,aAAa4B,QDxDW,uBCwDgCD,EAAIf,KAAKU,cACxEjC,IAAMwC,SAAS3B,QAAQ4B,OAAvB,+BAA2DH,EAAIf,KAAKb,OAC7D4B,EAAIf,SAIbmB,GAAkB,SAACC,GACrB,OAAOA,EAAWpB,MAoCPqB,GA7BK,CAChBC,IAAI,WAAD,4BAAE,WAAOhB,EAAaiB,GAApB,eAAA3B,EAAA,sEACuCpB,EAAc8C,IAAIhB,EAAK,CAAEkB,OAAQD,IADxE,cACKH,EADL,yBAGMD,GAAgBC,IAHtB,2CAAF,qDAAC,GAKJP,KAAK,WAAD,4BAAE,WAAOP,EAAamB,GAApB,eAAA7B,EAAA,sEACsCpB,EAAcqC,KAAKP,EAAKmB,GAD9D,cACIL,EADJ,yBAGKD,GAAgBC,IAHrB,2CAAF,qDAAC,GAKLM,IAAI,WAAD,4BAAE,WAAOpB,EAAamB,GAApB,eAAA7B,EAAA,sEACuCpB,EAAckD,IAAIpB,EAAKmB,GAD9D,cACKL,EADL,yBAGMD,GAAgBC,IAHtB,2CAAF,qDAAC,GAKJO,OAAO,WAAD,4BAAE,WAAOrB,GAAP,eAAAV,EAAA,sEACoCpB,EAAcmD,OAAOrB,GADzD,cACEc,EADF,yBAGGD,GAAgBC,IAHnB,2CAAF,mDAAC,GAKPQ,SAAS,WAAD,4BAAE,WAAOtB,EAAauB,GAApB,eAAAjC,EAAA,sEACkCpB,EAAcqC,KAAKP,EAAKuB,EAAU,CACtEvC,QAAS,CAAE,eAAgB,yBAFzB,cACA8B,EADA,yBAICD,GAAgBC,IAJjB,2CAAF,qDAAC,IC1EEU,GA5BS,CACpBC,KAAM,SAACR,GACH,OAAOF,GAAYC,IAAZ,cAA+BC,IAE1CS,QAAS,SAACC,GACN,OAAOZ,GAAYC,IAAZ,sBAA+BW,KAE1CvD,OAAQ,SAACwD,GAEL,OAAOb,GAAYR,KAAK,cAAeqB,IAE3CC,OAAQ,SAACD,GACL,OAAOb,GAAYK,IAAZ,sBAA+BQ,EAASD,IAAMC,IAEzDP,OAAQ,SAACM,GACL,OAAOZ,GAAYM,OAAZ,sBAAkCM,KAE7CG,OAAQ,SAACH,GACL,OAAOZ,GAAYR,KAAZ,sBAAgCoB,EAAhC,WAA6C,KAExDI,SAAU,SAACJ,GACP,OAAOZ,GAAYR,KAAZ,sBAAgCoB,EAAhC,aAA+C,KAE1DK,YAAa,SAACL,GACV,OAAOZ,GAAYC,IAAZ,sBAA+BW,EAA/B,gBCOFM,GAAiB,SAAC3B,EAAa4B,GACxC,MAAO,CACHC,UAAW7B,EAAK6B,UAChBC,YAAa9B,EAAK8B,YAClBC,MAAO/B,EAAK+B,MACZH,OAAQA,IAIHI,GAAiB,SAACV,EAAqBtB,GAChD,OAAgB,MAAZsB,GAAoBA,EAASW,UAAUC,OAAS,EACzCZ,EAASW,UAAUE,QAAO,SAACC,GAAD,OAAcA,EAASP,YAAc7B,EAAK6B,aAExE,ICtCUQ,I,aAGjB,WAAYC,GAAuB,IAAD,gCAFlCA,eAEkC,2aAuBlCC,YAAc,SAAClB,GACX,OAAO,EAAKmB,iBAAiB9B,IAAIW,IAxBH,q2BAgOlCoB,YAAc,WACV,IAAM7B,EAAS,IAAI8B,gBAUnB,OATA9B,EAAO+B,OAAO,UAtOI,EAsOO,EAAKC,mBAA+BC,YAC7DjC,EAAO+B,OAAO,QAvOI,GAuOeE,YAEjC,EAAKC,UAAUC,SAAQ,SAACC,EAAOC,GJpNH,cIqNpBA,EACArC,EAAO+B,OAAOM,EAAMD,EAAeE,eAEnCtC,EAAO+B,OAAOM,EAAKD,EAAMH,eAE1BjC,GA3OuB,KAgQlCuC,sBAAwB,SAACC,GAErB,OAAOC,OAAOC,QAAQF,EAAYG,QAAO,SAACC,EAAaC,GACnD,IAAMC,EAAOC,IAAOF,EAAaC,MAAME,OAAO,cAE9C,OADAJ,EAAYE,GAAQF,EAAYE,GAAZ,sBAAwBF,EAAYE,IAApC,CAA2CD,IAAgB,CAACA,GACzED,IAJ0C,MAjQvB,KAyQlCK,eAAiB,WACb,OAAO,EAAKvB,UAAUwB,UAAUC,0BAzQhCC,KAAK1B,UAAYA,EAEjB2B,oBAAS,kBAAM,EAAKnB,UAAUoB,UAAQ,WAClC,EAAKtB,kBAAoB,EACzB,EAAKJ,iBAAiB2B,QACtB,EAAKC,oB,uDAyOT,OAAOC,KAAKC,KAAKN,KAAKO,qBAnPJ,K,qCAuPlB,IAAMnB,EAAcoB,MAAMC,KAAKT,KAAKxB,iBAAiBkC,UAAUC,MAC3D,SAAC3F,EAAG4F,GACA,OAAI5F,EAAE0E,MAAQkB,EAAElB,KACL1E,EAAE0E,KAAKmB,UAAYD,EAAElB,KAAKmB,UAE5B7F,EACE,EACJ,KAGf,OAAOgF,KAAKb,sBAAsBC,O,mDAnPrC0B,c,yEAA8B,IAAIC,O,8CAClCD,c,yEAAgD,Q,+CAChDA,c,yEAA+B,K,iDAC/BA,c,yEAAiC,K,sCACjCA,c,yEAAsB,K,sCACtBA,c,yEAAsB,K,wCACtBA,c,yEAAwB,K,kDAGxBA,c,yEAAkC,K,+CAClCA,c,yEAA+B,K,uCAC/BA,c,yEAAuB,IAAIC,O,iDAM3BC,U,oFAA6B,SAAC1D,GAC3B,EAAK2D,iBAAmB3D,M,6CAG3B0D,U,oFAAyB,SAAChC,GACvB,EAAKkC,SAAWlC,M,kDAGnBgC,U,oFAA8B,SAAChC,GAC5B,EAAKmC,kBAAoBnC,M,yCAG5BgC,U,oFAAqB,SAAChC,GACnB,EAAKoC,SAAWpC,M,2CAGnBgC,U,oFAAuB,SAAChC,GACrB,EAAKqC,WAAarC,M,oDAGrBgC,U,oFAAgC,SAAChC,GAC9B,EAAKsC,oBAAqBtC,M,8CAG7BgC,U,oFAA0B,SAAC1D,GACxBA,EAASoC,KAAO,IAAI6B,KAAKjE,EAASoC,MAClC,IAAM1D,EAAO,EAAK6D,iBACd7D,IACAsB,EAASkE,mBDzDM,SAAClE,EAAqBtB,GAC7C,SAAgB,MAAZsB,GAAoBA,EAASW,UAAUC,OAAS,GAAKlC,IAC9CsB,EAASW,UAAUwD,MAAK,SAACrD,GAAD,OAAcA,EAASP,YAAc7B,EAAK6B,aCuDvC6D,CAAYpE,EAAUtB,GACpDsB,EAASqE,kBDnDK,SAACrE,EAAqBtB,GAC5C,SAAgB,MAAZsB,GAAoBA,EAASW,UAAUC,OAAS,GAAKlC,IAC9CsB,EAASW,UAAUwD,MAAK,SAACrD,GAAD,OAAcA,EAASP,YAAc7B,EAAK6B,YAAiC,IAApBO,EAASR,UCiD9DgE,CAAWtE,EAAUtB,GAClDsB,EAASuE,KD7CE,SAACvE,GACpB,GAAgB,MAAZA,GAAoBA,EAASW,UAAUC,OAAS,EAAG,CACnD,IAAM4D,EAAQxE,EAASW,UAAUE,QAAO,SAACC,GAAD,OAAkC,IAApBA,EAASR,UAC/D,GAAIkE,EAAM5D,OAAS,EACf,OAAO4D,EAAM,GAGrB,OAAO,KCsCiBC,CAAQzE,IAE5B,EAAKkB,iBAAiBwD,IAAI1E,EAASD,GAAIC,O,6CAG1C0D,U,0GAAwB,gCAAAhG,EAAA,sEAEjB,EAAKiH,wBAAuB,GAFX,SAGmB/E,GAAgBC,KAAK,EAAKsB,eAH7C,gBAGTyD,EAHS,EAGTA,OAAOC,EAHE,EAGFA,aAEXA,EAAWpD,SAAQ,SAACzB,GAChB,EAAK8E,iBAAiB9E,MAG9B,EAAK+E,sBAAsBH,GAC3B,EAAKD,wBAAuB,GAVX,kDAYjBK,QAAQ1H,MAAR,MAZiB,6D,2CAgBxBoG,U,2HAAsB,WAAO3D,GAAP,eAAArC,EAAA,yDACdqC,KAAOA,GAAoB,IAAdA,EAAGa,QADF,sDAIfZ,EAAkC,EAAKiB,YAAYlB,IAJpC,uBAMf,EAAKkF,oBAAoBjF,GANV,kBAORA,GAPQ,cAUnB,EAAKkF,sBAAqB,GAVP,mBAYEtF,GAAgBE,QAAQC,GAZ1B,eAYfC,EAZe,OAaf,EAAK8E,iBAAiB9E,GACtB,EAAKiF,oBAAoBjF,GACzB,EAAKkF,sBAAqB,GAfX,kBAgBRlF,GAhBQ,kCAkBfgF,QAAQ1H,MAAR,MACA,EAAK4H,sBAAqB,GAnBX,0D,sGAuBtBxB,U,2HAAwB,WAAO1D,GAAP,SAAAtC,EAAA,6DACrB,EAAKyH,aAAY,GADI,kBAIGvF,GAAgBpD,OAAOwD,GAJ1B,cAIjBA,EAASD,GAJQ,OAKjBqF,uBAAY,WACRpF,EAASW,UAAYX,EAASW,WAAa,GAC3CX,EAASW,UAAUxC,KAAKkC,GAAe,EAAKkC,kBAAmB,OAEnE,EAAKuC,iBAAiB9E,GACtB,EAAKmF,aAAY,GACjB,EAAKE,iBAAgB,GAXJ,kBAYVrF,EAASD,IAZC,kCAcjBiF,QAAQ1H,MAAR,MACA,EAAK6H,aAAY,GACjB,EAAKE,iBAAgB,GAhBJ,iCAkBd,IAlBc,0D,oGAqBxB3B,U,2HAAsB,WAAO1D,GAAP,SAAAtC,EAAA,6DACnB,EAAKyH,aAAY,GADE,kBAGTvF,GAAgBK,OAAOD,GAHd,cAIf,EAAK8E,iBAAiB9E,GACtB,EAAKmF,aAAY,GACjB,EAAKE,iBAAgB,GANN,mBAOR,GAPQ,kCASfL,QAAQ1H,MAAR,MACA,EAAK6H,aAAY,GACjB,EAAKE,iBAAgB,GAXN,kCAaZ,GAbY,0D,sGAgBtB3B,U,2HAAwB,WAAO3D,GAAP,SAAArC,EAAA,6DACrB,EAAK4H,eAAc,GADE,kBAGX1F,GAAgBH,OAAOM,GAHZ,OAIjBqF,uBAAY,WACR,EAAKlE,iBAAiBzB,OAAOM,MAEjC,EAAKuF,eAAc,GACnB,EAAKD,iBAAgB,GARJ,gDAUjBL,QAAQ1H,MAAR,MACA,EAAKgI,eAAc,GACnB,EAAKD,iBAAgB,GAZJ,yD,8FAgBxB3B,U,2HAAgB,WAAO1D,GAAP,SAAAtC,EAAA,+EAEHkC,GAAgBM,OAAOF,EAASD,IAF7B,OAGTqF,uBAAY,WACRpF,EAASW,UAAYX,EAASW,WAAa,GAC3CX,EAASW,UAAUxC,KAAKkC,GAAe,EAAKkC,kBAAmB,OAEnE,EAAKuC,iBAAiB9E,GAPb,gDASTgF,QAAQ1H,MAAR,MACAM,IAAMN,MAAM,0DAVH,yD,gGAchBoG,U,2HAAkB,WAAO1D,GAAP,SAAAtC,EAAA,+EAELkC,GAAgBO,SAASH,EAASD,IAF7B,OAGXqF,uBAAY,WACRpF,EAASW,UAAYD,GAAeV,EAAU,EAAKuC,qBAEvD,EAAKuC,iBAAiB9E,GANX,gDAQXgF,QAAQ1H,MAAR,MACAM,IAAMN,MAAM,0DATD,yD,mGAalBoG,U,0GAAqB,4BAAAhG,EAAA,mEAEV,EAAKiG,mBAAoB,EAAKA,iBAAiB4B,SAFrC,iEAKS3F,GAAgBQ,YAAY,EAAKuD,iBAAkB5D,IAL5D,OAKRwF,EALQ,OAMdH,uBAAY,WACJ,EAAKzB,mBACL,EAAKA,iBAAiB4B,SAAWA,GAAY,OARvC,gDAWdP,QAAQ1H,MAAR,MACAM,IAAMN,MAAM,sDAZE,4D,yCAgBrBoG,U,2HAAoB,WAAO8B,GAAP,SAAA9H,EAAA,6DACjB8H,EAAQC,WAAa,EAAK9B,iBAAkB5D,GAD3B,kBAGP,EAAKiB,UAAU0E,iBAAiBC,YAAYH,GAHrC,sDAKbR,QAAQ1H,MAAR,MALa,wD,oHASpBoG,U,oFAAsC,SAAC8B,GAAuB,IAAD,EAC1D,YAAK7B,wBAAL,SAAuB4B,SAASpH,KAAKqH,O,oDAGxC9B,U,oFAA+B,SAACkB,GAC7B,EAAK3B,qBAAuB2B,M,4CAG/BlB,U,oFAAuB,SAACkC,GACrB,EAAKtE,kBAAoBsE,M,2CAG5BlC,U,oFAAsB,SAAC/B,EAAaD,GACjC,EAAKF,UAAUqB,QJ7MM,QI8MjBlB,GACA,EAAKH,UAAUkD,IAAI/C,EAAKD,O,sCAiB/BmE,Y,iHAIAA,Y,mGCjMUC,I,cApDX,WAAY9E,GAAuB,IAAD,gCAFlCA,eAEkC,6CAwBlC+E,kBAxBkC,sBAwBd,gCAAArI,EAAA,yDACVT,EAAQ,EAAK+I,WACbxH,EAAe,EAAKC,mBACtBxB,IAASuB,EAHG,uBAINyH,EAAoBC,KAAIC,OAAOlJ,KAEE,IAAnBgJ,EAAaG,KAAcnC,KAAKoC,MAAQ,KANhD,0CAQgB5H,GAAgBxB,EAAOuB,GARvC,+BAQsDvB,MARtD,2EAUJW,IAAMN,MAAM,kCAVR,iCAcLL,GAdK,iCAgBT,IAhBS,0DAxBc,KA2ClC+I,SAAW,WACP,OAAOhK,OAAOkB,aAAaC,QLxCJ,iBKJO,KA+ClCsB,gBAAkB,WACd,OAAOzC,OAAOkB,aAAaC,QL3CI,yBKJ/BuF,KAAK1B,UAAYA,E,qDAKJ/D,GACTA,EACAjB,OAAOkB,aAAa4B,QLJD,eKIoC7B,GAEvDjB,OAAOkB,aAAaoB,WLND,kB,sCKSHE,GAChBA,EACAxC,OAAOkB,aAAa4B,QLVO,uBKUoCN,GAE/DxC,OAAOkB,aAAaoB,WLZO,0B,qCKgB/BoE,KAAK4D,WAAY,M,8CAjBpB9C,c,yEAAgC,K,qCAEhCE,U,mHAOAA,U,uHAOAA,U,+EChBU6C,GAZK,CAChBC,QAAS,WACL,OAAOrH,GAAYC,IAAI,UAE3BqH,MAAO,SAACC,GACJ,OAAOvH,GAAYR,KAAK,cAAe+H,IAE3CC,SAAU,SAACD,GACP,OAAOvH,GAAYR,KAAK,iBAAkB+H,KCoFnClE,I,cAnFX,WAAYxB,GAAuB,IAAD,gCAFlCA,eAEkC,wQA8ElCyB,uBAAyB,WACrB,OAAOmE,eAAK,EAAKlI,OA9EjBgE,KAAK1B,UAAYA,E,yDAwDA6F,GACbnE,KAAKhE,OACLgE,KAAKhE,KAAK+B,MAAQoG,EAAUzI,O,qCAGboC,GACfkC,KAAKhE,OACLgE,KAAKhE,KAAK8B,YAAcA,K,qCAzD5B,QAASkC,KAAKhE,O,8CAId,IAAMzB,EAAQyF,KAAK1B,UAAU8E,YAAYE,WACzC,SAAUtD,KAAKoE,gBAAkB7J,GAASA,EAAM2D,OAAS,O,yCAR5D4C,c,yEAAgC,Q,2CAEhCqC,Y,iIAIAA,Y,6HAKAnC,U,oFAAiB,SAAChF,GACf,EAAKA,KAAOA,M,qCAGfgF,U,2HAAe,WAAOgD,GAAP,eAAAhJ,EAAA,sEAER,EAAKsD,UAAU8E,YAAYiB,SAAS,MACpC,EAAK/F,UAAU8E,YAAYkB,gBAAgB,MAHnC,SAIWT,GAAYE,MAAMC,GAJ7B,OAIFhI,EAJE,OAKR,EAAKuI,QAAQvI,GACb,EAAKsC,UAAU8E,YAAYiB,SAASrI,EAAKzB,OACzC,EAAK+D,UAAU8E,YAAYkB,gBAAgBtI,EAAKF,cAPxC,uH,iGAafkF,U,2HAAkB,WAAOgD,GAAP,eAAAhJ,EAAA,kEAEN,EAAKoJ,eAFC,gCAGYP,GAAYI,SAASD,GAHjC,OAGDhI,EAHC,OAIP,EAAKuI,QAAQvI,GACb,EAAKsC,UAAU8E,YAAYiB,SAASrI,EAAKzB,OACzC,EAAK+D,UAAU8E,YAAYkB,gBAAgBtI,EAAKF,cANzC,8H,gGAalBkF,U,0GAAiB,4BAAAhG,EAAA,kEAEL,EAAKgB,KAFA,gCAGa6H,GAAYC,UAHzB,OAGA9H,EAHA,OAIN,EAAKuI,QAAQvI,GAJP,gCAMH,EAAKA,MANF,gCAQVsG,QAAQkC,IAAR,MARU,4D,yCAYjBxD,U,sHAKAA,U,mHAKAA,U,oFAAgB,WACb,EAAK1C,UAAU8E,YAAYiB,SAAS,MACpC,EAAK/F,UAAU8E,YAAYkB,gBAAgB,MAC3C,EAAKC,QAAQ,MACb/K,EAAqBiC,KP/EL,S,iDOkFnBuF,U,yEAA2B,SAACjG,GACzBuH,QAAQkC,IAAIzJ,O,cC3DL0J,GAxBQ,CACnB/H,IAAK,SAACmB,GACF,OAAOpB,GAAYC,IAAZ,kBAA2BmB,KAEtC6G,eAAgB,SAAC7G,EAAmB8G,GAChC,OAAOlI,GAAYC,IAAZ,kBAA2BmB,EAA3B,eAAmD8G,IAE9DC,UAAW,SAACC,GACR,OAAOpI,GAAYC,IAAZ,kBAA2BmI,EAA3B,gBAEXC,WAAY,SAACD,GACT,OAAOpI,GAAYC,IAAZ,kBAA2BmI,EAA3B,iBAEXtH,OAAQ,SAACwH,GACL,OAAOtI,GAAYK,IAAI,WAAYiI,IAEvCC,OAAQ,SAACH,GACL,OAAOpI,GAAYR,KAAZ,kBAA4B4I,EAA5B,WAA6C,KAExDI,SAAU,SAACJ,GACP,OAAOpI,GAAYR,KAAZ,kBAA4B4I,EAA5B,aAA+C,MCP/CK,GAdM,CACjBC,OAAQ,SAACC,GACL,IAAInI,EAAW,IAAIoI,SAEnB,OADApI,EAAS0B,OAAO,OAAQyG,GACjB3I,GAAYO,SAAS,SAAUC,IAE1CqI,QAAS,SAACC,GACN,OAAO9I,GAAYR,KAAZ,gBAA0BsJ,EAA1B,YAA6CA,IAExDxI,OAAQ,SAACwI,GACL,OAAO9I,GAAYM,OAAZ,gBAA4BwI,MCHtBC,I,cAQjB,WAAYlH,GAAuB,IAAD,gCAPlCA,eAOkC,ssBAC9B0B,KAAK1B,UAAYA,EAEjB2B,oBAAS,kBAAM,EAAKwF,kBAAgB,SAAAC,GVAT,IUCnBA,EACA,EAAKC,cAAc,EAAKC,YAAa/H,UVJlB,aAGC,IUEf6H,EACL,EAAKC,cAAc,EAAKC,YAAa/H,UVLjB,cUOpB,EAAK+G,eAAYiB,K,gEAIiB,IAAD,IACzC,SAAU,UAAA7F,KAAK1B,UAAUwB,UAAU9D,YAAzB,eAA+B8J,aAA/B,UAA4C9F,KAAK4F,mBAAjD,aAA4C,EAAkBG,a,gDAIxE,OVf2B,IUenB/F,KAAKyF,iB,gDAIb,OVlB4B,IUkBpBzF,KAAKyF,mB,gDA5BhB3E,c,yEAA0C,Q,8CAC1CA,c,yEAAyD,K,yCACzDA,c,wHACAA,c,yEAAyC,K,8CACzCA,c,yEAAoD,Q,gDAepDqC,Y,wIAIAA,Y,8IAIAA,Y,oIAIAnC,U,oFAAsB,SAACgF,GACpB,EAAKP,eAAiBO,M,8CAGzBhF,U,oFAAwB,SAAC4E,GACtB,EAAKA,YAAcA,M,8CAGtB5E,U,2HAAwB,WAAOnD,GAAP,eAAA7C,EAAA,+EAEKyJ,GAAe/H,IAAImB,GAFxB,OAEXkH,EAFW,OAGjB,EAAKkB,eAAelB,GAHH,gDAKjBzC,QAAQ1H,MAAR,MACAM,IAAMN,MAAM,8BANK,yD,oGAUxBoG,U,2HAAqB,WAAOoE,GAAP,eAAApK,EAAA,+EAEMkK,GAAaC,OAAOC,GAF1B,cAERc,EAFQ,OAGdxD,uBAAY,WAAO,IAAD,EACd,YAAKkD,mBAAL,SAAkBO,OAAO1K,KAAKyK,MAJpB,kBAMPA,GANO,gCAQd5D,QAAQ1H,MAAR,MACAM,IAAMN,MAAM,yBATE,yD,qGAarBoG,U,2HAAsB,WAAOuE,GAAP,SAAAvK,EAAA,+EAETkK,GAAaI,QAAQC,GAFZ,OAGf7C,uBAAY,WACe,IAAD,IAAlB,EAAKkD,cACL,EAAKA,YAAYzB,UAAjB,UAA6B,EAAKyB,mBAAlC,iBAA6B,EAAkBO,cAA/C,aAA6B,EAA0BhI,QAAO,SAACiI,GAAD,OAAOA,EAAE/I,KAAOkI,KAAS,GACvF,EAAKjH,UAAUwB,UAAUuG,aAAa,EAAKT,YAAYzB,eANhD,gDAUf7B,QAAQ1H,MAAR,MACAM,IAAMN,MAAM,iCAXG,yD,oGAetBoG,U,2HAAqB,WAAOuE,GAAP,SAAAvK,EAAA,+EAERkK,GAAanI,OAAOwI,GAFZ,OAGd7C,uBAAY,WACR,EAAKkD,YAAaO,OAAS,EAAKP,YAAaO,OAAQhI,QAAO,SAACiI,GAAD,OAAOA,EAAE/I,KAAOkI,QAJlE,gDAOdjD,QAAQ1H,MAAR,MACAM,IAAMN,MAAM,0BARE,yD,sGAYrBoG,U,2HAAuB,WAAOsF,GAAP,eAAAtL,EAAA,+EAEUyJ,GAAelH,OAAO+I,GAFhC,OAEVxI,EAFU,OAGhB4E,uBAAY,WACR,EAAKpE,UAAUwB,UAAUyG,eAAezI,GACxC,EAAK8H,YAAL,6BAAwB,EAAKA,aAAgBU,GAC7C,EAAKV,YAAa9H,YAAcA,KANpB,gDAShBwE,QAAQ1H,MAAR,MACAM,IAAMN,MAAM,iCAVI,yD,+FAcvBoG,U,2HAAgB,WAAO6D,GAAP,eAAA7J,EAAA,+EAEoByJ,GAAeO,OAAOH,GAF1C,OAEH7I,EAFG,OAGT0G,uBAAY,WAG6B,IAAD,GAFpC,EAAKkD,YAAaY,gBAAkB,EACpC,EAAKZ,YAAaa,WAAY,EAC1B,EAAKC,6BACL,EAAK9B,UAAL,UAAiB,EAAKA,iBAAtB,QAAmC,GACnC,EAAKA,UAAUnJ,KAAKO,OARnB,gDAYTsG,QAAQ1H,MAAR,MACAM,IAAMN,MAAM,0BAbH,yD,iGAiBhBoG,U,2HAAkB,WAAO6D,GAAP,SAAA7J,EAAA,+EAELyJ,GAAeQ,SAASJ,GAFnB,OAGXnC,uBAAY,WAG6B,IAAD,GAFpC,EAAKkD,YAAaY,gBAAkB,EACpC,EAAKZ,YAAaa,WAAY,EAC1B,EAAKC,6BACL,EAAK9B,UAAL,UAAiB,EAAKA,iBAAtB,aAAiB,EAAgBzG,QAAO,SAAAwI,GAAC,aAAIA,EAAE9I,aAAF,UAAgB,EAAKS,UAAUwB,UAAU9D,YAAzC,aAAgB,EAA+B6B,kBAPzF,gDAWXyE,QAAQ1H,MAAR,MACAM,IAAMN,MAAM,4BAZD,yD,sGAgBlBoG,U,2HAAuB,WAAO6D,EAAgB/F,GAAvB,eAAA9D,EAAA,kEAEhB,EAAK4L,oBAAqB,EACtBhC,OAAoCiB,EVpIjB,cUsInB/G,EALY,gCAMM2F,GAAeG,UAAUC,GAN/B,OAMZD,EANY,+CAQMH,GAAeK,WAAWD,GARhC,QAQZD,EARY,eAUhBlC,uBAAY,WACR,EAAKkC,UAAYA,GAAaA,EAAU1G,OAAS,EAAI0G,OAAYiB,EACjE,EAAKe,oBAAqB,KAZd,kDAehBtE,QAAQ1H,MAAR,MACAM,IAAMN,MAAM,6BACZ,EAAKgM,oBAAqB,EAjBV,iCAmBb,MAnBa,0D,4GAsBvB5F,U,oFAA2B,SAAC0D,GACzB,EAAKA,eAAiBA,M,kDAGzB1D,U,2HAA4B,WAAOnD,EAAmBiB,GAA1B,iBAAA9D,EAAA,uEAEf2B,EAAW,IAAI+B,iBACZsD,IAAI,YAAalD,GAHL,SAIQ2F,GAAeC,eAAe7G,EAAWlB,GAJjD,OAIf+H,EAJe,OAKrB,EAAKmC,kBAAkBnC,GALF,gDAOrBpC,QAAQ1H,MAAR,MACAM,IAAMN,MAAM,mCARS,iCAUlB,MAVkB,yD,yECvKZoI,I,GAOhBlC,aAAWgG,I,GAJZ,WAAYxI,GAAuB,yBAFnCA,eAEkC,kLAC9B0B,KAAK1B,UAAYA,G,0HAGiC,Q,mDAErD0C,U,oFAA6B,SAAC+B,GAE3B,EAAKgE,eAAgB,IAAIC,MACpBC,QADgB,UACLjN,EADK,iBACsC,CAEnDkN,mBAAoB,kBAAM,EAAK5I,UAAU8E,YAAYC,uBAExD8D,iBAAiBC,KAASC,aAC1BC,QAGL,EAAKP,cAAcQ,QACdrL,MAAK,kCAAM,EAAK6K,qBAAX,aAAM,EAAoBS,SAC/BtL,MAAK,WAAO,IAAD,EACRoG,QAAQkC,IAAR,mCAAwCzB,IACN,cAA9B,EAAKgE,cAAeS,QACpB,YAAKT,qBAAL,SAAoBU,OAAO,aAAc1E,OAEhD2E,OAAM,SAAA9M,GAAK,OAAI0H,QAAQkC,IAAR,2CAAgD5J,OAGpE,EAAKmM,cAAcY,GAAG,kBAAkB,SAAA7E,GACpC,EAAKxE,UAAUD,cAAcuJ,6BAA6B9E,MAG9D,EAAKiE,cAAcY,GAAG,qBAAqB,SAAA1M,GACvCC,IAAM2M,UACN3M,IAAM4M,KAAK7M,U,iDAIlB+F,U,oFAA2B,SAAC+B,GACzB,EAAKgE,cAAeU,OAAO,kBAAmB1E,GACzC7G,MAAK,WACF,EAAK6K,cAAegB,UAEvB7L,MAAK,WACFoG,QAAQkC,IAAI,yBAEfkD,OAAM,SAAA9M,GAAK,OAAI0H,QAAQkC,IAAR,2CAAgD5J,W,2CAGvEoG,U,2HAAqB,WAAO8B,GAAP,SAAA9H,EAAA,sEACZ,EAAK+L,cAAeU,OAAO,cAAe3E,GAD9B,2C,6DChD1BkF,oBAAU,CAAEC,eAAgB,WAErB,ICTKC,GD2BCC,GAAmBC,wBAAc,IAV1C,aAAe,yBANf/J,mBAMc,OALdyB,eAKc,OAJdsD,iBAIc,OAHdoC,kBAGc,OAFdxC,sBAEc,EACVhD,KAAK3B,cAAgB,IAAIA,GAAc2B,MACvCA,KAAKF,UAAY,IAAIA,GAAUE,MAC/BA,KAAKoD,YAAc,IAAIA,GAAYpD,MACnCA,KAAKwF,aAAe,IAAIA,GAAaxF,MACrCA,KAAKgD,iBAAmB,IAAIA,GAAiBhD,QEuBtCqI,gBAxCU,WAAO,IAAD,MAErBvI,EADewI,qBAAWH,IACDrI,UAE/B,OACI,kBAACyI,EAAA,EAAD,CAAMC,MAAM,MAAMC,UAAQ,GACtB,kBAACC,EAAA,EAAD,KACI,kBAACH,EAAA,EAAKI,KAAN,CAAWC,QAAM,EAACC,GAAIC,IAASC,GAAE,UdXzB,KcWoDC,OAAK,GAC7D,yBAAKC,IAAI,mBAAmBC,IAAI,SADpC,kBAICpJ,EAAUsE,gBAAkBtE,EAAU9D,MAClC,kBAAC,WAAD,KACG,kBAACuM,EAAA,EAAKI,KAAN,CAAWQ,KAAK,aAAaN,GAAIC,IAASC,GAAE,UdbtC,iBceN,kBAACR,EAAA,EAAKI,KAAN,KACI,kBAACS,EAAA,EAAD,CAAQP,GAAIC,IAASC,GAAE,UdfhB,mBcgBHM,QAAQ,kBAAkBC,UAAQ,KAG1C,kBAACf,EAAA,EAAKI,KAAN,CAAWY,SAAS,SAChB,kBAACC,EAAA,EAAD,CAAOC,QAAM,EAACC,OAAO,QAAQT,KAAK,UAAAnJ,EAAU9D,YAAV,eAAgB+B,QAAS,qBAC3D,kBAAC4L,EAAA,EAAD,CAAUC,SAAS,WAAWC,KAAI,UAAE/J,EAAU9D,YAAZ,aAAE,EAAgB8B,aAChD,kBAAC6L,EAAA,EAASpB,KAAV,KACI,kBAACoB,EAAA,EAAShB,KAAV,CACIE,GAAIiB,IACJf,GAAE,UdvBV,WcuBU,sBAAmCjJ,EAAU9D,YAA7C,aAAmC,EAAgB6B,WACrDgM,KAAK,aACLE,KAAK,SAET,kBAACJ,EAAA,EAAShB,KAAV,CAAeqB,QAAS,kBAAMlK,EAAUmK,UAAUJ,KAAK,SAASE,KAAK,mB,oBCK1F1B,gBAlCQ,WACnB,IAAM6B,EAAkB5B,qBAAWH,IAC7BgC,EAAeD,EAAgBpK,UAC/BsK,EAAiBF,EAAgB9G,YAEvC,OACI,kBAACiH,GAAA,EAAD,CAAS5B,UAAQ,EAAC6B,UAAU,SAASC,UAAQ,EAACC,UAAU,YACpD,kBAAC9B,EAAA,EAAD,CAAWmB,MAAI,GACX,kBAACY,GAAA,EAAD,CAAQ5B,GAAG,KAAKJ,UAAQ,GACpB,kBAACe,EAAA,EAAD,CAAOkB,KAAK,UAAUzB,IAAI,mBAAmBC,IAAI,OAAOyB,MAAO,CAAEC,aAAc,MADnF,mBAKiC,IAAhCT,EAAa/F,gBAA2BgG,EAAe9G,WACjD,kBAAC,WAAD,KACC,kBAACmH,GAAA,EAAD,CAAQ5B,GAAG,KAAKJ,UAAQ,EAACY,QAAO,uBAAkBc,EAAanO,KAAM8B,eACrE,kBAACsL,EAAA,EAAD,CAAQP,GAAIiB,IAAMf,GfjBZ,ceiB0C2B,KAAK,OAAOjC,UAAQ,GAApE,sBAID,kBAAC,WAAD,KACC,kBAACW,EAAA,EAAD,CAAQP,GAAIiB,IAAMf,GfzBjB,SeyB0C2B,KAAK,OAAOjC,UAAQ,GAA/D,SAGA,kBAACW,EAAA,EAAD,CAAQP,GAAIiB,IAAMf,Gf3Bd,Ye2B0C2B,KAAK,OAAOjC,UAAQ,GAAlE,kB,yFCzBlBoC,GAAS,CACXC,YAAa,SACbC,YAAa,GA6BFC,GA1BoC,SAAC,GAAmB,IAAjB/M,EAAgB,EAAhBA,UAClD,OACI,kBAACgN,GAAA,EAAD,CAAMC,YAAU,GAAhB,OAEQjN,QAFR,IAEQA,OAFR,EAEQA,EAAWkN,KAAI,SAAC/M,GACZ,IAAIgN,EAAOhN,EAASL,OAAS,mBAC7B,OACI,kBAACkN,GAAA,EAAKtC,KAAN,CAAW1J,IAAKb,EAASP,WACrB,kBAACwN,GAAA,EAAD,CACIzC,OAAQxK,EAASN,YACjBwN,QACI,kBAAC9B,EAAA,EAAD,CAAOP,IAAKmC,EAAMV,KAAK,OACnBa,UAAQ,EACRC,UAAQ,EACRb,MAAOvM,EAASqI,UAAYoE,GAAS,eCoD9DY,GAlE4B,SAAC,GAAkB,IAAD,MAAfnO,EAAe,EAAfA,SAC1C,OACI,kBAAC+M,GAAA,EAAQqB,MAAT,KACI,kBAACrB,GAAA,EAAD,KACI,kBAAC1B,GAAA,EAAK+C,MAAN,KACI,kBAAC/C,GAAA,EAAD,KACI,kBAACA,GAAA,EAAKa,MAAN,CACIkB,KAAK,OACLa,UAAQ,EACRtC,KAAK,UAAA3L,EAASuE,YAAT,eAAe9D,QAAS,mBAC7B4M,MAAO,CAAEC,aAAc,KAE3B,kBAACjC,GAAA,EAAKgD,QAAN,KACI,kBAAChD,GAAA,EAAK8B,OAAN,CAAa5B,GAAIiB,IAAMf,GAAE,UjBlBvB,ciBkBuB,YAAiCzL,EAASD,KAC9DC,EAASsO,OAEd,kBAACjD,GAAA,EAAKkD,YAAN,kBACe,IACX,kBAAC,IAAD,CAAM9C,GAAE,UjBpBR,WiBoBQ,sBAAmCzL,EAASuE,YAA5C,aAAmC,EAAehE,YAA1D,UACKP,EAASuE,YADd,aACK,EAAe/D,cAGvBR,EAASqE,mBACN,kBAACgH,GAAA,EAAKkD,YAAN,KACI,kBAACC,GAAA,EAAD,CACIC,OAAK,EACLC,MAAM,SACN3C,QAAQ,mCAInB/L,EAASkE,qBAAuBlE,EAASqE,mBACtC,kBAACgH,GAAA,EAAKkD,YAAN,KACI,kBAACC,GAAA,EAAD,CACIC,OAAK,EACLC,MAAM,QACN3C,QAAQ,wCAQpC,kBAACgB,GAAA,EAAD,KACI,kBAAC4B,GAAA,EAAD,CAAM9C,KAAK,UAAWxJ,IAAOrC,EAASoC,MAAME,OAAO,UACnD,kBAACqM,GAAA,EAAD,CAAM9C,KAAK,WAAY7L,EAAS4O,MAFpC,KAE6C5O,EAAS6O,MAEtD,kBAAC9B,GAAA,EAAD,CAAS+B,WAAS,GACd,kBAAC,GAAD,CAA0BnO,UAAWX,EAASW,aAElD,kBAACoM,GAAA,EAAD,CAASgC,UAAQ,GACb,8BAAO/O,EAASgP,aAChB,kBAAClD,EAAA,EAAD,CACIP,GAAIiB,IACJf,GAAE,UjB5DQ,ciB4DR,YAAiCzL,EAASD,IAC5C8L,KAAM7L,EAASD,GACfgM,QAAQ,OACRkD,QAAQ,QACRP,MAAM,YCpCX3D,gBA5BgB,WAC3B,IACMmE,EADelE,qBAAWH,IACM9J,cAEtC,OACI,kBAAC,WAAD,KAEQmO,EAAiBC,eAAetB,KAAI,YAA0B,IAAD,oBAAvBuB,EAAuB,KAAhBvK,EAAgB,KACzD,OACI,kBAAC,WAAD,CAAUlD,IAAKyN,GACX,kBAACZ,GAAA,EAAD,CAAOpB,KAAK,QAAQsB,MAAM,QACrBU,GAEL,kBAAC/D,GAAA,EAAK+C,MAAN,CAAYiB,SAAO,GAEXxK,EAAWgJ,KAAI,SAACyB,GACZ,OAAO,kBAAC,GAAD,CAAkB3N,IAAK2N,EAAKvP,GAAIC,SAAUsP,gB,UCX1EC,GANmB,SAAC,GAA0B,IAAxB5R,EAAuB,EAAvBA,QAAS6R,EAAc,EAAdA,QAC1C,OACI,kBAACC,GAAA,EAAD,CAAQC,OAAQF,EAASG,OAAO,YAAYhS,I,UCsCrCoN,gBAvCQ,WACnB,IADyB,EACJC,qBAAWH,IACiB9J,cAAzC6O,EAFiB,EAEjBA,aAAcpO,EAFG,EAEHA,UAEtB,OACI,kBAAC,WAAD,KACI,kBAACyJ,EAAA,EAAD,CAAMgC,UAAQ,EAACG,KAAM,QAASC,MAAO,CAAEwC,MAAO,OAAQC,UAAW,KAC7D,kBAAC3C,GAAA,EAAD,CAAQV,KAAM,SAAUsD,UAAQ,EAACrB,MAAO,OAAQ3C,QAAS,YACzD,kBAACd,EAAA,EAAKI,KAAN,CACIqE,QAASlO,EAAUwO,IpBYL,aoBZ2CxO,EAAUwO,IpBatD,UoBZbtD,QAAS,kBAAMkD,EpBUN,MoBV4C,SACrDlB,MAAO,OACP7C,KAAM,MACNE,QAAS,mBAEb,kBAACd,EAAA,EAAKI,KAAN,CACIqE,OAAQlO,EAAUwO,IpBKJ,WoBJdtD,QAAS,kBAAMkD,EpBID,UoBJ4C,SAC1DlB,MAAO,OACP7C,KAAM,WACNE,QAAS,cAEb,kBAACd,EAAA,EAAKI,KAAN,CACIqE,OAAQlO,EAAUwO,IpBDL,UoBEbtD,QAAS,kBAAMkD,EpBFF,SoBE4C,SACzDlB,MAAO,OACP7C,KAAM,OACNE,QAAS,iBAGjB,kBAACoB,GAAA,EAAD,CAAQV,KAAM,WAAYsD,UAAQ,EAACrB,MAAO,OAAQ3C,QAAS,gBAC3D,kBAAC,YAAD,CACIkE,SAAU,SAAC7N,GAAD,OAAUwN,EpBTA,YoBS6CxN,IACjEV,MAAOF,EAAUpC,IpBVG,coBUoC,IAAI6E,W,UCN7DiM,GAhCY,WACvB,OACI,kBAAC,WAAD,KACI,kBAACC,GAAA,EAAD,CAAaC,OAAK,EAAC/C,MAAO,CAAEyC,UAAW,KACnC,kBAAC/C,GAAA,EAAQqB,MAAT,KACI,kBAACrB,GAAA,EAAD,CAASM,MAAO,CAAEgD,UAAW,MACzB,kBAACF,GAAA,EAAD,KACI,kBAACA,GAAA,EAAYhD,OAAb,CAAoB1M,OAAK,GACrB,kBAAC0P,GAAA,EAAYG,KAAb,MACA,kBAACH,GAAA,EAAYG,KAAb,OAEJ,kBAACH,GAAA,EAAYI,UAAb,KACI,kBAACJ,GAAA,EAAYG,KAAb,SAIZ,kBAACvD,GAAA,EAAD,KACI,kBAACoD,GAAA,EAAD,KACI,kBAACA,GAAA,EAAYG,KAAb,MACA,kBAACH,GAAA,EAAYG,KAAb,QAGR,kBAACvD,GAAA,EAAD,CAAS+B,WAAS,EAACzB,MAAO,CAAEgD,UAAW,MACvC,kBAACtD,GAAA,EAAD,CAASgC,UAAQ,GACb,kBAACjD,EAAA,EAAD,CAAQ0E,UAAQ,EAAC9B,MAAM,OAAOO,QAAQ,QAAQlD,QAAQ,cCwB/DhB,gBAxCqB,WAChC,IADsC,EACjBC,qBAAWH,IAC2E9J,cAAnG+B,EAF8B,EAE9BA,eAAgBkB,EAFc,EAEdA,oBAAqByM,EAFP,EAEOA,cAAenP,EAFtB,EAEsBA,kBAAmBoP,EAFzC,EAEyCA,WAE/E3U,qBAAU,YACK,uCAAG,sBAAA2B,EAAA,sEACJoF,IADI,2CAAH,qDAGX6N,KACD,CAAC7N,IAEJ,IAAM8N,EAAe,uCAAG,sBAAAlT,EAAA,6DACpB+S,EAAcnP,EAAoB,GADd,SAEdwB,IAFc,2CAAH,qDAKrB,OACI,kBAAC+N,GAAA,EAAD,KACI,kBAACA,GAAA,EAAKC,OAAN,CAAajB,MAAO,IACd7L,GAA6C,IAAtB1C,EAClB,kBAAC,GAAD,MACC,kBAAC,KAAD,CACIyP,UAAW,EACXC,SAAUJ,EACVK,SAAUjN,GAAuB1C,EAAoB,EAAIoP,EACzDQ,aAAa,GACb,kBAAC,GAAD,QAIhB,kBAACL,GAAA,EAAKC,OAAN,CAAajB,MAAO,GAChB,kBAAC,GAAD,OAEJ,kBAACgB,GAAA,EAAKC,OAAN,CAAajB,MAAO,IAChB,kBAAC,GAAD,CAASL,QAASxL,S,UC/BnBmN,GARV,SAAC,GAA8C,IAAD,IAA3CxT,eAA2C,MAAjC,UAAiC,MAAtBwN,gBAAsB,SAC/C,OACI,kBAACiG,GAAA,EAAD,CAAQ1B,QAAM,EAACvE,SAAUA,GACrB,kBAACsE,GAAA,EAAD,CAAQ1D,QAASpO,M,6BCgBd0T,GAnByB,SAAC,GAMlC,IALHC,EAKE,EALFA,MACAzB,EAIE,EAJFA,MACA0B,EAGE,EAHFA,KACAC,EAEE,EAFFA,YAEE,IADFC,KAAQC,EACN,EADMA,QAASpU,EACf,EADeA,MAEjB,OACI,kBAACqU,GAAA,EAAKC,MAAN,CAAYtU,MAAOoU,KAAapU,EAAOuS,MAAOA,GAC1C,4CAAU0B,KAAMA,GAAUD,EAA1B,CAAiCE,YAAaA,KAC7CE,GAAWpU,GACR,kBAACkR,GAAA,EAAD,CAAOC,OAAK,EAACC,MAAM,OACdpR,KCqFNyN,gBAzFsB,WACjC,IAAM6B,EAAkB5B,qBAAWH,IADI,EAEe+B,EAAgB7L,cAA9D8Q,EAF+B,EAE/BA,WAAYlO,EAFmB,EAEnBA,iBAAkBvD,EAFC,EAEDA,YAFC,EAGYwM,EAAgBlH,iBAA3DoM,EAH+B,EAG/BA,oBAAqBC,EAHU,EAGVA,kBAHU,EAIWC,oBAAS,GAJpB,oBAIhCC,EAJgC,KAIbC,EAJa,KA4BvC,OArBAnW,qBAAU,WACN,GAAI4H,EAIA,OAHAmO,EAAoBnO,EAAiB5D,IAG9B,WACH,OAAOgS,EAAkBpO,EAAiB5D,OAGnD,CAAC+R,EAAqBC,EAAmBpO,IAE5C5H,qBAAU,WAMF4H,GALM,uCAAG,sBAAAjG,EAAA,6DACTwU,GAAqB,GADZ,SAEH9R,IAFG,OAGT8R,GAAqB,GAHZ,2CAAH,oDAMNC,KACL,CAAC/R,EAAauD,IAEbsO,EACO,kBAAC,GAAD,CAAStU,QAAQ,kBAAkB6R,SAAS,IAGnD,kBAAC,WAAD,KACI,kBAACzC,GAAA,EAAD,CACIC,UAAU,SACV+C,SAAS,MACT5E,UAAQ,EACRuD,MAAM,OACNrB,MAAO,CAAE+E,OAAQ,SACjB,kBAACjF,GAAA,EAAD,+BAEJ,kBAACJ,GAAA,EAAD,CAASgD,UAAQ,GACb,kBAACsC,GAAA,EAAQjE,MAAT,KAEQzK,GAAoBA,EAAkB4B,UACtC5B,EAAiB4B,SAASsI,KAAI,SAACrI,GAC3B,OACI,kBAAC6M,GAAA,EAAD,CAAS1Q,IAAK6D,EAAQzF,IAClB,kBAACsS,GAAA,EAAQC,OAAT,CAAgB3G,IAAKnG,EAAQ+M,WAAa,qBAC1C,kBAACF,GAAA,EAAQhE,QAAT,KACI,kBAACgE,GAAA,EAAQG,OAAT,CAAgBjH,GAAIiB,IAAMf,GAAE,UzBrDpC,WyBqDoC,mBAAmCjG,QAAnC,IAAmCA,OAAnC,EAAmCA,EAAS+B,SACnE/B,EAAQiN,iBAEb,kBAACJ,GAAA,EAAQK,SAAT,KACI,6BAAMrQ,IAAOmD,EAAQmN,WAAWrQ,OAAO,eAAvC,OAA2DD,IAAOmD,EAAQmN,WAAWrQ,OAAO,UAA5F,OAEJ,kBAAC+P,GAAA,EAAQO,KAAT,KAAepN,EAAQjG,WAK3C,kBAAC,KAAD,CACIsT,SAAUhB,EACViB,OAAQ,gBAAGC,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,WAAYC,EAA7B,EAA6BA,SAAUC,EAAvC,EAAuCA,KAAvC,OACJ,kBAACvB,GAAA,EAAD,CAAMkB,SAAU,kBAAME,IAAgBnU,MAAK,kBAAMsU,EAAKC,aAClD,kBAAC,KAAD,CACItH,KAAK,OACLuH,UAAW/B,GACXE,KAAM,EACNC,YAAY,qBAGhB,kBAAC1F,EAAA,EAAD,CACIC,QAAQ,YACRsH,cAAc,OACd5G,KAAK,OACL6G,SAAO,EACP9D,QAASwD,EACTxC,SAAUyC,cClFxCM,GAAqB,CACvB1S,OAAQ,mBAGN2S,GAAyB,CAC3BvH,SAAU,WACVwH,OAAQ,KACRC,KAAM,KACN7D,MAAO,OACP8D,OAAQ,OACRjF,MAAO,SAmEI3D,gBAhE6D,SAAC,GAAkB,IAAD,IAAf/K,EAAe,EAAfA,SACrE4M,EAAkB5B,qBAAWH,IADuD,EAG5DmH,oBAAkB,GAH0C,oBAGnFxC,EAHmF,KAG1EoE,EAH0E,KAKpFC,EAAc,uCAAG,sBAAAnW,EAAA,6DACnBkW,GAAW,GADQ,kBAGThH,EAAgB7L,cAAcb,OAAOF,GAH5B,uBAKf4T,GAAW,GALI,uEAAH,qDASdE,EAAgB,uCAAG,sBAAApW,EAAA,6DACrBkW,GAAW,GADU,kBAGXhH,EAAgB7L,cAAcZ,SAASH,GAH5B,uBAKjB4T,GAAW,GALM,uEAAH,qDAStB,OACI,kBAAC7G,GAAA,EAAQqB,MAAT,KACI,kBAACrB,GAAA,EAAD,CAAS0B,OAAK,EAACsB,SAAS,MAAM1C,MAAO,CAAE0G,QAAS,MAC5C,kBAAC7H,EAAA,EAAD,CACIP,IAAG,wCAA4B3L,QAA5B,IAA4BA,OAA5B,EAA4BA,EAAUgU,SAAtC,QACH5D,OAAK,EAAC/C,MAAOkG,KACjB,kBAACxG,GAAA,EAAD,CAASM,MAAOmG,GAAwB/E,OAAK,GACzC,kBAACpD,GAAA,EAAK+C,MAAN,KACI,kBAAC/C,GAAA,EAAD,KACI,kBAACA,GAAA,EAAKgD,QAAN,KACI,kBAAClB,GAAA,EAAD,CAAQC,KAAK,OAAOrB,QAAO,OAAE/L,QAAF,IAAEA,OAAF,EAAEA,EAAUsO,MAAOjB,MAAO,CAAEqB,MAAO,WAC9D,2BAAIrM,IAAM,OAACrC,QAAD,IAACA,OAAD,EAACA,EAAUoC,MAAME,OAAO,gBAClC,uCACc,IACV,kBAAC,IAAD,CAAMmJ,GAAE,U1BjDZ,W0BiDY,mBAAmCzL,QAAnC,IAAmCA,GAAnC,UAAmCA,EAAUuE,YAA7C,aAAmC,EAAgBhE,YACvD,uCAASP,QAAT,IAASA,GAAT,UAASA,EAAUuE,YAAnB,aAAS,EAAgB/D,oBAQrD,kBAACuM,GAAA,EAAD,CAASgC,UAAQ,EAACgB,SAAS,YAEnB,OAAC/P,QAAD,IAACA,OAAD,EAACA,EAAUqE,sBAAqB,OAACrE,QAAD,IAACA,OAAD,EAACA,EAAUkE,qBAC3C,kBAAC4H,EAAA,EAAD,CAAQ0D,QAASA,EAAS9C,QAASmH,EAAgBnF,MAAM,QAAzD,mBAGA,OAAC1O,QAAD,IAACA,OAAD,EAACA,EAAUqE,qBAAX,OAAgCrE,QAAhC,IAAgCA,OAAhC,EAAgCA,EAAUkE,qBAC1C,kBAAC4H,EAAA,EAAD,CAAQ0D,QAASA,EAAS9C,QAASoH,GAAnC,sBAEK,OAAR9T,QAAQ,IAARA,OAAA,EAAAA,EAAUqE,oBACP,kBAACyH,EAAA,EAAD,CAAQP,GAAIiB,IAAMf,GAAE,U1BrEL,kB0BqEK,mBAAsCzL,QAAtC,IAAsCA,OAAtC,EAAsCA,EAAUD,IAChE2O,MAAM,SAASO,QAAQ,SAD3B,qBClCLgF,GAvC2D,SAAC,GAAkB,IAAhBjU,EAAe,EAAfA,SACzE,OACI,kBAAC+M,GAAA,EAAQqB,MAAT,KACI,kBAACrB,GAAA,EAAD,CAASgD,SAAS,OACd,kBAACc,GAAA,EAAD,KACI,kBAACA,GAAA,EAAKC,OAAN,CAAajB,MAAO,GAChB,kBAAClB,GAAA,EAAD,CAAMvB,KAAK,QAAQsB,MAAM,OAAO7C,KAAK,UAEzC,kBAACgF,GAAA,EAAKC,OAAN,CAAajB,MAAO,IAChB,kCAAI7P,QAAJ,IAAIA,OAAJ,EAAIA,EAAUgP,gBAI1B,kBAACjC,GAAA,EAAD,CAASgD,UAAQ,GACb,kBAACc,GAAA,EAAD,CAAMqD,cAAc,UAChB,kBAACrD,GAAA,EAAKC,OAAN,CAAajB,MAAO,GAChB,kBAAClB,GAAA,EAAD,CAAM9C,KAAK,WAAWuB,KAAK,QAAQsB,MAAM,UAE7C,kBAACmC,GAAA,EAAKC,OAAN,CAAajB,MAAO,IAChB,8BAAOxN,IAAM,OAACrC,QAAD,IAACA,OAAD,EAACA,EAAUoC,MAAME,OAAO,eAArC,OAAyDD,IAAM,OAACrC,QAAD,IAACA,OAAD,EAACA,EAAUoC,MAAME,OAAO,cAInG,kBAACyK,GAAA,EAAD,CAASgD,UAAQ,GACb,kBAACc,GAAA,EAAD,CAAMqD,cAAc,UAChB,kBAACrD,GAAA,EAAKC,OAAN,CAAajB,MAAO,GAChB,kBAAClB,GAAA,EAAD,CAAM9C,KAAK,SAASuB,KAAK,QAAQsB,MAAM,UAE3C,kBAACmC,GAAA,EAAKC,OAAN,CAAajB,MAAO,IAChB,qCACK7P,QADL,IACKA,OADL,EACKA,EAAU4O,MADf,YACwB5O,QADxB,IACwBA,OADxB,EACwBA,EAAU6O,WCsB3C9D,gBA/CmC,SAAC,GAAmB,IAAjBpK,EAAgB,EAAhBA,UACjD,OACI,kBAAC,WAAD,KACI,kBAACoM,GAAA,EAAD,CACIC,UAAU,SACVK,MAAO,CAAE+E,OAAQ,QACjBrC,SAAS,MACTjB,WAAS,EACT3D,UAAQ,EACRuD,MAAM,QANV,iBAOQ/N,QAPR,IAOQA,OAPR,EAOQA,EAAWC,OAPnB,aAOsC,OAATD,QAAS,IAATA,OAAA,EAAAA,EAAWC,QAAS,EAAI,SAAW,SAPhE,WASA,kBAACmM,GAAA,EAAD,CAASgD,UAAQ,GACb,kBAACpC,GAAA,EAAD,CAAMwG,SAAO,EAAC9E,SAAO,GAArB,OAEQ1O,QAFR,IAEQA,OAFR,EAEQA,EAAWkN,KAAI,SAAC/M,GACZ,OACI,kBAACuK,GAAA,EAAD,CAAM1J,IAAKb,EAASP,UAAW8M,MAAO,CAAEpB,SAAU,aAC7CnL,EAASR,QACL,kBAACkO,GAAA,EAAD,CACGnB,MAAO,CAAEpB,SAAU,YACnByC,MAAM,SACN0F,OAAO,SAHV,QAOL,kBAAClI,EAAA,EAAD,CAAOkB,KAAK,OAAOzB,IAAK7K,EAASL,OAAS,qBAC1C,kBAAC4K,GAAA,EAAKgD,QAAN,CAAc6F,cAAc,UACxB,kBAAC7I,GAAA,EAAK8B,OAAN,CAAa5B,GAAG,MACZ,kBAAC,IAAD,CAAME,GAAE,U5B7BpB,W4B6BoB,YAAyB3K,EAASP,YACrCO,EAASN,cAGjBM,EAASqI,WACN,kBAACkC,GAAA,EAAKgJ,MAAN,CAAYhH,MAAO,CAAEqB,MAAO,WAA5B,wBCE7B3D,gBA/BqD,SAACuJ,GACjE,IACMpF,EADelE,qBAAWH,IACM9J,cAC9BwT,EAAmCrF,EAAnCqF,aAAc5Q,EAAqBuL,EAArBvL,iBAWtB,OATA5H,qBAAU,WACFuY,EAAME,MAAMlV,OAAOS,IAAMuU,EAAME,MAAMlV,OAAOS,GAAGa,OAAS,GAC9C,uCAAG,sBAAAlD,EAAA,sEACH6W,EAAaD,EAAME,MAAMlV,OAAOS,IAD7B,2CAAH,oDAGVoS,KAEL,CAACoC,EAAcD,EAAME,MAAMlV,OAAOS,KAEjCmP,EAAiBrL,kBACV,kBAAC,GAAD,CAAalG,QAAQ,qBAG5B,kBAACkT,GAAA,EAAD,KACI,kBAACA,GAAA,EAAKC,OAAN,CAAajB,MAAO,IAChB,kBAAC,GAAD,CAAsB7P,SAAU2D,IAChC,kBAAC,GAAD,CAAoB3D,SAAU2D,IAC9B,kBAAC,GAAD,OAEJ,kBAACkN,GAAA,EAAKC,OAAN,CAAajB,MAAO,GAChB,kBAAC,GAAD,CAAuBlP,UAAS,OAAEgD,QAAF,IAAEA,OAAF,EAAEA,EAAkBhD,iB,mBCIvD8T,GAUT,WAAY/S,GAA8B,yBAT1C3B,QAAcwI,EAS2B,KARzC+F,MAAgB,GAQyB,KAPzCU,YAAsB,GAOmB,KANzCgF,SAAmB,GAMsB,KALzC5R,UAAcmG,EAK2B,KAJzCmM,UAAcnM,EAI2B,KAHzCsG,KAAe,GAG0B,KAFzCD,MAAgB,GAGZ7M,OAAO4S,OAAOjS,KAAMhB,GAChBA,GAASA,EAAMU,OACfM,KAAKgS,KAAOhT,EAAMU,OCxDjBwS,GAAqB,SAACxS,EAAYsS,GAC3C,IAAMG,EAAOzS,EAAK0S,cACZC,EAAQ3S,EAAK4S,WAAa,EAC1BC,EAAM7S,EAAK8S,UACXC,EAAU,UAAMN,EAAN,YAAcE,EAAd,YAAuBE,GACjCG,EAAaV,EAAKW,WAAa,IAAMX,EAAKY,aAAe,MAI/D,OAHW,IAAIrR,KAAKkR,EAAa,IAAMC,ICiB5BG,GAnBqB,SAAC,GAM9B,IALHjE,EAKE,EALFA,MACAzB,EAIE,EAJFA,MACA2F,EAGE,EAHFA,KACAhE,EAEE,EAFFA,YAEE,IADFC,KAAQC,EACN,EADMA,QAASpU,EACf,EADeA,MAEjB,OACI,kBAACqU,GAAA,EAAKC,MAAN,CAAYtU,MAAOoU,KAAapU,EAAOkY,KAAMA,EAAM3F,MAAOA,GACtD,2CAAWyB,EAAX,CAAkBE,YAAaA,KAC9BE,GAAWpU,GACR,kBAACkR,GAAA,EAAD,CAAOC,OAAK,EAACC,MAAM,OACdpR,K,UCUNmY,GAtBuB,SAAC,GAKH,IAJhCnE,EAI+B,EAJ/BA,MACAoE,EAG+B,EAH/BA,QACA7F,EAE+B,EAF/BA,MACA2B,EAC+B,EAD/BA,YAC+B,IAA/BC,KAAQC,EAAuB,EAAvBA,QAASpU,EAAc,EAAdA,MACjB,OACI,kBAACqU,GAAA,EAAKC,MAAN,CAAYtU,MAAOoU,KAAapU,EAAOuS,MAAOA,GAC1C,kBAAC8F,GAAA,EAAD,CAAQnE,YAAaA,EACjB9P,MAAO4P,EAAM5P,MACbgU,QAASA,EACTzF,SAAU,SAAC2F,EAAQ9X,GAAT,OAAkBwT,EAAMrB,SAASnS,EAAK4D,UAEnDgQ,GAAWpU,GACR,kBAACkR,GAAA,EAAD,CAAOC,OAAK,EAACC,MAAM,OACdpR,KCgBNuY,GA9BqB,SAAC,GAQ9B,IAPHvE,EAOE,EAPFA,MACAzB,EAME,EANFA,MAME,IALFzN,YAKE,aAJFsS,YAIE,SAHFlD,EAGE,EAHFA,YAGE,IAFFC,KAAQC,EAEN,EAFMA,QAASpU,EAEf,EAFeA,MAEf,qEACF,OACI,kBAACqU,GAAA,EAAKC,MAAN,CAAYtU,MAAOoU,KAAapU,EAAOuS,MAAOA,GAC1C,kBAAC,kBAAD,CACI2B,YAAaA,EACb9P,MAAO4P,EAAM5P,YAAS6G,EACtB0H,SAAUqB,EAAMrB,SAChB6F,OAAQxE,EAAMwE,OACdC,UAAW,SAACC,GAAD,OAAOA,EAAEC,kBACpB7T,KAAMA,EACNsS,KAAMA,IAGThD,GAAWpU,GACR,kBAACkR,GAAA,EAAD,CAAOC,OAAK,EAACC,MAAM,OACdpR,KC9BR4Y,GAAkB,CAC3B,CAAEvU,IAAK,SAAU4K,KAAM,SAAU7K,MAAO,UACxC,CAAEC,IAAK,UAAW4K,KAAM,UAAW7K,MAAO,WAC1C,CAAEC,IAAK,OAAQ4K,KAAM,OAAQ7K,MAAO,QACpC,CAAEC,IAAK,OAAQ4K,KAAM,OAAQ7K,MAAO,QACpC,CAAEC,IAAK,QAAS4K,KAAM,QAAS7K,MAAO,SACtC,CAAEC,IAAK,SAAU4K,KAAM,SAAU7K,MAAO,WCgBtCyU,GAAkBC,6BAAkB,CACtC9H,MAAO+H,sBAAW,CAAE1Y,QAAS,gCAC7BqR,YAAasH,6BACTD,sBAAW,eACXE,gCAAqB,EAArBA,CAAwB,CAAE5Y,QAAS,kDAF1B2Y,GAIbtC,SAAUqC,sBAAW,CAAE1Y,QAAS,mCAChCyE,KAAMiU,sBAAW,QACjB3B,KAAM2B,sBAAW,QACjBxH,KAAMwH,sBAAW,QACjBzH,MAAOyH,sBAAW,WAoIPtL,gBAjIiD,SAACuJ,GAC7D,IACMpF,EADelE,qBAAWH,IACM9J,cAC9BwT,EAAiBrF,EAAjBqF,aAH+D,EAIvCvC,mBAAS,IAAIyC,IAJ0B,oBAIhEzU,EAJgE,KAItDwW,EAJsD,KAMvEza,qBAAU,WACFuY,EAAME,MAAMlV,OAAOS,IACnBwU,EAAaD,EAAME,MAAMlV,OAAOS,IAC3BnB,MAAK,SAACoB,GACHwW,EAAY,IAAI/B,GAAmBzU,SAGhD,CAACuU,EAAcD,EAAME,MAAMlV,OAAOS,KAErC,IAAM0W,EAAuB,SAAC1W,GAC1B7D,EAAqBiC,KAArB,UpC5C2B,coC4C3B,YAA8D4B,KAG5D2W,EAAuB,WACrB1W,EAASD,GACT0W,EAAqBzW,EAASD,IAE9B7D,EAAqBiC,KpClDH,gBoCqDpBwY,EAAiB,uCAAG,WAAOvT,GAAP,iBAAA1F,EAAA,yDACc0F,EAA5BhB,KAA4BgB,EAAtBsR,MAAS1U,EADD,aACcoD,EADd,kBAEbhB,KAAOwU,GAAwBxT,EAAOhB,KAAOgB,EAAOsR,OACzD1U,EAASD,GAHS,gCAIMmP,EAAiB2H,aAAa7W,GAJpC,eAMdyW,EAAqBzW,EAASD,IANhB,wCASDmP,EAAiB4H,eAAe9W,GAT/B,SASZD,EATY,SAUD,KAAPA,IACNC,EAASD,GAAKA,EACd0W,EAAqB1W,IAZP,4CAAH,sDAiBvB,OACI,kBAAC8Q,GAAA,EAAD,KACI,kBAACA,GAAA,EAAKC,OAAN,CAAajB,MAAO,IAChB,kBAAC9C,GAAA,EAAD,CAASgC,UAAQ,GACb,kBAAC,KAAD,CAAW8D,SAAU8D,EACjBI,SAAUZ,GACVa,cAAehX,EACf8S,OAAQ,SAACwB,GAAD,OACJ,kBAAC3C,GAAA,EAAD,CACIkB,SAAUyB,EAAMvB,aAChBvD,QAASN,EAAiBrL,mBAC1B,kBAAC,KAAD,CACIgI,KAAK,QACL2F,YAAY,QACZ9P,MAAO1B,EAASsO,MAChB8E,UAAWmC,KAGf,kBAAC,KAAD,CACI1J,KAAK,cACL2F,YAAY,cACZD,KAAM,EACN7P,MAAO1B,EAASgP,YAChBoE,UAAW/B,KAGf,kBAAC,KAAD,CACIxF,KAAK,WACL2F,YAAY,WACZ9P,MAAO1B,EAASgU,SAChBZ,UAAWqC,GACXC,QAASQ,KAGb,kBAACvE,GAAA,EAAKvD,MAAN,CAAY6I,OAAO,SACf,kBAAC,KAAD,CAAO7D,UAAWyC,GACdhK,KAAK,OACL2F,YAAY,OACZpP,MAAM,EACNV,MAAO1B,EAASoC,OAGpB,kBAAC,KAAD,CAAOgR,UAAWyC,GACdhK,KAAK,OACL2F,YAAY,OACZkD,MAAM,EACNhT,MAAO1B,EAAS0U,QAIxB,kBAAC,KAAD,CACI7I,KAAK,OACL2F,YAAY,OACZ9P,MAAO1B,EAAS6O,KAChBuE,UAAWmC,KAGf,kBAAC,KAAD,CACI1J,KAAK,QACL2F,YAAY,QACZ9P,MAAO1B,EAAS4O,MAChBwE,UAAWmC,KAGf,kBAACzJ,EAAA,EAAD,CACImD,QAAQ,QACRuG,KAAK,SACLhG,QAASN,EAAiBpL,SAC1B0M,SAAUtB,EAAiBrL,mBAAqByQ,EAAM4C,SAAW5C,EAAMrB,SACvEjH,UAAQ,EAACD,QAAQ,WAErB,kBAACD,EAAA,EAAD,CACIY,QAASgK,EACTzH,QAAQ,QACRuG,KAAK,SACLhF,SAAUtB,EAAiBrL,kBAC3BkI,QAAQ,qB,sCvBvJhCnB,K,YAAAA,E,YAAAA,E,cAAAA,E,cAAAA,E,yBAAAA,Q,KA4BZ,IA8DeuM,GA9D0B,SAAC7C,GACtC,IAAM8C,EAAmB,CACrBpJ,QAASsG,EAAMtG,QACfjC,QAASuI,EAAMvI,QACfuC,MAAOgG,EAAMhG,MACb+I,QAAS/C,EAAM+C,QACfC,UAAWhD,EAAMgD,YAAa,EAC9BC,qBAAsBjD,EAAMiD,uBAAwB,EACpDC,mBAAoBlD,EAAMiD,uBAAwB,EAClDE,cAAenD,EAAMmD,gBAAiB,EACtCC,KAAMpD,EAAMoD,KACZtK,KAAMkH,EAAMlH,MAAQxC,GAAU+M,MAC9BC,YAAatD,EAAMsD,cAAe,EAClCC,QAASvD,EAAMuD,QACfC,OAAQxD,EAAMwD,OACdC,cAAezD,EAAMyD,eAsBzB,OACI,kBAACC,GAAA,EAAD,CACIV,UAAWF,EAASE,UACpBM,YAAaR,EAASQ,YACtBJ,mBAAoBJ,EAASI,mBAC7BD,qBAAsBH,EAASG,qBAC/BE,cAAeL,EAASK,cACxBrK,KAAMgK,EAAShK,KACfsK,KAAMN,EAASM,KACfI,OA5BO,SAACG,EAAuBna,GAC/BsZ,EAASU,QACTV,EAASU,OAAOG,EAAOna,IA2BvB+Z,QAvBQ,SAACI,EAAuBna,GACpCma,EAAMhC,iBACFmB,EAASS,SACTT,EAASS,QAAQI,EAAOna,IAqBxBia,cAjBc,SAACE,EAAuBna,GACtCsZ,EAASW,eACTX,EAASW,cAAcE,EAAOna,KAkB7BsZ,EAAS9I,OAAU,kBAAC0J,GAAA,EAAM7K,OAAP,KAAeiK,EAAS9I,OAE5C,kBAAC0J,GAAA,EAAM3J,QAAP,KACK+I,EAASrL,SAGbqL,EAASC,SAAY,kBAACW,GAAA,EAAME,QAAP,KAAgBd,EAASC,W,UwB5D5Cc,GAnBwB,SAAC7D,GACpC,OACI,kBAAC8D,GAAA,EAAD,CAASC,UAAQ,GACb,kBAACD,GAAA,EAAQjL,OAAT,KAAiBmH,EAAMhX,MAAMgb,YAE5BhE,EAAMhX,MAAMQ,MAAQiE,OAAOa,KAAK0R,EAAMhX,MAAMQ,MAAM8C,OAAS,GAEpD,kBAACwX,GAAA,EAAQzK,KAAT,KACK5L,OAAOqB,OAAOkR,EAAMhX,MAAMQ,KAAKG,QAAQsa,OAAO1K,KAAI,SAAC2K,EAAaC,GAC7D,OAAQ,kBAACL,GAAA,EAAQ/M,KAAT,CAAc1J,IAAK8W,GAAMD,OAKhDlE,EAAM/H,MAAS,kBAAC6L,GAAA,EAAQ/J,QAAT,KAAkBiG,EAAM/H,QC6ErCmM,GArFG,WACd,IACM7L,EADe7B,qBAAWH,IACErI,UAE5B2T,EAAkBC,6BAAkB,CACtC5N,SAAU6N,sBAAW,aACrBsC,SAAUtC,sBAAW,cAGnBuC,EAAqB,WACvB1c,EAAqBiC,KtCrBL,MsCwBpBpC,qBAAU,WAEF8Q,EAAagM,yBACbD,MAEL,CAAC/L,EAAagM,0BAEjB,IAAMC,EAAc,uCAAG,WAAO1V,GAAP,SAAA1F,EAAA,+EAETmP,EAAapG,MAAMrD,GAFV,OAGflH,EAAqBiC,KtC9BH,esC2BH,wFAML4a,KAAa,KAAIT,aANZ,wDAAH,sDAqDpB,OACI,kBAAC,WAAD,KACI,kBAAC,GAAD,CACIV,aAAa,EACb7L,QA9CA,kBAAC,KAAD,CACJ8G,SAAUiG,EACV/B,SAAUZ,EACVrD,OAAQ,SAACwB,GAAD,OACJ,kBAAC3C,GAAA,EAAD,KACI,kBAACxE,GAAA,EAAD,CACI5B,GAAG,KACHQ,QAAQ,0BACR2C,MAAM,OACN1B,UAAU,WAEd,kBAAC,KAAD,CAAOnB,KAAK,WACRuH,UAAWmC,GACX/D,YAAY,cAEhB,kBAAC,KAAD,CAAO3F,KAAK,WACR2J,KAAK,WACLpC,UAAWmC,GACX/D,YAAY,aAEf8C,EAAM0E,cAAgB1E,EAAM2E,sBACxB,kBAAC,GAAD,CAAc3b,MAAOgX,EAAM0E,YAAazM,KAAK,kCAGlD,kBAACT,EAAA,EAAD,CACI0D,QAAS8E,EAAMtB,WACfxC,SAAW8D,EAAM4C,UAAY5C,EAAM2E,sBAAyB3E,EAAMrB,SAClEvG,QAAS4H,EAAMvB,aACfhH,QAAQ,QACR2C,MAAM,OACN0B,OAAK,QAiBbyH,QAASe,EACTxL,KAAMxC,GAAUsO,SC5FnBC,GAAeC,4BACxB,SAAAzb,GAAO,OAAI,SAAA+D,GACP,GAAIA,IAAU,4CAA4C2X,KAAK3X,GAC3D,OAAO/D,KAGf,yBAGS2b,GAAkBF,4BAC3B,SAAAzb,GAAO,OAAI,SAAA+D,GACP,GAAIA,IAAU,gEAAgE2X,KAAK3X,GAC/E,OAAO/D,KAGf,mJCyGW4b,GA3GM,WACjB,IACM1M,EADe7B,qBAAWH,IACErI,UAK5B2T,EAAkBC,6BAAkB,CACtCoD,UAAWlD,6BACPD,sBAAW,cACXE,gCAAqB,EAArBA,CAAwB,CAAE5Y,QAAS,kDACnC8b,6BAAkB,GAAlBA,CAAsB,CAAE9b,QAAS,8CAH1B2Y,GAKXoD,SAAUpD,6BACND,sBAAW,aACXE,gCAAqB,EAArBA,CAAwB,CAAE5Y,QAAS,iDACnC8b,6BAAkB,GAAlBA,CAAsB,CAAE9b,QAAS,6CAH3B2Y,GAKVqD,MAAOrD,6BACHD,sBAAW,SACX8C,GAFG7C,GAIP9N,SAAU8N,6BACND,sBAAW,aACXE,gCAAqB,EAArBA,CAAwB,CAAE5Y,QAAS,iDACnC8b,6BAAkB,GAAlBA,CAAsB,CAAE9b,QAAS,6CAH3B2Y,GAKVqC,SAAUrC,6BACND,sBAAW,YACXE,gCAAqB,EAArBA,CAAwB,CAAE5Y,QAAS,gDACnC8b,6BAAkB,GAAlBA,CAAsB,CAAE9b,QAAS,4CACjC2b,GAJMhD,KAQRsD,EAAiB,uCAAG,WAAOxW,GAAP,SAAA1F,EAAA,+EAEZmP,EAAalG,SAASvD,GAFV,OAGlBlH,EAAqBiC,KxCjDT,KwC8CM,wFAKR4a,KALQ,+DAAH,sDA8DvB,OACI,kBAAC,GAAD,CACInB,aAAa,EACb7L,QAtDA,kBAAC,KAAD,CACI8G,SAAU+G,EACV7C,SAAUZ,EACVrD,OAAQ,SAACwB,GAAD,OACJ,kBAAC3C,GAAA,EAAD,KACI,kBAACxE,GAAA,EAAD,CACI5B,GAAG,KACHQ,QAAQ,WACR2C,MAAM,OACN1B,UAAU,WAEd,kBAAC,KAAD,CAAOnB,KAAK,YACRuH,UAAWmC,GACX/D,YAAY,eAEhB,kBAAC,KAAD,CAAO3F,KAAK,WACRuH,UAAWmC,GACX/D,YAAY,cAEhB,kBAAC,KAAD,CAAO3F,KAAK,QACRuH,UAAWmC,GACX/D,YAAY,UAEhB,kBAAC,KAAD,CAAO3F,KAAK,WACRuH,UAAWmC,GACX/D,YAAY,cAEhB,kBAAC,KAAD,CAAO3F,KAAK,WACR2J,KAAK,WACLpC,UAAWmC,GACX/D,YAAY,aAEf8C,EAAM0E,cAAgB1E,EAAM2E,sBACxB,kBAAC,GAAD,CAAc3b,MAAOgX,EAAM0E,cAGhC,kBAAClN,EAAA,EAAD,CACI0D,QAAS8E,EAAMtB,WACfxC,SAAW8D,EAAM4C,UAAY5C,EAAM2E,sBAAyB3E,EAAMrB,SAClEvG,QAAS4H,EAAMvB,aACfhH,QAAQ,WACR2C,MAAM,OACN0B,OAAK,QAarByH,QAlGQ,WACZ3b,EAAqBiC,KxCfL,MwCiHZiP,KAAMxC,GAAUsO,Q,8BChDbnO,gBA/DO,WAAO,IAAD,EAClB8O,EAAe7O,qBAAWH,IADR,EAEgCmH,oBAAS,GAFzC,oBAEjB8H,EAFiB,KAEKC,EAFL,OAGuCF,EAAa3R,aAApEI,EAHgB,EAGhBA,YAAaZ,EAHG,EAGHA,OAAQC,EAHL,EAGKA,SAAUqS,EAHf,EAGeA,oBAEjCC,EAAoB,uCAAG,sBAAAvc,EAAA,yDACzBqc,GAAwB,IACpBzR,EAAaa,UAFQ,gCAGfxB,EAASW,EAAa/H,WAHP,6CAKfmH,EAAOY,EAAa/H,WALL,OAMzBwZ,GAAwB,GANC,2CAAH,qDAS1B,OACI,kBAAChN,GAAA,EAAD,KACI,kBAAC8D,GAAA,EAAD,KACI,kBAACA,GAAA,EAAKC,OAAN,CAAajB,MAAO,IAChB,kBAACxE,GAAA,EAAK+C,MAAN,KACI,kBAAC/C,GAAA,EAAD,KACI,kBAACA,GAAA,EAAKa,MAAN,CAAYC,QAAM,EAACiB,KAAK,QAAQzB,KAAgB,OAAXrD,QAAW,IAAXA,GAAA,UAAAA,EAAazB,iBAAb,eAAwBzI,MAAO,qBACpE,kBAACiN,GAAA,EAAKgD,QAAN,CAAc6F,cAAc,UACxB,kBAAC/G,GAAA,EAAD,CAAQ5B,GAAG,MAAX,OAAiBjD,QAAjB,IAAiBA,OAAjB,EAAiBA,EAAa9H,iBAK9C,kBAACqQ,GAAA,EAAKC,OAAN,CAAajB,MAAO,GAChB,kBAACqK,GAAA,EAAU9L,MAAX,CAAiB6I,OAAQ,GACrB,kBAACiD,GAAA,EAAD,CAAWC,MAAM,YAAYzY,MAAK,OAAE4G,QAAF,IAAEA,OAAF,EAAEA,EAAaY,iBACjD,kBAACgR,GAAA,EAAD,CAAWC,MAAM,YAAYzY,MAAK,OAAE4G,QAAF,IAAEA,OAAF,EAAEA,EAAa8R,kBAGjD9R,IAAgB0R,EAER,kBAAC,WAAD,KACI,kBAACK,GAAA,EAAD,MACA,kBAACC,GAAA,EAAD,CAAQC,SAAS,QACb,kBAAC,WAAD,KACI,kBAACD,GAAA,EAAOjM,QAAR,CAAgBmM,QAAM,GAClB,kBAAC1O,EAAA,EAAD,CACIY,QAAS,kBAAMuN,KACflO,QAASzD,EAAaa,UAAY,WAAa,SAC/CqG,QAASsK,EACT5M,UAAW5E,EAAaa,UAAY,WAAa,WACjDiH,OAAK,EAAC3B,OAAK,KAPvB,IASI,kBAAC6L,GAAA,EAAOjM,QAAR,CAAgBoM,SAAO,EAACpN,MAAO,CAAEwC,MAAO,SACpC,kBAAC/D,EAAA,EAAD,CACIC,QAASzD,EAAaa,UAAY,YAAc,gBAChDiH,OAAK,EAAC1B,MAAM,aAKhC,S,8BCzD1BgM,GAAiB,CACnBtI,OAAQ,aACR5E,YAAa,OACbmN,aAAc,MACdC,WAAY,OACZ5N,UAAW,SACX2G,OAAQ,SAGNkH,GAAiB,CACnBrN,YAAa,QAgCFsN,GAzByB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACjCC,EAASC,uBAAY,SAAAC,GACvB,IAAMC,EAAkBD,EAAcrN,KAAI,SAAC/F,GAEvC,OADA9C,QAAQkC,WAAWY,GACZ,CACHA,KAAMA,EACNsT,QAASC,IAAIC,gBAAgBxT,OAGrC9C,QAAQkC,IAAIiU,GACZJ,EAASI,KACV,CAACJ,IAXkD,EAaAQ,aAAY,CAAEP,WAA5DQ,EAb8C,EAa9CA,aAAcC,EAbgC,EAahCA,cAAeC,EAbiB,EAajBA,aAErC,OACI,yCAASF,IAAT,CACInO,MAAOqO,EAAY,6BAAQhB,IAAmBG,IAAmBH,KACjE,0BAAWe,KACX,kBAAC9M,GAAA,EAAD,CAAM9C,KAAK,SAASuB,KAAK,SACzB,kBAACD,GAAA,EAAD,CAAQpB,QAAQ,sB,qBCGb4P,I,OAlCwB,SAACrH,GACpC,IAAMsH,EAAUC,iBAAgB,MAchC,OACI,kBAAC,KAAD,CACIrS,IAAKoS,EACLjQ,IAAK2I,EAAMwH,aACXzO,MAAO,CAAEsG,OAAQ,IAAK9D,MAAO,QAE7BkM,YAAa,EACbX,QAAQ,eACRY,QAAQ,EACRC,SAAU,EACVC,SAAS,OACTC,UAAU,EACVC,gBAAgB,EAChBC,kBAAkB,EAClBC,KA1BU,WACd,GAAIV,GAAWA,EAAQpV,QAAS,CAE5B,GAAkD,qBAAvCoV,EAAQpV,QAAQ+V,mBACvB,OAEJX,EAAQpV,QAAQ+V,mBAAmBC,QAAO,SAACC,GACvCnI,EAAMoI,SAASD,KAChB,oBC4CAE,GAvDuB,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAAkB,EAC7B5K,mBAAgB,IADa,oBAChDmJ,EADgD,KACzCJ,EADyC,OAE7B/I,mBAAsB,MAFO,oBAEhDvR,EAFgD,KAEzCic,EAFyC,OAGjB1K,oBAAS,GAHQ,oBAGhD6K,EAHgD,KAGnCC,EAHmC,KAKjDC,EAAa,uCAAG,sBAAArf,EAAA,6DAClBof,GAAe,GADG,SAEZF,EAAYnc,GAFA,OAGlBqc,GAAe,GAHG,2CAAH,qDAgBnB,OAVA/gB,qBAAU,WAGN,OAAO,WACHof,EAAM1Z,SAAQ,SAACqG,GACXuT,IAAI2B,gBAAgBlV,EAAKsT,eAGlC,CAACD,IAGA,kBAACtK,GAAA,EAAD,KACI,kBAACA,GAAA,EAAKC,OAAN,CAAajB,MAAO,GAChB,kBAAC1C,GAAA,EAAD,CAAQ8P,KAAG,EAACvO,MAAM,OAAO3C,QAAQ,uBACjC,kBAAC,GAAD,CAAegP,SAAUA,KAE7B,kBAAClK,GAAA,EAAKC,OAAN,CAAajB,MAAO,IAEpB,kBAACgB,GAAA,EAAKC,OAAN,CAAajB,MAAO,GAChB,kBAAC1C,GAAA,EAAD,CAAQ8P,KAAG,EAACvO,MAAM,OAAO3C,QAAQ,0BAE7BoP,GAASA,EAAMva,OAAS,GACxB,kBAAC,GAAD,CAAc8b,SAAUA,EAAUZ,aAAcX,EAAM,GAAGC,WAGjE,kBAACvK,GAAA,EAAKC,OAAN,CAAajB,MAAO,IAEpB,kBAACgB,GAAA,EAAKC,OAAN,CAAajB,MAAO,GAChB,kBAAC1C,GAAA,EAAD,CAAQ8P,KAAG,EAACvO,MAAM,OAAO3C,QAAQ,8BAE7BoP,GAASA,EAAMva,OAAS,GACvB,kBAAC,WAAD,KACG,yBAAKsM,UAAU,cAAcG,MAAO,CAAEgD,UAAW,IAAK6M,SAAU,WAAhE,KACA,kBAACpR,EAAA,EAAOsC,MAAR,CAAc6I,OAAQ,GAClB,kBAACnL,EAAA,EAAD,CAAQ0D,QAASqN,EAAanQ,QAAS,kBAAMqQ,KAAiBtQ,KAAK,QAAQT,UAAQ,IACnF,kBAACF,EAAA,EAAD,CAAQ0E,SAAUqM,EAAanQ,QAAS,kBAAMqO,EAAS,KAAKtO,KAAK,eCqC9E1B,gBAtFM,WACjB,IADuB,EACFC,qBAAWH,IACkE3C,aAA1FI,EAFe,EAEfA,YAAa0R,EAFE,EAEFA,oBAAqB4C,EAFnB,EAEmBA,YAAa7T,EAFhC,EAEgCA,aAAcoU,EAF9C,EAE8CA,YAF9C,EAGiBnL,oBAAS,GAH1B,oBAGhBoL,EAHgB,KAGFC,EAHE,OAI6BrL,oBAAS,GAJtC,oBAIhBsL,EAJgB,KAIIC,EAJJ,OAKuBvL,oBAAS,GALhC,oBAKhBwL,EALgB,KAKCC,EALD,OAMKzL,mBAAS,IANd,oBAMhB0L,EANgB,KAMRC,EANQ,KAgBjBC,EAAoB,uCAAG,WAAOhV,GAAP,SAAAlL,EAAA,sEACnBkf,EAAYhU,GADO,OAEzByU,GAAgB,GAFS,2CAAH,sDAKpBQ,EAAqB,uCAAG,WAAO7H,EAA4C/N,GAAnD,SAAAvK,EAAA,6DAC1BigB,EAAU3H,EAAE8H,cAAcjS,MAC1B0R,GAAsB,GAFI,SAGpBxU,EAAad,GAHO,OAI1BsV,GAAsB,GAJI,2CAAH,wDAOrBQ,EAAoB,uCAAG,WAAO/H,EAA4C/N,GAAnD,SAAAvK,EAAA,6DACzBigB,EAAU3H,EAAE8H,cAAcjS,MAC1B4R,GAAmB,GAFM,SAGnBN,EAAYlV,GAHO,OAIzBwV,GAAmB,GAJM,2CAAH,wDAO1B,OACI,kBAACO,GAAA,EAAIC,KAAL,KACI,kBAACpN,GAAA,EAAD,KACI,kBAACA,GAAA,EAAKC,OAAN,CAAajB,MAAO,GAAIxC,MAAO,CAAE6Q,cAAe,IAC5C,kBAAC/Q,GAAA,EAAD,CAAQ8B,QAAQ,OAAOxC,KAAK,QAAQV,QAAQ,WAExCiO,GACA,kBAAClO,EAAA,EAAD,CAAQY,QAAS,WA7BjC2Q,GAAiBD,IA6BoCnO,QAAQ,QAAQqE,SAAO,EACxD7E,OAAK,EAAC1C,QAASqR,EAAe,SAAW,eAGrD,kBAACvM,GAAA,EAAKC,OAAN,CAAajB,MAAO,IACfuN,EACI,6BAAK,kBAAC,GAAD,CAAaR,YAAagB,KAC/B,kBAACO,GAAA,EAAK/P,MAAN,CAAYgQ,YAAa,GAElB9V,GAAeA,EAAYO,QAC3BP,EAAYO,OAAOgF,KAAI,SAAAjF,GAAU,IAAD,IAC5B,OACI,kBAACuV,GAAA,EAAD,CAAMxc,IAAKiH,EAAM7I,IACb,kBAACoe,GAAA,EAAK9P,QAAN,KACI,kBAACnC,EAAA,EAAD,CAAOP,IAAK/C,EAAMxK,OAEtB,kBAAC+f,GAAA,EAAK9P,QAAN,CAAcgQ,OAAK,EAAChR,MAAO,CAAE0G,QAAS,IAClC,kBAACjI,EAAA,EAAOsC,MAAR,CAAcgC,OAAK,EAAC6G,OAAQ,GACxB,kBAACnL,EAAA,EAAD,CACID,KAAMjD,EAAM7I,GACZ2M,QAAS,SAACsJ,GAAD,OAAO6H,EAAsB7H,EAAGpN,EAAM7I,KAC/CyP,QAAS8N,GAAsBI,IAAW9U,EAAM7I,GAChDyQ,UAAU,UAAAlI,EAAYzB,iBAAZ,eAAuB9G,MAAO6I,EAAM7I,GAC9C0O,OAAK,EAACzC,UAAQ,EAACD,QAAQ,SAE3B,kBAACD,EAAA,EAAD,CACID,KAAMjD,EAAM7I,GACZ2M,QAAS,SAACsJ,GAAD,OAAO+H,EAAqB/H,EAAGpN,EAAM7I,KAC9CyP,QAASgO,GAAmBE,IAAW9U,EAAM7I,GAC7CyQ,UAAU,UAAAlI,EAAYzB,iBAAZ,eAAuB9G,MAAO6I,EAAM7I,GAC9C0O,OAAK,EAAC4J,UAAQ,EAAC5L,KAAK,uBCc7D1B,gBA3E2B,SAAC,GAAiD,IAA/CuT,EAA8C,EAA9CA,cAAehW,EAA+B,EAA/BA,YAAaiW,EAAkB,EAAlBA,YAAkB,EACvDvM,oBAAS,GAD8C,oBAChFlO,EADgF,KACtEqB,EADsE,KAGjFqZ,EAAsB,uCAAG,WAAO/W,GAAP,SAAA/J,EAAA,sEAEvByH,GAAY,GAFW,SAGjBmZ,EAAc7W,GAHG,OAIvB8W,GAAY,GACZpZ,GAAY,GALW,yFAOb4T,KAPa,gEAAH,sDAWtB5C,EAAkBC,6BAAkB,CACtCoD,UAAWlD,6BACPD,sBAAW,cACXE,gCAAqB,EAArBA,CAAwB,CAAE5Y,QAAS,kDACnC8b,6BAAkB,GAAlBA,CAAsB,CAAE9b,QAAS,8CAH1B2Y,GAKXoD,SAAUpD,6BACND,sBAAW,aACXE,gCAAqB,EAArBA,CAAwB,CAAE5Y,QAAS,iDACnC8b,6BAAkB,GAAlBA,CAAsB,CAAE9b,QAAS,6CAH3B2Y,GAKVqD,MAAOrD,6BACHD,sBAAW,SACX8C,GAFG7C,GAIPmI,IAAKhF,6BAAkB,IAAlBA,CAAuB,CAAE9b,QAAS,0CAG3C,OAAK2K,EAKD,kBAAC,KAAD,CACIuK,SAAU2L,EACVzH,SAAUZ,EACVa,cAAe1O,EACfwK,OAAQ,SAACwB,GAAD,OACJ,kBAAC3C,GAAA,EAAD,CAAMkB,SAAUyB,EAAMvB,cAClB,kBAAC,KAAD,CAAOlH,KAAK,YACRuH,UAAWmC,GACX7T,MAAK,OAAE4G,QAAF,IAAEA,OAAF,EAAEA,EAAakR,UACpBhI,YAAY,eAEhB,kBAAC,KAAD,CAAO3F,KAAK,WACRuH,UAAWmC,GACX7T,MAAK,OAAE4G,QAAF,IAAEA,OAAF,EAAEA,EAAaoR,SACpBlI,YAAY,cAEhB,kBAAC,KAAD,CAAO3F,KAAK,QACRuH,UAAWmC,GACX7T,MAAK,OAAE4G,QAAF,IAAEA,OAAF,EAAEA,EAAaqR,MACpBnI,YAAY,UAEhB,kBAAC,KAAD,CAAO3F,KAAK,MACRuH,UAAW/B,GACX3P,MAAK,OAAE4G,QAAF,IAAEA,OAAF,EAAEA,EAAamW,IACpBjN,YAAY,QAEhB,kBAAC1F,EAAA,EAAD,CACImD,QAAQ,QACRuG,KAAK,SACLhG,QAAS1L,EACT0M,SAAU8D,EAAM4C,SAAW5C,EAAMrB,SACjCjH,UAAQ,EAACD,QAAQ,eAnC1B,kBAACiS,GAAA,EAAIC,KAAL,qCCGAS,GAhDM,WACjB,IADuB,EACF1T,qBAAWH,IACyC3C,aAAjEI,EAFe,EAEfA,YAAa0R,EAFE,EAEFA,oBAAqBsE,EAFnB,EAEmBA,cAFnB,EAGStM,oBAAS,GAHlB,oBAGhB2M,EAHgB,KAGNJ,EAHM,KAKvB,OACI,kBAACP,GAAA,EAAIC,KAAL,KACI,kBAACpN,GAAA,EAAD,KACI,kBAACA,GAAA,EAAKC,OAAN,CAAajB,MAAO,IAChB,kBAAC1C,GAAA,EAAD,CACI8B,QAAQ,OACRxC,KAAK,OACLV,QAAO,uBAAWzD,QAAX,IAAWA,OAAX,EAAWA,EAAa9H,eAElCwZ,GACG,kBAAClO,EAAA,EAAD,CACImD,QAAQ,QACRR,OAAK,EACL1C,QAAS4S,EAAW,SAAW,eAC/BjS,QAAS,kBAAM6R,GAAaI,OAIxC,kBAAC9N,GAAA,EAAKC,OAAN,CAAajB,MAAO,IACf8O,EACG,kBAAC,GAAD,CACIJ,YAAaA,EACbD,cAAeA,EACfhW,YAAaA,IAEb,kBAAC6V,GAAA,EAAD,CAAM/N,OAAK,GACP,kBAAC+N,GAAA,EAAK9P,QAAN,KACI,kBAAC8P,GAAA,EAAK5P,YAAN,YACKjG,QADL,IACKA,OADL,EACKA,EAAamW,MAGtB,kBAACN,GAAA,EAAK9P,QAAN,CAAcgQ,OAAK,GACf,kBAAC1P,GAAA,EAAD,CAAM9C,KAAK,SADf,OAEKvD,QAFL,IAEKA,OAFL,EAEKA,EAAaqR,YCjC5CiF,GAAQ,CACV,CAAEC,SAAU,gBAAiBC,KAAM,CAAEnd,IAAK,iBAC1C,CAAEkd,SAAU,cAAeC,KAAM,CAAEnd,IAAK,eACxC,CAAEkd,SAAU,UAAWC,KAAM,CAAEnd,IAAK,YA0EzBoJ,gBAvEO,WAAO,IAAD,EAC0BiH,oBAAS,GADnC,oBACjB+M,EADiB,KACEC,EADF,OAENhU,qBAAWH,IACyC3C,aAA9D+W,EAHgB,EAGhBA,mBAAoB3W,EAHJ,EAGIA,YAAalB,EAHjB,EAGiBA,eAEzCrL,qBAAU,YACI,uCAAG,sBAAA2B,EAAA,6DACTshB,GAAqB,GADZ,SAEHC,EAAmB3W,EAAa/H,UAAW,IAFxC,OAGTye,GAAqB,GAHZ,2CAAH,qDAKV7M,KACD,CAAC8M,EAAoB3W,IAoBxB,OACI,kBAAC0V,GAAA,EAAIC,KAAL,CAAUzO,QAASuP,GACf,kBAAClO,GAAA,EAAD,KACI,kBAACA,GAAA,EAAKC,OAAN,CAAajB,MAAO,IAChB,kBAAC1C,GAAA,EAAD,CAAQ8B,QAAQ,OAAOxC,KAAK,WAAWV,QAAS,gBAEpD,kBAAC8E,GAAA,EAAKC,OAAN,CAAajB,MAAO,IAChB,kBAACmO,GAAA,EAAD,CACIY,MAAOA,GACPM,KAAM,CAAEpQ,WAAW,EAAMxC,UAAU,GACnC6S,YAAa,SAACnJ,EAAGlY,GAAJ,OA5BT,SAACshB,EAAiDthB,GAEtE,IAAI0D,EACJ,OAFAwd,GAAqB,GAEblhB,EAAKuhB,aACT,KAAK,EACD7d,EAAY,OACZ,MACJ,KAAK,EACDA,EAAY,UACZ,MACJ,QACIA,EAAY,SAGpByd,EAAmB3W,EAAa/H,UAAWiB,GACtC5C,MAAK,WAAQogB,GAAqB,MAaGM,CAAgBtJ,EAAGlY,MAEjD,6BACA,kBAACqgB,GAAA,EAAK/P,MAAN,CAAYgQ,YAAa,GACpBhX,GAAkBA,EAAeyG,KAAI,SAAC7N,GAAD,OAClC,kBAACme,GAAA,EAAD,CACI5S,GAAIiB,IACJf,GAAE,UhD1DJ,cgD0DI,YAAiCzL,EAASyF,YAC5C9D,IAAK3B,EAASyF,YACd,kBAACyG,EAAA,EAAD,CACIP,IAAG,iCAA4B3L,EAASgU,SAArC,QACH3G,MAAO,CAAEgD,UAAW,IAAKkP,UAAW,WAExC,kBAACpB,GAAA,EAAK9P,QAAN,KACI,kBAAC8P,GAAA,EAAKhR,OAAN,CAAaH,UAAU,UAAUhN,EAASsO,OAC1C,kBAAC6P,GAAA,EAAKqB,KAAN,CAAWxS,UAAU,UACjB,6BAAM3K,IAAOrC,EAASoC,MAAME,OAAO,gBACnC,6BAAMD,IAAOrC,EAASoC,MAAME,OAAO,wBC9C5DyI,gBAjBuB,SAAC,GAAiC,IAAD,EAA9BtD,EAA8B,EAA9BA,QAASgY,EAAqB,EAArBA,eAC9C,OACI,kBAACtB,GAAA,EAAD,CAAM5S,GAAIiB,IAAMf,GAAE,UjDJM,WiDIN,YAAmChE,EAAQlH,YACzD,kBAAC2L,EAAA,EAAD,CAAOP,KAAK,UAAAlE,EAAQZ,iBAAR,eAAmBzI,MAAO,qBACtC,kBAAC+f,GAAA,EAAK9P,QAAN,KACI,kBAAC8P,GAAA,EAAKhR,OAAN,KAAc1F,EAAQjH,cAE1B,kBAAC2d,GAAA,EAAK9P,QAAN,CAAcgQ,OAAK,GACf,6BACI,kBAAC1P,GAAA,EAAD,CAAM9C,KAAK,SACI,UAAd4T,EAAoBhY,EAAQyB,eAAsBzB,EAAQ2S,sBCqBhErP,gBArCU,WACrB,IAD2B,EACTC,qBAAWH,IAC+D3C,aAApFI,EAFmB,EAEnBA,YAAagB,EAFM,EAENA,mBAAoBhC,EAFd,EAEcA,UAAW8B,EAFzB,EAEyBA,0BAEpD,OACI,kBAAC4U,GAAA,EAAIC,KAAL,CAAUzO,QAASlG,GACf,kBAACuH,GAAA,EAAD,KACI,kBAACA,GAAA,EAAKC,OAAN,CAAajB,MAAO,IAChB,kBAAC1C,GAAA,EAAD,CACI8B,QAAQ,OACRxC,KAAK,OACLV,QAC6B,UAChBzD,EAAa9H,YADtB4I,EAAyB,+DAMrC,kBAACyH,GAAA,EAAKC,OAAN,CAAajB,MAAO,IAChB,kBAACsO,GAAA,EAAK/P,MAAN,CAAYgQ,YAAa,GAEjB9W,GAAaA,EAAU1G,OAAS,IAAhC,OACA0G,QADA,IACAA,OADA,EACAA,EAAWuG,KAAI,SAACpG,GACZ,OAAO,kBAAC,GAAD,CACH9F,IAAK8F,EAAQlH,UACbkH,QAASA,EACTgY,eAAgBrW,eCJrC2B,gBAXQ,WACnB,IAAM6B,EAAkB5B,qBAAWH,IACnC,OACI,kBAACmT,GAAA,EAAD,CAAKkB,KAAM,CAAE9O,OAAO,EAAMnD,UAAU,GAChCyS,aAAa,QACbd,MAbQ,CAChB,CAAEC,SAAU,QAAS/L,OAAQ,kBAAM,kBAAC,GAAD,QACnC,CAAE+L,SAAU,SAAU/L,OAAQ,kBAAM,kBAAC,GAAD,QACpC,CAAE+L,SAAU,aAAc/L,OAAQ,kBAAM,kBAAC,GAAD,QACxC,CAAE+L,SAAU,YAAa/L,OAAQ,kBAAM,kBAAC,GAAD,QACvC,CAAE+L,SAAU,YAAa/L,OAAQ,kBAAM,kBAAC,GAAD,SAS/BqM,YAAa,SAACC,EAAGthB,GAAJ,OAAuB8O,EAAgB1E,aAAayX,aAAa7hB,EAAKuhB,mBCkBhFtU,gBA1BuB,SAACuJ,GACnC,IACQsL,EADa5U,qBAAWH,IACQ3C,aAAhC0X,eAFqC,EAGG5N,oBAAS,GAHZ,oBAGtC6N,EAHsC,KAGpBC,EAHoB,KAe7C,OAVA/jB,qBAAU,YACI,uCAAG,sBAAA2B,EAAA,6DACToiB,GAAoB,GADX,SAEHF,EAAetL,EAAME,MAAMlV,OAAOiB,WAF/B,OAGTuf,GAAoB,GAHX,2CAAH,qDAKV3N,KACD,CAACyN,EAAgBtL,EAAME,MAAMlV,OAAOiB,YAGnCsf,EACO,kBAAC,GAAD,CAAaliB,QAAQ,oBAG5B,kBAAC,WAAD,KACI,kBAAC,GAAD,MACA,kBAAC,GAAD,UChBGoiB,GAhBY,WACvB,OACI,kBAAChT,GAAA,EAAD,CAASyE,aAAW,GAChB,kBAACrE,GAAA,EAAD,CAAQV,MAAI,GACR,kBAACkC,GAAA,EAAD,CAAM9C,KAAK,WADf,4DAIA,kBAACkB,GAAA,EAAQiT,OAAT,KACI,kBAAClU,EAAA,EAAD,CAAQP,GAAIiB,IAAMf,GrDLJ,cqDKkC6H,SAAO,GAAvD,8BCaDvI,gBAZuB,SAAC,GAAuC,IAA1BkV,EAAyB,EAApC7M,UAAyB8M,EAAW,8BAEjErH,EADa7N,qBAAWH,IACiBrI,UAAzCqW,wBACR,OACI,kBAAC,IAAD,iBACQqH,EADR,CAEIpN,OAAQ,SAACwB,GAAD,OAAWuE,EAA0B,kBAACoH,EAAc3L,GAAY,kBAAC,IAAD,CAAU7I,GtDfrE,kBuDuEV0U,eAAWpV,aAxDiB,SAAC,GAAkB,IAAhBqV,EAAe,EAAfA,SACpCvG,EAAe7O,qBAAWH,IAC1B/E,EAAc+T,EAAa/T,YACzBU,EAAYqT,EAAarX,UAAzBgE,QAeR,OAbAzK,qBAAU,YACa+J,EAAYE,WAS3BF,EAAYua,eANE,uCAAG,sBAAA3iB,EAAA,sEACP8I,IAAU8Z,SAAQ,kBAAMxa,EAAYua,kBAD7B,2CAAH,oDAGdE,KAIL,CAAC/Z,EAASV,IAERA,EAAYQ,UAMb,kBAAC,IAAMka,SAAP,KACI,kBAAC,IAAD,CAAgBvU,SAAS,iBAGzB,kBAAC,IAAD,CAAO6B,KvD5CK,IuD4CqBpC,OAAK,EAAC0H,UAAWqN,KAElD,kBAAC,IAAD,CAAO3S,KAAM,QAASgF,OAAQ,kBAC1B,kBAAC,IAAM0N,SAAP,KACI,kBAAC,GAAD,MACA,kBAACpV,EAAA,EAAD,CAAWiC,MAAO,CAAEyC,UAAW,QAC3B,kBAAC,IAAD,KACI,kBAAC,GAAD,CAAahC,KvD/CX,cuD+C2CpC,OAAK,EAAC0H,UAAWsN,KAC9D,kBAAC,GAAD,CAAa5S,KAAI,UvDjDV,cuDiDU,QAA0CpC,OAAK,EAAC0H,UAAWuN,KAG5E,kBAAC,GAAD,CAAahf,IAAKye,EAASze,IAAK+J,OAAK,EACjCoC,KAAM,CvDnDH,kBuDmDG,UvDlDH,kBuDkDG,SACNsF,UAAWwN,KAEf,kBAAC,GAAD,CAAa9S,KAAI,UvDpDb,WuDoDa,eAA8CsF,UAAWyN,KAE1E,kBAAC,IAAD,CAAO/S,KvD5DV,SuD4DqCsF,UAAWsF,KAC7C,kBAAC,IAAD,CAAO5K,KvD5DP,YuD4DqCsF,UAAWmG,KAChD,kBAAC,IAAD,CAAOnG,UAAW2M,YA5B/B,kBAAC,GAAD,CAAapiB,QAAQ,+BCtBpCmjB,MAEAC,IAASjO,OACL,kBAAC,IAAD,CAAQkO,QAAS9kB,GACb,kBAAC,IAAMskB,SAAP,KACI,kBAAC5kB,EAAD,MACA,kBAAC,GAAD,QAGRqlB,SAASC,cAAc,Y","file":"static/js/main.2c01c54f.chunk.js","sourcesContent":["import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n    const { pathname } = useLocation();\r\n    //Display top of the form as soon as location(URL) changes. \r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n    }, [pathname]);\r\n\r\n    return null;\r\n}","import { createBrowserHistory } from 'history';\r\nexport default createBrowserHistory();","export const BASE_SERVICE_URL = process.env.REACT_APP_API_BASE_URL ?? '';\r\nexport const FACEBOOK_APP_ID = process.env.FACEBOOK_APP_ID!;\r\n\r\n//Navigation Link\r\nexport const NAV_HOME = '/'; \r\nexport const NAV_LOGIN = '/Login'; \r\nexport const NAV_REGISTER = '/Register'; \r\nexport const NAV_ACTIVITY_DETAIL = '/activities'; \r\nexport const NAV_ACTIVITIES = '/activities'; \r\nexport const NAV_CREATE_ACTIVITY = '/createactivity'; \r\nexport const NAV_MANAGE_ACTIVITY = '/manageactivity'; \r\nexport const NAV_USER_PROFILE = '/profile'; \r\nexport const NAV_NOT_FOUND = '/notfound'; \r\n\r\n//Security\r\nexport const AUTH_TOKEN_NAME = 'SN_JWT_Token';\r\nexport const AUTH_REFRESH_TOKEN_NAME = 'SN_JWT_Refresh_Token';\r\n\r\n//Followers/Following\r\nexport const PREDICATE_FOLLOWERS = 'followers';\r\nexport const PREDICATE_FOLLOWINGS = 'followings';\r\nexport const TAB_INDEX_FOLLOWERS = 3;\r\nexport const TAB_INDEX_FOLLOWINGS = 4;\r\nexport const PREDICATE_PAST = 'past';\r\nexport const PREDICATE_HOSTING = 'hosting';\r\n\r\n\r\n//\r\nexport const PREDICATE_ALL = 'all';\r\nexport const PREDICATE_IS_GOING = 'isGoing';\r\nexport const PREDICATE_IS_HOST = 'isHost';\r\nexport const PREDICATE_START_DATE = 'startDate';","import axios, { AxiosResponse } from 'axios';\r\nimport createBrowserHistory from '../utils/createBrowserHistory';\r\nimport * as constants from '../utils/constants';\r\nimport { toast } from 'react-toastify';\r\nimport { IUser } from '../models/IUser';\r\n\r\n//const SLEEP_TIME = 100;\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: `${constants.BASE_SERVICE_URL}/api/`,\r\n    withCredentials: true,\r\n    timeout: 30000\r\n});\r\n\r\naxiosInstance.interceptors.request.use((config) => {\r\n    //Add JWT Authorization Token to request if exists.\r\n    const token: string | null = window.localStorage.getItem(constants.AUTH_TOKEN_NAME);\r\n    if (token) {\r\n        config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n}, error => {\r\n    return Promise.reject(error);\r\n});\r\n\r\naxiosInstance.interceptors.response.use((response) => response, async (error) => {\r\n    if (error.message === 'Network Error' && !error.response) {\r\n        toast.error('Network error server is down for maintenance, Please try after sometime');\r\n        return;\r\n    }\r\n    const originalRequest = error.config;\r\n    const { config, data, status } = error.response;\r\n    if (status === 400) {\r\n        if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n            createBrowserHistory.push(constants.NAV_NOT_FOUND);\r\n        }\r\n        else {\r\n            toast.error('Bad request, Please check data');\r\n        }\r\n    }\r\n    else if (status === 401) {\r\n        if (originalRequest.url.endsWith('refresh')) {\r\n            window.localStorage.removeItem(constants.AUTH_TOKEN_NAME);\r\n            window.localStorage.removeItem(constants.AUTH_REFRESH_TOKEN_NAME);\r\n            createBrowserHistory.push(constants.NAV_LOGIN);\r\n            toast.error('Your session has expired, please login again');\r\n            return Promise.reject(error);\r\n        }\r\n        else if (!originalRequest._refreshAttempt) {\r\n            originalRequest._refreshAttempt = true;\r\n            const token = window.localStorage.getItem(constants.AUTH_TOKEN_NAME);\r\n            const refreshToken = window.localStorage.getItem(constants.AUTH_REFRESH_TOKEN_NAME);\r\n            const user: IUser = await getRefreshToken(token, refreshToken);\r\n            originalRequest.headers['Authorization'] = `Bearer ${user.token}`;\r\n            return axios(originalRequest);\r\n        }\r\n    }\r\n    else if (status === 404) {\r\n        createBrowserHistory.push(constants.NAV_NOT_FOUND);\r\n    }\r\n    else if (status === 500) {\r\n        toast.error('Oops! Something went wrong, please try again later');\r\n    }\r\n    throw error.response;\r\n});\r\n\r\nexport const getRefreshToken = (token: string | null, refreshToken: string | null): Promise<IUser> => {\r\n    return axios.post(`${constants.BASE_SERVICE_URL}/api/user/refresh`, {\r\n        token: token,\r\n        refreshToken: refreshToken\r\n    }).then(res => {\r\n        window.localStorage.setItem(constants.AUTH_TOKEN_NAME, res.data.token);\r\n        window.localStorage.setItem(constants.AUTH_REFRESH_TOKEN_NAME, res.data.refreshToken);\r\n        axios.defaults.headers.common['Authorization'] = `Bearer ${res.data.token}`;\r\n        return res.data;\r\n    });\r\n};\r\n\r\nconst processResponse = (dbResponse: AxiosResponse) => {\r\n    return dbResponse.data;\r\n};\r\n\r\n//const addDelay = (ms: number) => (dbResponse: AxiosResponse) => {\r\n//    return new Promise<AxiosResponse>(resolve => setTimeout(() => resolve(dbResponse), ms));\r\n//};\r\n\r\nconst httpService = {\r\n    get: async (url: string, qsParams?: URLSearchParams) => {\r\n        const dbResponse: AxiosResponse = await axiosInstance.get(url, { params: qsParams });\r\n        //.then(addDelay(SLEEP_TIME));\r\n        return processResponse(dbResponse);\r\n    },\r\n    post: async (url: string, body: {}) => {\r\n        const dbResponse: AxiosResponse = await axiosInstance.post(url, body);\r\n        //.then(addDelay(SLEEP_TIME));\r\n        return processResponse(dbResponse);\r\n    },\r\n    put: async (url: string, body: {}) => {\r\n        const dbResponse: AxiosResponse = await axiosInstance.put(url, body);\r\n        //.then(addDelay(SLEEP_TIME));\r\n        return processResponse(dbResponse);\r\n    },\r\n    delete: async (url: string) => {\r\n        const dbResponse: AxiosResponse = await axiosInstance.delete(url);\r\n        //.then(addDelay(SLEEP_TIME));\r\n        return processResponse(dbResponse);\r\n    },\r\n    postForm: async (url: string, formData: FormData) => {\r\n        const dbResponse: AxiosResponse = await axiosInstance.post(url, formData, {\r\n            headers: { 'Content-type': 'multipart/form-data' }\r\n        });\r\n        return processResponse(dbResponse);\r\n    }\r\n};\r\n\r\nexport default httpService;","import httpService from './httpService';\r\n\r\nimport { IActivity } from '../models/IActivity';\r\n\r\n\r\nconst activityService = {\r\n    list: (qsParams: URLSearchParams) => {\r\n        return httpService.get(`/activities`, qsParams);\r\n    },\r\n    details: (id: string) => {\r\n        return httpService.get(`/activities/${id}`);\r\n    },\r\n    create: (activity: IActivity) => {\r\n        //return httpService.post('/activities', activity) as unknown as string;\r\n        return httpService.post('/activities', activity);\r\n    },\r\n    update: (activity: IActivity) => {\r\n        return httpService.put(`/activities/${activity.id}`, activity);\r\n    },\r\n    delete: (id: string) => {\r\n        return httpService.delete(`/activities/${id}`);\r\n    },\r\n    attend: (id: string) => {\r\n        return httpService.post(`/activities/${id}/attend`, {});\r\n    },\r\n    unattend: (id: string) => {\r\n        return httpService.post(`/activities/${id}/unattend`, {});\r\n    },\r\n    getComments: (id: string) => {\r\n        return httpService.get(`/activities/${id}/comments`);\r\n    }\r\n};\r\n\r\nexport default activityService;","import { IActivity, IAttendee } from '../../models/IActivity';\r\nimport { IUser } from '../../models/IUser';\r\n\r\n//export const getHostName = (activity: IActivity): string => {\r\n//    if (activity != null && activity.attendees.length > 0) {\r\n//        const hosts = activity.attendees?.filter((attendee) => attendee.isHost);\r\n//        const hostName = hosts.length > 0 ? hosts[0].displayName : '';\r\n//        return hostName;\r\n//    }\r\n//    return '';\r\n//};\r\n\r\nexport const isUserGoing = (activity: IActivity, user: IUser): boolean => {\r\n    if (activity != null && activity.attendees.length > 0 && user) {\r\n        return activity.attendees.some((attendee) => attendee.appUserId === user.appUserId);\r\n    }\r\n    return false;\r\n};\r\n\r\nexport const isUserHost = (activity: IActivity, user: IUser): boolean => {\r\n    if (activity != null && activity.attendees.length > 0 && user) {\r\n        return activity.attendees.some((attendee) => attendee.appUserId === user.appUserId && attendee.isHost === true);\r\n    }\r\n    return false;\r\n};\r\n\r\nexport const getHost = (activity: IActivity): IAttendee | null => {\r\n    if (activity != null && activity.attendees.length > 0) {\r\n        const hosts = activity.attendees.filter((attendee) => attendee.isHost === true);\r\n        if (hosts.length > 0)\r\n            return hosts[0];\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\nexport const createAttendee = (user: IUser, isHost: boolean): IAttendee => {\r\n    return {\r\n        appUserId: user.appUserId,\r\n        displayName: user.displayName,\r\n        image: user.image,\r\n        isHost: isHost\r\n    };\r\n};\r\n\r\nexport const removeAttendee = (activity: IActivity, user: IUser) => {\r\n    if (activity != null && activity.attendees.length > 0) {\r\n        return activity.attendees.filter((attendee) => attendee.appUserId !== user.appUserId);\r\n    };\r\n    return [];\r\n};","import { observable, action, computed, runInAction, reaction } from 'mobx';\r\nimport moment from 'moment';\r\nimport { toast } from 'react-toastify';\r\n\r\nimport { IActivity, IComment } from '../models/IActivity';\r\nimport activityService from '../api/activityService';\r\nimport { rootStore } from './rootStore';\r\nimport { isUserGoing, isUserHost, getHost, createAttendee, removeAttendee } from '../features/activities/util';\r\nimport * as constants from '../utils/constants';\r\n\r\nconst PAGE_SIZE: number = 2;\r\nexport default class activityStore {\r\n    rootStore: rootStore;\r\n\r\n    constructor(rootStore: rootStore) {\r\n        this.rootStore = rootStore;\r\n\r\n        reaction(() => this.predicate.keys(), () => {\r\n            this.currentPageNumber = 0;\r\n            this.activityRegistry.clear();\r\n            this.loadActivities();\r\n        });\r\n    }\r\n\r\n    @observable activityRegistry = new Map<string, IActivity>();\r\n    @observable selectedActivity: IActivity | null = null;\r\n    @observable isLoadingActivity = false;\r\n    @observable isLoadingActivities = false;\r\n    @observable showForm = false;\r\n    @observable isSaving = false;\r\n    @observable isDeleting = false;\r\n\r\n    //Paging and Filter\r\n    @observable totalActivitiesCount = 0;\r\n    @observable currentPageNumber = 0;\r\n    @observable predicate = new Map();\r\n\r\n    getActivity = (id: string): IActivity | undefined => {\r\n        return this.activityRegistry.get(id);\r\n    };\r\n\r\n    @action setSelectedActivity = (activity: IActivity) => {\r\n        this.selectedActivity = activity;\r\n    };\r\n\r\n    @action setShowFormFlag = (value: boolean) => {\r\n        this.showForm = value;\r\n    };\r\n\r\n    @action setIsLoadingActivity = (value: boolean) => {\r\n        this.isLoadingActivity = value;\r\n    };\r\n\r\n    @action setIsSaving = (value: boolean) => {\r\n        this.isSaving = value;\r\n    };\r\n\r\n    @action setIsDeleting = (value: boolean) => {\r\n        this.isDeleting = value;\r\n    };\r\n\r\n    @action setIsLoadingActivities = (value: boolean) => {\r\n        this.isLoadingActivities= value;\r\n    };\r\n\r\n    @action registerActivity = (activity: IActivity) => {\r\n        activity.date = new Date(activity.date);\r\n        const user = this.getCurrentUser();\r\n        if (user) {\r\n            activity.isCurrentUserGoing = isUserGoing(activity, user);\r\n            activity.isCurrentUserHost = isUserHost(activity, user);\r\n            activity.host = getHost(activity);\r\n        }\r\n        this.activityRegistry.set(activity.id, activity);\r\n    };\r\n\r\n    @action loadActivities = async () => {\r\n        try {\r\n            this.setIsLoadingActivities(true);\r\n            const { count, activities } = await activityService.list(this.getQSParams());\r\n            if (activities) {\r\n                activities.forEach((activity: IActivity) => {\r\n                    this.registerActivity(activity);\r\n                });\r\n            }\r\n            this.setTotalActivityCount(count);\r\n            this.setIsLoadingActivities(false);\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    };\r\n\r\n    @action loadActivity = async (id: string) => {\r\n        if (!id || (id && id.length === 0))\r\n            return;\r\n\r\n        let activity: IActivity | undefined = this.getActivity(id);\r\n        if (activity) {\r\n            this.setSelectedActivity(activity);\r\n            return activity;\r\n        }\r\n\r\n        this.setIsLoadingActivity(true);\r\n        try {\r\n            activity = await activityService.details(id);\r\n            this.registerActivity(activity!);\r\n            this.setSelectedActivity(activity!);\r\n            this.setIsLoadingActivity(false);\r\n            return activity;\r\n        } catch (error) {\r\n            console.error(error);\r\n            this.setIsLoadingActivity(false);\r\n        }\r\n    };\r\n\r\n    @action createActivity = async (activity: IActivity): Promise<string> => {\r\n        this.setIsSaving(true);\r\n\r\n        try {\r\n            activity.id = await activityService.create(activity);\r\n            runInAction(() => {\r\n                activity.attendees = activity.attendees || [];\r\n                activity.attendees.push(createAttendee(this.getCurrentUser()!, true));\r\n            });\r\n            this.registerActivity(activity);\r\n            this.setIsSaving(false);\r\n            this.setShowFormFlag(false);\r\n            return activity.id;\r\n        } catch (error) {\r\n            console.error(error);\r\n            this.setIsSaving(false);\r\n            this.setShowFormFlag(false);\r\n        }\r\n        return '';\r\n    };\r\n\r\n    @action editActivity = async (activity: IActivity): Promise<boolean> => {\r\n        this.setIsSaving(true);\r\n        try {\r\n            await activityService.update(activity);\r\n            this.registerActivity(activity);\r\n            this.setIsSaving(false);\r\n            this.setShowFormFlag(false);\r\n            return true;\r\n        } catch (error) {\r\n            console.error(error);\r\n            this.setIsSaving(false);\r\n            this.setShowFormFlag(false);\r\n        }\r\n        return false;\r\n    };\r\n\r\n    @action deleteActivity = async (id: string) => {\r\n        this.setIsDeleting(true);\r\n        try {\r\n            await activityService.delete(id);\r\n            runInAction(() => {\r\n                this.activityRegistry.delete(id);\r\n            });\r\n            this.setIsDeleting(false);\r\n            this.setShowFormFlag(false);\r\n        } catch (error) {\r\n            console.error(error);\r\n            this.setIsDeleting(false);\r\n            this.setShowFormFlag(false);\r\n        }\r\n    };\r\n\r\n    @action attend = async (activity: IActivity) => {\r\n        try {\r\n            await activityService.attend(activity.id);\r\n            runInAction(() => {\r\n                activity.attendees = activity.attendees || [];\r\n                activity.attendees.push(createAttendee(this.getCurrentUser()!, false));\r\n            });\r\n            this.registerActivity(activity);\r\n        } catch (error) {\r\n            console.error(error);\r\n            toast.error('Problem signin up to activity, Please try again later!');\r\n        }\r\n    };\r\n\r\n    @action unattend = async (activity: IActivity) => {\r\n        try {\r\n            await activityService.unattend(activity.id);\r\n            runInAction(() => {\r\n                activity.attendees = removeAttendee(activity, this.getCurrentUser()!);\r\n            });\r\n            this.registerActivity(activity);\r\n        } catch (error) {\r\n            console.error(error);\r\n            toast.error('Problem cancelling attendance, Please try again later!');\r\n        }\r\n    };\r\n\r\n    @action getComments = async () => {\r\n        try {\r\n            if (this.selectedActivity && this.selectedActivity.comments)\r\n                return;\r\n\r\n            const comments = await activityService.getComments(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                if (this.selectedActivity)\r\n                    this.selectedActivity.comments = comments || [];\r\n            });\r\n        } catch (error) {\r\n            console.error(error);\r\n            toast.error('Problem fetching comments, Please try again later!');\r\n        }\r\n    };\r\n\r\n    @action addComment = async (comment: any) => {\r\n        comment.activityId = this.selectedActivity!.id;\r\n        try {\r\n            await this.rootStore.activityHubStore.sendComment(comment);\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    };\r\n\r\n    @action onReceivingCommentFromServer = (comment: IComment) => {\r\n        this.selectedActivity?.comments.push(comment)\r\n    };\r\n\r\n    @action setTotalActivityCount = (count: number) => {\r\n        this.totalActivitiesCount = count;\r\n    };\r\n\r\n    @action setPageNumber = (pageNumber: number) => {\r\n        this.currentPageNumber = pageNumber;\r\n    };\r\n\r\n    @action setPredicate = (key: string, value: string | Date) => {\r\n        this.predicate.clear();\r\n        if (key !== constants.PREDICATE_ALL)\r\n            this.predicate.set(key, value);\r\n    }\r\n\r\n    getQSParams = (): URLSearchParams => {\r\n        const params = new URLSearchParams();\r\n        params.append('offset', (this.currentPageNumber * PAGE_SIZE).toString());\r\n        params.append('limit', PAGE_SIZE.toString());\r\n\r\n        this.predicate.forEach((value, key) => {\r\n            if (key === constants.PREDICATE_START_DATE)\r\n                params.append(key, (value as Date).toISOString());\r\n            else\r\n                params.append(key, value.toString());\r\n        });\r\n        return params;\r\n    }\r\n\r\n    @computed get totalPages(): number {\r\n        return Math.ceil(this.totalActivitiesCount / PAGE_SIZE);\r\n    };\r\n\r\n    @computed get activityByDate(): [string, IActivity[]][] {\r\n        const sortedArray = Array.from(this.activityRegistry.values()).sort(\r\n            (a, b): number => {\r\n                if (a.date && b.date) {\r\n                    return a.date.getTime() - b.date.getTime();\r\n                }\r\n                else if (a)\r\n                    return 1;\r\n                return 0;\r\n            }\r\n        )\r\n        return this.groupActivitiesByDate(sortedArray);\r\n    };\r\n\r\n    groupActivitiesByDate = (sortedArray: IActivity[]): [string, IActivity[]][] => {\r\n        const initialValue: { [key: string]: IActivity[] } = {};\r\n        return Object.entries(sortedArray.reduce((accumulator, currentValue) => {\r\n            const date = moment(currentValue.date).format(\"MM-DD-yyyy\");\r\n            accumulator[date] = accumulator[date] ? [...accumulator[date], currentValue] : [currentValue];\r\n            return accumulator;\r\n        }, initialValue));\r\n    };\r\n\r\n    getCurrentUser = () => {\r\n        return this.rootStore.userStore.getCurrentUserInstance();\r\n    };\r\n};\r\n\r\n","import { observable, action } from 'mobx';\r\nimport jwt from 'jsonwebtoken';\r\n\r\nimport { rootStore } from './rootStore';\r\nimport * as constants from '../utils/constants';\r\nimport { getRefreshToken } from '../api/httpService';\r\nimport { toast } from 'react-toastify';\r\n\r\nclass commonStore {\r\n    rootStore: rootStore;\r\n\r\n    constructor(rootStore: rootStore) {\r\n        this.rootStore = rootStore;\r\n    };\r\n\r\n    @observable appLoaded: boolean = false;\r\n\r\n    @action setToken(token: string | null) {\r\n        if (token)\r\n            window.localStorage.setItem(constants.AUTH_TOKEN_NAME, token);\r\n        else\r\n            window.localStorage.removeItem(constants.AUTH_TOKEN_NAME);\r\n    }\r\n\r\n    @action setRefreshToken(refreshToken: string | null) {\r\n        if (refreshToken)\r\n            window.localStorage.setItem(constants.AUTH_REFRESH_TOKEN_NAME, refreshToken);\r\n        else\r\n            window.localStorage.removeItem(constants.AUTH_REFRESH_TOKEN_NAME);\r\n    }\r\n\r\n    @action setAppLoaded() {\r\n        this.appLoaded = true;\r\n    }\r\n\r\n    getOrRefreshToken = async () => {\r\n        const token = this.getToken();\r\n        const refreshToken = this.getRefreshToken();\r\n        if (token && refreshToken) {\r\n            const decodedToken: any = jwt.decode(token);\r\n            //Get new token if current token is expired.\r\n            if (decodedToken && decodedToken.exp * 1000 <= Date.now() + 5000) {\r\n                try {\r\n                    return await (await getRefreshToken(token, refreshToken)).token;\r\n                } catch (err) {\r\n                    toast.error('Problem getting refresh token!');\r\n                }\r\n            }\r\n            //If token is not expired return it\r\n            return token;\r\n        }\r\n        return '';\r\n    };\r\n\r\n    getToken = (): string | null => {\r\n        return window.localStorage.getItem(constants.AUTH_TOKEN_NAME);\r\n    };\r\n\r\n    getRefreshToken = (): string | null => {\r\n        return window.localStorage.getItem(constants.AUTH_REFRESH_TOKEN_NAME);\r\n    };\r\n};\r\n\r\nexport default commonStore;","import httpService from './httpService';\r\nimport { IUser, ILogin, IRegister } from '../models/IUser';\r\n\r\nconst userService = {\r\n    current: (): Promise<IUser> => {\r\n        return httpService.get('/user');\r\n    },\r\n    login: (command: ILogin): Promise<IUser> => {\r\n        return httpService.post('/user/login', command);\r\n    },\r\n    register: (command: IRegister): Promise<IUser> => {\r\n        return httpService.post('/user/register', command);\r\n    }\r\n};\r\n\r\nexport default userService;","import { observable, action, computed, toJS } from 'mobx';\r\n\r\nimport { IUser, ILogin, IRegister } from '../models/IUser';\r\nimport userService from '../api/userService';\r\nimport { rootStore } from './rootStore';\r\nimport * as constants from '../utils/constants';\r\nimport createBrowserHistory from '../utils/createBrowserHistory';\r\nimport { IPhoto } from '../models/IProfile';\r\n\r\nclass userStore {\r\n    rootStore: rootStore;\r\n\r\n    constructor(rootStore: rootStore) {\r\n        this.rootStore = rootStore;\r\n    }\r\n\r\n    @observable user: IUser | null = null;\r\n\r\n    @computed get isUserLoggedIn(): Boolean {\r\n        return !!this.user;\r\n    };\r\n\r\n    @computed get canAccessSecureResource(): boolean {\r\n        const token = this.rootStore.commonStore.getToken();\r\n        return !!(this.isUserLoggedIn && token && token.length > 0);\r\n    };\r\n\r\n    @action setUser = (user: IUser | null) => {\r\n        this.user = user;\r\n    };\r\n\r\n    @action login = async (command: ILogin) => {\r\n        try {\r\n            this.rootStore.commonStore.setToken(null);\r\n            this.rootStore.commonStore.setRefreshToken(null);\r\n            const user = await userService.login(command);\r\n            this.setUser(user);\r\n            this.rootStore.commonStore.setToken(user.token);\r\n            this.rootStore.commonStore.setRefreshToken(user.refreshToken);\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    };\r\n\r\n    @action register = async (command: IRegister) => {\r\n        try {\r\n            if (!this.isUserLoggedIn) {\r\n                const user = await userService.register(command);\r\n                this.setUser(user);\r\n                this.rootStore.commonStore.setToken(user.token);\r\n                this.rootStore.commonStore.setRefreshToken(user.refreshToken);\r\n            }\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    };\r\n\r\n    @action current = async () => {\r\n        try {\r\n            if (!this.user) {\r\n                const user = await userService.current();\r\n                this.setUser(user);\r\n            }\r\n            return this.user;\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    };\r\n\r\n    @action setMainPhoto(mainPhoto: IPhoto) {\r\n        if (this.user)\r\n            this.user.image = mainPhoto.url;\r\n    }\r\n\r\n    @action setDisplayName(displayName: string) {\r\n        if (this.user)\r\n            this.user.displayName = displayName;\r\n    }\r\n\r\n    @action logout = () => {\r\n        this.rootStore.commonStore.setToken(null);\r\n        this.rootStore.commonStore.setRefreshToken(null);\r\n        this.setUser(null);\r\n        createBrowserHistory.push(constants.NAV_HOME);\r\n    };\r\n\r\n    @action fbResponseHandler = (response: any) => {\r\n        console.log(response);\r\n    }\r\n\r\n    getCurrentUserInstance = () => {\r\n        return toJS(this.user);\r\n    };\r\n};\r\n\r\nexport default userStore;","import { IProfile } from \"../models/IProfile\";\r\nimport httpService from \"./httpService\";\r\nimport { IUserActivity } from \"../models/IActivity\";\r\n\r\nconst profileService = {\r\n    get: (appUserId: string): Promise<IProfile> => {\r\n        return httpService.get(`profile/${appUserId}`);\r\n    },\r\n    userActivities: (appUserId: string, qsParam: URLSearchParams): Promise<IUserActivity[]> => {\r\n        return httpService.get(`profile/${appUserId}/activities`, qsParam);\r\n    },\r\n    followers: (userId: string): Promise<IProfile[]> => {\r\n        return httpService.get(`profile/${userId}/followers`);\r\n    },\r\n    followings: (userId: string): Promise<IProfile[]> => {\r\n        return httpService.get(`profile/${userId}/followings`);\r\n    },\r\n    update: (profile: IProfile): Promise<string> => {\r\n        return httpService.put('profile/', profile);\r\n    },\r\n    follow: (userId: string) => {\r\n        return httpService.post(`profile/${userId}/follow`, {});\r\n    },\r\n    unfollow: (userId: string) => {\r\n        return httpService.post(`profile/${userId}/unfollow`, {});\r\n    }\r\n};\r\n\r\nexport default profileService;","import httpService from './httpService';\r\nimport { IPhoto } from '../models/IProfile';\r\n\r\nconst photoService = {\r\n    upload: (file: Blob): Promise<IPhoto> => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return httpService.postForm('photo/', formData);\r\n    },\r\n    setMain: (photoId: string): Promise<void> => {\r\n        return httpService.post(`photo/${photoId}/setmain`, photoId);\r\n    },\r\n    delete: (photoId: string): Promise<void> => {\r\n        return httpService.delete(`photo/${photoId}`);\r\n    }\r\n};\r\n\r\nexport default photoService;","import { rootStore } from './rootStore';\r\nimport { action, computed, runInAction, observable, reaction } from 'mobx';\r\nimport { toast } from 'react-toastify';\r\n\r\nimport profileService from '../api/profileService';\r\nimport photoService from '../api/photoService';\r\nimport { IProfile, IPhoto } from '../models/IProfile';\r\nimport * as constants from '../utils/constants';\r\nimport { IUserActivity } from '../models/IActivity';\r\n\r\nexport default class profileStore {\r\n    rootStore: rootStore;\r\n    @observable userProfile: IProfile | null = null;\r\n    @observable activeTabIndex: string | number | undefined = 0;\r\n    @observable followers: IProfile[] | undefined = undefined;\r\n    @observable isLoadingfollowers: boolean = false;\r\n    @observable userActivities: IUserActivity[] | null = null;\r\n\r\n    constructor(rootStore: rootStore) {\r\n        this.rootStore = rootStore;\r\n\r\n        reaction(() => this.activeTabIndex, index => {\r\n            if (index === constants.TAB_INDEX_FOLLOWERS)\r\n                this.loadFollowers(this.userProfile!.appUserId, constants.PREDICATE_FOLLOWERS);\r\n            else if (index === constants.TAB_INDEX_FOLLOWINGS)\r\n                this.loadFollowers(this.userProfile!.appUserId, constants.PREDICATE_FOLLOWINGS);\r\n            else\r\n                this.followers = undefined;\r\n        });\r\n    }\r\n\r\n    @computed get isViewingOwnProfile(): boolean {\r\n        return !!(this.rootStore.userStore.user?.userName === this.userProfile?.username);\r\n    };\r\n\r\n    @computed get isUserViewingFollowersTab(): boolean {\r\n        return (this.activeTabIndex === constants.TAB_INDEX_FOLLOWERS);\r\n    };\r\n\r\n    @computed get isUserViewingFollowingTab(): boolean {\r\n        return (this.activeTabIndex === constants.TAB_INDEX_FOLLOWINGS);\r\n    };\r\n\r\n    @action setActiveTab = (tabIndex: string | number | undefined) => {\r\n        this.activeTabIndex = tabIndex;\r\n    };\r\n\r\n    @action setUserProfile = (userProfile: IProfile) => {\r\n        this.userProfile = userProfile;\r\n    };\r\n\r\n    @action getUserProfile = async (appUserId: string) => {\r\n        try {\r\n            const profile = await profileService.get(appUserId);\r\n            this.setUserProfile(profile);\r\n        } catch (error) {\r\n            console.error(error);\r\n            toast.error('Error loading user profile');\r\n        }\r\n    };\r\n\r\n    @action uploadPhoto = async (file: Blob): Promise<IPhoto | undefined> => {\r\n        try {\r\n            const photo = await photoService.upload(file);\r\n            runInAction(() => {\r\n                this.userProfile?.photos.push(photo);\r\n            });\r\n            return photo;\r\n        } catch (error) {\r\n            console.error(error);\r\n            toast.error('Error uploading photo');\r\n        }\r\n    };\r\n\r\n    @action setMainPhoto = async (photoId: string): Promise<void> => {\r\n        try {\r\n            await photoService.setMain(photoId);\r\n            runInAction(() => {\r\n                if (this.userProfile) {\r\n                    this.userProfile.mainPhoto = this.userProfile?.photos?.filter((p) => p.id === photoId)[0];\r\n                    this.rootStore.userStore.setMainPhoto(this.userProfile.mainPhoto);\r\n                }\r\n            });\r\n        } catch (error) {\r\n            console.error(error);\r\n            toast.error('Problem setting photo as main');\r\n        }\r\n    };\r\n\r\n    @action deletePhoto = async (photoId: string): Promise<void> => {\r\n        try {\r\n            await photoService.delete(photoId);\r\n            runInAction(() => {\r\n                this.userProfile!.photos = this.userProfile!.photos!.filter((p) => p.id !== photoId);\r\n            });\r\n        } catch (error) {\r\n            console.error(error);\r\n            toast.error('Problem deleting photo');\r\n        }\r\n    }\r\n\r\n    @action updateProfile = async (aboutProfile: IProfile) => {\r\n        try {\r\n            const displayName = await profileService.update(aboutProfile);\r\n            runInAction(() => {\r\n                this.rootStore.userStore.setDisplayName(displayName);\r\n                this.userProfile = { ...this.userProfile, ...aboutProfile };\r\n                this.userProfile!.displayName = displayName;\r\n            });\r\n        } catch (error) {\r\n            console.error(error);\r\n            toast.error('Problem updating user profile');\r\n        }\r\n    };\r\n\r\n    @action follow = async (userId: string) => {\r\n        try {\r\n            const user: IProfile = await profileService.follow(userId);\r\n            runInAction(() => {\r\n                this.userProfile!.followersCount += 1;\r\n                this.userProfile!.following = true;\r\n                if (this.isUserViewingFollowersTab) {\r\n                    this.followers = this.followers ?? [];\r\n                    this.followers.push(user);\r\n                }\r\n            });\r\n        } catch (error) {\r\n            console.error(error);\r\n            toast.error('Problem following user');\r\n        }\r\n    };\r\n\r\n    @action unfollow = async (userId: string) => {\r\n        try {\r\n            await profileService.unfollow(userId);\r\n            runInAction(() => {\r\n                this.userProfile!.followersCount -= 1;\r\n                this.userProfile!.following = false;\r\n                if (this.isUserViewingFollowersTab) {\r\n                    this.followers = this.followers?.filter(u => u.appUserId !== this.rootStore.userStore.user?.appUserId);\r\n                }\r\n            });\r\n        } catch (error) {\r\n            console.error(error);\r\n            toast.error('Problem unfollowing user');\r\n        }\r\n    };\r\n\r\n    @action loadFollowers = async (userId: string, predicate: string) => {\r\n        try {\r\n            this.isLoadingfollowers = true;\r\n            let followers: IProfile[] | undefined = undefined;\r\n\r\n            if (predicate === constants.PREDICATE_FOLLOWERS)\r\n                followers = await profileService.followers(userId);\r\n            else\r\n                followers = await profileService.followings(userId);\r\n\r\n            runInAction(() => {\r\n                this.followers = followers && followers.length > 0 ? followers : undefined;\r\n                this.isLoadingfollowers = false;\r\n            });\r\n        } catch (error) {\r\n            console.error(error);\r\n            toast.error('Problem loading followers');\r\n            this.isLoadingfollowers = false;\r\n        }\r\n        return null;\r\n    };\r\n\r\n    @action setUserActivities = (userActivities: IUserActivity[]) => {\r\n        this.userActivities = userActivities;\r\n    };\r\n\r\n    @action loadUserActivities = async (appUserId: string, predicate: string) => {\r\n        try {\r\n            const qsParams = new URLSearchParams();\r\n            qsParams.set('Predicate', predicate);\r\n            const userActivities = await profileService.userActivities(appUserId, qsParams);\r\n            this.setUserActivities(userActivities);\r\n        } catch (error) {\r\n            console.error(error);\r\n            toast.error('Problem loading user activities');\r\n        }\r\n        return null;\r\n    };\r\n};\r\n\r\n","import { observable, action } from 'mobx';\r\nimport { toast } from 'react-toastify';\r\nimport { HubConnection, HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\r\n\r\nimport { rootStore } from './rootStore';\r\nimport * as constants from '../utils/constants';\r\n\r\nexport default class activityHubStore {\r\n    rootStore: rootStore;\r\n\r\n    constructor(rootStore: rootStore) {\r\n        this.rootStore = rootStore;\r\n    }\r\n\r\n    @observable.ref hubConnection: HubConnection | null = null;\r\n\r\n    @action createHubConnection = (activityId: string) => {\r\n        //Build Hub Connection\r\n        this.hubConnection = new HubConnectionBuilder()\r\n            .withUrl(`${constants.BASE_SERVICE_URL}/activitychat`, {\r\n                //Send token as part as QueryString.\r\n                accessTokenFactory: () => this.rootStore.commonStore.getOrRefreshToken()\r\n            })\r\n            .configureLogging(LogLevel.Information)\r\n            .build();\r\n\r\n        //Start Hub Connection.\r\n        this.hubConnection.start()\r\n            .then(() => this.hubConnection?.state!)\r\n            .then(() => {\r\n                console.log(`Attempting to join group ${activityId}`);\r\n                if (this.hubConnection!.state === 'Connected')\r\n                    this.hubConnection?.invoke('AddToGroup', activityId);\r\n            })\r\n            .catch(error => console.log(`Error establishing a connection: ${error}`));\r\n\r\n        //Event Handlers on Receiving message from server.\r\n        this.hubConnection.on('ReceiveComment', comment => {\r\n            this.rootStore.activityStore.onReceivingCommentFromServer(comment);\r\n        });\r\n\r\n        this.hubConnection.on(\"GroupNotification\", message => {\r\n            toast.dismiss();\r\n            toast.info(message);\r\n        });\r\n    };\r\n\r\n    @action stopHubConnection = (activityId: string) => {\r\n        this.hubConnection!.invoke('RemoveFromGroup', activityId)\r\n            .then(() => {\r\n                this.hubConnection!.stop();\r\n            })\r\n            .then(() => {\r\n                console.log('Connection stopped');\r\n            })\r\n            .catch(error => console.log(`Error establishing a connection: ${error}`));\r\n    };\r\n\r\n    @action sendComment = async (comment: any) => {\r\n        await this.hubConnection!.invoke('SendComment', comment);\r\n    };\r\n}","import { createContext } from 'react';\r\nimport { configure } from 'mobx';\r\n\r\nimport activityStore from './activityStore';\r\nimport commonStore from './commonStore';\r\nimport userStore from './userStore';\r\nimport profileStore from './profileStore';\r\nimport activityHubStore from './activityHubStore';\r\n\r\n// don't allow state modifications outside actions\r\nconfigure({ enforceActions: \"always\" });\r\n\r\nexport class rootStore {\r\n\r\n    activityStore: activityStore;\r\n    userStore: userStore;\r\n    commonStore: commonStore;\r\n    profileStore: profileStore;\r\n    activityHubStore: activityHubStore;\r\n\r\n    constructor() {\r\n        this.activityStore = new activityStore(this);\r\n        this.userStore = new userStore(this);\r\n        this.commonStore = new commonStore(this);\r\n        this.profileStore = new profileStore(this);\r\n        this.activityHubStore = new activityHubStore(this);\r\n    }\r\n};\r\n\r\n\r\nexport const rootStoreContext = createContext(new rootStore());\r\n\r\n","import React, { SyntheticEvent } from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\n\r\nexport enum modalSize {\r\n    Mini = 'mini',\r\n    Tiny = 'tiny',\r\n    Small = 'small',\r\n    Large = 'large',\r\n    Fullscreen = 'fullscreen'\r\n};\r\n\r\ninterface IProps {\r\n    content: any;\r\n    actions?: any;\r\n    trigger?: any;\r\n\r\n    closeIcon?: boolean;\r\n    closeOnEscape?: boolean;\r\n    closeOnDocumentClick?: boolean;\r\n    closeOnDimmerClick?: boolean;\r\n    defaultOpen?: boolean;\r\n    //\r\n    open?: boolean,\r\n    size?: modalSize,\r\n    title?: string;\r\n\r\n    onClose?: (event: SyntheticEvent, data: object) => void;\r\n    onOpen?: (event: SyntheticEvent, data: object) => void;\r\n    onActionClick?: (event: SyntheticEvent, data: object) => void;\r\n};\r\n\r\nconst ModelContainer: React.FC<IProps> = (props) => {\r\n    const settings: IProps = {\r\n        trigger: props.trigger,\r\n        content: props.content,\r\n        title: props.title,\r\n        actions: props.actions,\r\n        closeIcon: props.closeIcon || true,\r\n        closeOnDocumentClick: props.closeOnDocumentClick || false,\r\n        closeOnDimmerClick: props.closeOnDocumentClick || false,\r\n        closeOnEscape: props.closeOnEscape || false,\r\n        open: props.open,\r\n        size: props.size || modalSize.Large,\r\n        defaultOpen: props.defaultOpen || false,\r\n        onClose: props.onClose,\r\n        onOpen: props.onOpen,\r\n        onActionClick: props.onActionClick\r\n    };\r\n\r\n    const onOpen = (event: SyntheticEvent, data: object) => {\r\n        if (settings.onOpen) {\r\n            settings.onOpen(event, data);\r\n        }\r\n    };\r\n\r\n    const onClose = (event: SyntheticEvent, data: object) => {\r\n        event.preventDefault();\r\n        if (settings.onClose) {\r\n            settings.onClose(event, data);\r\n        }\r\n    };\r\n\r\n    const onActionClick = (event: SyntheticEvent, data: object) => {\r\n        if (settings.onActionClick) {\r\n            settings.onActionClick(event, data);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Modal\r\n            closeIcon={settings.closeIcon}\r\n            defaultOpen={settings.defaultOpen}\r\n            closeOnDimmerClick={settings.closeOnDimmerClick}\r\n            closeOnDocumentClick={settings.closeOnDocumentClick}\r\n            closeOnEscape={settings.closeOnEscape}\r\n            size={settings.size as any}\r\n            open={settings.open}\r\n            onOpen={onOpen}\r\n            onClose={onClose}\r\n            onActionClick={onActionClick}\r\n        >\r\n\r\n            {settings.title && (<Modal.Header>{settings.title}</Modal.Header>)}\r\n\r\n            <Modal.Content>\r\n                {settings.content}\r\n            </Modal.Content>\r\n\r\n            {settings.actions && (<Modal.Actions>{settings.actions}</Modal.Actions>)}\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default ModelContainer;","import React, { useContext, Fragment } from 'react';\r\nimport { Container, Menu, Button, Dropdown, Image } from 'semantic-ui-react';\r\nimport { NavLink, Link } from 'react-router-dom';\r\n\r\nimport * as constants from '../../utils/constants';\r\nimport { rootStoreContext } from '../../stores/rootStore';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nconst NavBar: React.FC = () => {\r\n    const rootStoreObj = useContext(rootStoreContext);\r\n    const userStore = rootStoreObj.userStore;\r\n\r\n    return (\r\n        <Menu fixed=\"top\" inverted>\r\n            <Container>\r\n                <Menu.Item header as={NavLink} to={`${constants.NAV_HOME}`} exact >\r\n                    <img src=\"/assets/logo.png\" alt=\"logo\" />\r\n                    Social Network\r\n                </Menu.Item>\r\n                {userStore.isUserLoggedIn && userStore.user &&\r\n                    (<Fragment>\r\n                        <Menu.Item name='Activities' as={NavLink} to={`${constants.NAV_ACTIVITIES}`} />\r\n\r\n                        <Menu.Item>\r\n                            <Button as={NavLink} to={`${constants.NAV_CREATE_ACTIVITY}`}\r\n                                content=\"Create Activity\" positive />\r\n                        </Menu.Item>\r\n\r\n                        <Menu.Item position='right'>\r\n                            <Image avatar spaced='right' src={userStore.user?.image || '/assets/user.png'} />\r\n                            <Dropdown pointing='top left' text={userStore.user?.displayName}>\r\n                                <Dropdown.Menu>\r\n                                    <Dropdown.Item\r\n                                        as={Link}\r\n                                        to={`${constants.NAV_USER_PROFILE}/${userStore.user?.appUserId}`}\r\n                                        text='My profile'\r\n                                        icon='user'\r\n                                    />\r\n                                    <Dropdown.Item onClick={() => userStore.logout()} text='Logout' icon='power' />\r\n                                </Dropdown.Menu>\r\n                            </Dropdown>\r\n                        </Menu.Item>\r\n                    </Fragment>)}\r\n            </Container>\r\n        </Menu>\r\n    )\r\n};\r\n\r\nexport default observer(NavBar);","import React, { useContext, Fragment } from 'react';\r\nimport { Container, Header, Segment, Image, Button } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport * as constants from '../../utils/constants';\r\nimport { rootStoreContext } from '../../stores/rootStore';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\n\r\nconst Home: React.FC = () => {\r\n    const rootStoreObject = useContext(rootStoreContext);\r\n    const userStoreObj = rootStoreObject.userStore;\r\n    const commonStoreObj = rootStoreObject.commonStore;\r\n\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead'>\r\n            <Container text>\r\n                <Header as='h1' inverted>\r\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{ marginBottom: 12 }} />\r\n                    Social Network\r\n                </Header>\r\n\r\n                {userStoreObj.isUserLoggedIn === true && commonStoreObj.getToken()\r\n                    ? (<Fragment>\r\n                        <Header as='h2' inverted content={`Welcome back ${userStoreObj.user!.displayName}`} />\r\n                        <Button as={Link} to={constants.NAV_ACTIVITIES} size='huge' inverted>\r\n                            Go to activities!\r\n                        </Button>\r\n                    </Fragment>)\r\n                    : (<Fragment>\r\n                        <Button as={Link} to={constants.NAV_LOGIN} size='huge' inverted>\r\n                            Login\r\n                        </Button>\r\n                        <Button as={Link} to={constants.NAV_REGISTER} size='huge' inverted>\r\n                            Register\r\n                        </Button>\r\n                    </Fragment>)\r\n                }\r\n            </Container>\r\n        </Segment>\r\n    );\r\n}\r\n\r\nexport default observer(Home);","import React from 'react';\r\nimport { List, Image, Popup } from 'semantic-ui-react';\r\nimport { IAttendee } from '../../../models/IActivity';\r\n\r\ninterface IProps {\r\n    attendees: IAttendee[]\r\n}\r\n\r\nconst styles = {\r\n    borderColor: 'orange',\r\n    borderWidth: 2\r\n};\r\n\r\nconst ActivityListItemAttendee: React.FC<IProps> = ({ attendees }) => {\r\n    return (\r\n        <List horizontal>\r\n            {\r\n                attendees?.map((attendee: IAttendee) => {\r\n                    let path = attendee.image || '/assets/user.png';\r\n                    return (\r\n                        <List.Item key={attendee.appUserId}>\r\n                            <Popup\r\n                                header={attendee.displayName}\r\n                                trigger={\r\n                                    <Image src={path} size='mini'\r\n                                        circular\r\n                                        bordered\r\n                                        style={attendee.following ? styles : null}\r\n                                    />\r\n                                }\r\n                            />\r\n                        </List.Item>\r\n                    );\r\n                })\r\n            }\r\n        </List>\r\n    )\r\n};\r\n\r\nexport default ActivityListItemAttendee;","import React from 'react';\r\nimport { Item, Button, Segment, Icon, Label } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport moment from 'moment';\r\n\r\nimport { IActivity } from '../../../models/IActivity';\r\nimport ActivityListItemAttendee from './ActivityListItemAttendee';\r\nimport * as constants from '../../../utils/constants';\r\n\r\ninterface IProps {\r\n    activity: IActivity;\r\n};\r\n\r\nconst ActivityListItem: React.FC<IProps> = ({ activity }) => {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image\r\n                            size='tiny'\r\n                            circular\r\n                            src={activity.host?.image || '/assets/user.png'}\r\n                            style={{ marginBottom: 3 }}\r\n                        />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`${constants.NAV_ACTIVITIES}/${activity.id}`}>\r\n                                {activity.title}\r\n                            </Item.Header>\r\n                            <Item.Description>\r\n                                Hosted by {' '}\r\n                                <Link to={`${constants.NAV_USER_PROFILE}/${activity.host?.appUserId}`}>\r\n                                    {activity.host?.displayName}\r\n                                </Link>\r\n                            </Item.Description>\r\n                            {activity.isCurrentUserHost && (\r\n                                <Item.Description>\r\n                                    <Label\r\n                                        basic\r\n                                        color='orange'\r\n                                        content='You are hosting this activity'\r\n                                    />\r\n                                </Item.Description>\r\n                            )}\r\n                            {activity.isCurrentUserGoing && !activity.isCurrentUserHost && (\r\n                                <Item.Description>\r\n                                    <Label\r\n                                        basic\r\n                                        color='green'\r\n                                        content='You are going to this activity'\r\n                                    />\r\n                                </Item.Description>\r\n                            )}\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <Icon name=\"clock\" />{moment(activity.date).format(\"h:mm A\")}\r\n                <Icon name=\"marker\" />{activity.venue}, {activity.city}\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.attendees} />\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                <Button\r\n                    as={Link}\r\n                    to={`${constants.NAV_ACTIVITIES}/${activity.id}`}\r\n                    name={activity.id}\r\n                    content=\"View\"\r\n                    floated=\"right\"\r\n                    color=\"blue\" />\r\n            </Segment>\r\n        </Segment.Group>\r\n\r\n    );\r\n};\r\n\r\nexport default ActivityListItem;","import React, { useContext, Fragment } from 'react';\r\nimport { Item,  Label } from 'semantic-ui-react';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nimport { rootStoreContext } from '../../../stores/rootStore';\r\nimport ActivityListItem from './ActivityListItem';\r\n\r\n\r\nconst ActivityList: React.FC = () => {\r\n    const rootStoreObj = useContext(rootStoreContext);\r\n    const activityStoreObj = rootStoreObj.activityStore;\r\n\r\n    return (\r\n        <Fragment>\r\n            {\r\n                activityStoreObj.activityByDate.map(([group, activities]) => {\r\n                    return (\r\n                        <Fragment key={group}>\r\n                            <Label size=\"large\" color=\"blue\">\r\n                                {group}\r\n                            </Label>\r\n                            <Item.Group divided>\r\n                                {\r\n                                    activities.map((item) => {\r\n                                        return <ActivityListItem key={item.id} activity={item} />\r\n                                    })\r\n                                }\r\n                            </Item.Group>\r\n                        </Fragment>\r\n                    )\r\n                })\r\n            }\r\n        </Fragment>\r\n    )\r\n};\r\n\r\nexport default observer(ActivityList);","import React from 'react';\r\nimport { Loader } from 'semantic-ui-react';\r\n\r\ninterface IProps {\r\n    message?: string;\r\n    loading: boolean;\r\n}\r\nconst Spinner: React.FC<IProps> = ({ message, loading }) => {\r\n    return (\r\n        <Loader active={loading} inline='centered'>{message}</Loader>\r\n    )\r\n};\r\n\r\nexport default Spinner;\r\n","import React, { Fragment, useContext } from 'react';\r\nimport { Menu, Header } from 'semantic-ui-react';\r\nimport { Calendar } from 'react-widgets';\r\n\r\nimport { rootStoreContext } from '../../../stores/rootStore';\r\nimport * as constants from '../../../utils/constants';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nconst ActivityFilter = () => {\r\n    const rootStoreObj = useContext(rootStoreContext);\r\n    const { setPredicate, predicate } = rootStoreObj.activityStore;\r\n\r\n    return (\r\n        <Fragment>\r\n            <Menu vertical size={'large'} style={{ width: '100%', marginTop: 50 }}>\r\n                <Header icon={'filter'} attached color={'teal'} content={'Filters'} />\r\n                <Menu.Item\r\n                    active={!predicate.has(constants.PREDICATE_IS_GOING) && !predicate.has(constants.PREDICATE_IS_HOST)}\r\n                    onClick={() => setPredicate(constants.PREDICATE_ALL, 'true')}\r\n                    color={'blue'}\r\n                    name={'all'}\r\n                    content={'All Activities'} />\r\n\r\n                <Menu.Item\r\n                    active={predicate.has(constants.PREDICATE_IS_GOING)}\r\n                    onClick={() => setPredicate(constants.PREDICATE_IS_GOING, 'true')}\r\n                    color={'blue'}\r\n                    name={'username'}\r\n                    content={\"I'm Going\"} />\r\n\r\n                <Menu.Item\r\n                    active={predicate.has(constants.PREDICATE_IS_HOST)}\r\n                    onClick={() => setPredicate(constants.PREDICATE_IS_HOST, 'true')}\r\n                    color={'blue'}\r\n                    name={'host'}\r\n                    content={\"I'm hosting\"}\r\n                />\r\n            </Menu>\r\n            <Header icon={'calendar'} attached color={'teal'} content={'Select Date'} />\r\n            <Calendar\r\n                onChange={(date) => setPredicate(constants.PREDICATE_START_DATE, date!)}\r\n                value={predicate.get(constants.PREDICATE_START_DATE) || new Date()}\r\n            />\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default observer(ActivityFilter);","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nconst ActivityListLoader = () => {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 50 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default ActivityListLoader;","import React, { useEffect, useContext } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\n\r\nimport ActivityList from './ActivityList';\r\nimport { rootStoreContext } from '../../../stores/rootStore';\r\nimport Spinner from '../../../layout/Spinner';\r\nimport ActivityFilter from './ActivityFilter';\r\nimport ActivityListLoader from './ActivityListLoader';\r\n\r\nconst ActivityDashboard: React.FC = () => {\r\n    const rootStoreObj = useContext(rootStoreContext);\r\n    const { loadActivities, isLoadingActivities, setPageNumber, currentPageNumber, totalPages } = rootStoreObj.activityStore;\r\n\r\n    useEffect(() => {\r\n        const fetch = async () => {\r\n            await loadActivities();\r\n        }\r\n        fetch();\r\n    }, [loadActivities]);\r\n\r\n    const loadNextHandler = async () => {\r\n        setPageNumber(currentPageNumber + 1);\r\n        await loadActivities();\r\n    };\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10} >\r\n                {(isLoadingActivities && currentPageNumber === 0)\r\n                    ? (<ActivityListLoader />) : (\r\n                        <InfiniteScroll\r\n                            pageStart={0}\r\n                            loadMore={loadNextHandler}\r\n                            hasMore={!isLoadingActivities && currentPageNumber + 1 < totalPages}\r\n                            initialLoad={false}>\r\n                            <ActivityList />\r\n                        </InfiniteScroll>\r\n                    )}\r\n            </Grid.Column>\r\n            <Grid.Column width={6} >\r\n                <ActivityFilter />\r\n            </Grid.Column>\r\n            <Grid.Column width={10} >\r\n                <Spinner loading={isLoadingActivities} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default observer(ActivityDashboard);","import React from 'react';\r\nimport { Dimmer, Loader } from 'semantic-ui-react';\r\n\r\nconst ProgressBar: React.FC<{\r\n    message: string,\r\n    inverted?: boolean\r\n}> = ({ message = \"Loading\", inverted = true }) => {\r\n    return (\r\n        <Dimmer active inverted={inverted}>\r\n            <Loader content={message} />\r\n        </Dimmer>\r\n    )\r\n};\r\n\r\nexport default ProgressBar;","import React from 'react';\r\nimport { FieldRenderProps } from 'react-final-form';\r\nimport { FormFieldProps, Form, Label } from 'semantic-ui-react';\r\n\r\ninterface IProps extends FieldRenderProps<string, HTMLElement>, FormFieldProps { }\r\n\r\nconst TextAreaInput: React.FC<IProps> = ({\r\n    input,\r\n    width,\r\n    rows,\r\n    placeholder,\r\n    meta: { touched, error }\r\n}) => {\r\n    return (\r\n        <Form.Field error={touched && !!error} width={width}>\r\n            <textarea rows={rows} {...input} placeholder={placeholder} />\r\n            {touched && error && (\r\n                <Label basic color='red'>\r\n                    {error}\r\n                </Label>\r\n            )}\r\n        </Form.Field>\r\n    );\r\n};\r\n\r\nexport default TextAreaInput;","import React, { Fragment, useContext, useEffect, useState } from 'react';\r\nimport { Segment, Header, Comment, Button, Form } from 'semantic-ui-react';\r\nimport { Form as FinalForm, Field } from 'react-final-form';\r\nimport moment from 'moment';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { rootStoreContext } from '../../../stores/rootStore';\r\nimport { IComment } from '../../../models/IActivity';\r\nimport * as constants from '../../../utils/constants';\r\nimport TextAreaInput from '../../../common/elements/TextAreaInput';\r\nimport Spinner from '../../../layout/Spinner';\r\n\r\n\r\nconst ActivityDetailChat: React.FC = () => {\r\n    const rootStoreObject = useContext(rootStoreContext);\r\n    const { addComment, selectedActivity, getComments } = rootStoreObject.activityStore;\r\n    const { createHubConnection, stopHubConnection } = rootStoreObject.activityHubStore;\r\n    const [isLoadingComments, setIsLoadingComments] = useState(false);\r\n\r\n\r\n    useEffect(() => {\r\n        if (selectedActivity) {\r\n            createHubConnection(selectedActivity.id);\r\n\r\n            //Stop hub connection on component unmount\r\n            return () => {\r\n                return stopHubConnection(selectedActivity.id);\r\n            };\r\n        }\r\n    }, [createHubConnection, stopHubConnection, selectedActivity]);\r\n\r\n    useEffect(() => {\r\n        const load = async () => {\r\n            setIsLoadingComments(true);\r\n            await getComments();\r\n            setIsLoadingComments(false);\r\n        };\r\n        if (selectedActivity)\r\n            load();\r\n    }, [getComments, selectedActivity]);\r\n\r\n    if (isLoadingComments)\r\n        return <Spinner message=\"Loading Comment\" loading={true} />\r\n\r\n    return (\r\n        <Fragment>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{ border: 'none' }}>\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Comment.Group>\r\n                    {\r\n                        selectedActivity && selectedActivity!.comments &&\r\n                        selectedActivity.comments.map((comment: IComment) => {\r\n                            return (\r\n                                <Comment key={comment.id}>\r\n                                    <Comment.Avatar src={comment.userImage || '/assets/user.png'} />\r\n                                    <Comment.Content>\r\n                                        <Comment.Author as={Link} to={`${constants.NAV_USER_PROFILE}/${comment?.userId}`}>\r\n                                            {comment.userDisplayName}\r\n                                        </Comment.Author>\r\n                                        <Comment.Metadata>\r\n                                            <div>{moment(comment.createdAt).format('dddd Do MMM')} at {moment(comment.createdAt).format('h:mm A')}  </div>\r\n                                        </Comment.Metadata>\r\n                                        <Comment.Text>{comment.body}</Comment.Text>\r\n                                    </Comment.Content>\r\n                                </Comment>)\r\n                        })\r\n                    }\r\n                    <FinalForm\r\n                        onSubmit={addComment}\r\n                        render={({ handleSubmit, submitting, pristine, form }) => (\r\n                            <Form onSubmit={() => handleSubmit()!.then(() => form.reset())}>\r\n                                <Field\r\n                                    name='Body'\r\n                                    component={TextAreaInput}\r\n                                    rows={2}\r\n                                    placeholder='Add your comment'\r\n                                />\r\n\r\n                                <Button\r\n                                    content='Add Reply'\r\n                                    labelPosition='left'\r\n                                    icon='edit'\r\n                                    primary\r\n                                    loading={submitting}\r\n                                    disabled={pristine}\r\n                                />\r\n                            </Form>\r\n                        )}\r\n                    />\r\n                </Comment.Group>\r\n            </Segment>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default observer(ActivityDetailChat);","import React, { useState, useContext } from 'react';\r\nimport { Segment, Image, Item, Header, Button } from 'semantic-ui-react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Link } from 'react-router-dom';\r\nimport moment from 'moment';\r\n\r\nimport { IActivity } from '../../../models/IActivity';\r\nimport * as constants from '../../../utils/constants';\r\nimport { rootStoreContext } from '../../../stores/rootStore';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\nconst ActivityDetailHeader: React.FC<{ activity: IActivity | undefined }> = ({ activity }) => {\r\n    const rootStoreObject = useContext(rootStoreContext);\r\n\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n\r\n    const attendActivity = async () => {\r\n        setLoading(true);\r\n        try {\r\n            await rootStoreObject.activityStore.attend(activity!);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const unAttendActivity = async () => {\r\n        setLoading(true);\r\n        try {\r\n            await rootStoreObject.activityStore.unattend(activity!);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{ padding: '0' }}>\r\n                <Image\r\n                    src={`/assets/categoryImages/${activity?.category}.jpg`}\r\n                    fluid style={activityImageStyle} />\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header size='huge' content={activity?.title} style={{ color: 'white' }} />\r\n                                <p>{moment(activity?.date).format('dddd Do MMM')}</p>\r\n                                <p>\r\n                                    Hosted by{' '}\r\n                                    <Link to={`${constants.NAV_USER_PROFILE}/${activity?.host?.appUserId}`}>\r\n                                        <strong>{activity?.host?.displayName}</strong>\r\n                                    </Link>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached=\"bottom\">                \r\n                {\r\n                    !activity?.isCurrentUserHost && !activity?.isCurrentUserGoing &&\r\n                    <Button loading={loading} onClick={attendActivity} color='teal'>Join Activity</Button>\r\n                }\r\n                {\r\n                    !activity?.isCurrentUserHost && activity?.isCurrentUserGoing &&\r\n                    <Button loading={loading} onClick={unAttendActivity} >Cancel attendence</Button>\r\n                }\r\n                {activity?.isCurrentUserHost &&\r\n                    <Button as={Link} to={`${constants.NAV_MANAGE_ACTIVITY}/${activity?.id}`}\r\n                        color='orange' floated='right'>Manage Event</Button>\r\n                }\r\n            </Segment>\r\n        </Segment.Group>\r\n    );\r\n};\r\n\r\nexport default observer(ActivityDetailHeader);","import React from 'react';\r\nimport { Segment, Grid, Icon } from 'semantic-ui-react';\r\nimport moment from 'moment';\r\n\r\nimport { IActivity } from '../../../models/IActivity';\r\n\r\nconst ActivityDetailInfo: React.FC<{ activity: IActivity | undefined }> = ({ activity }) => {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity?.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <span>{moment(activity?.date).format('dddd Do MMM')} at {moment(activity?.date).format('h:mm A')}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>\r\n                            {activity?.venue}, {activity?.city}\r\n                        </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    );\r\n};\r\n\r\nexport default ActivityDetailInfo;","import React, { Fragment } from 'react';\r\nimport { Segment, List, Image, Item, Label } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { IAttendee } from '../../../models/IActivity';\r\nimport { NAV_USER_PROFILE } from '../../../utils/constants';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\ninterface IProps {\r\n    attendees: IAttendee[]\r\n}\r\n\r\nconst ActivityDetailedSidebar: React.FC<IProps> = ({ attendees }) => {\r\n    return (\r\n        <Fragment>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'>\r\n                {`${attendees?.length} ${attendees?.length > 1 ? 'People' : 'Person'} going`}\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {\r\n                        attendees?.map((attendee: IAttendee) => {\r\n                            return (\r\n                                <Item key={attendee.appUserId} style={{ position: 'relative' }}>\r\n                                    {attendee.isHost &&\r\n                                        (<Label\r\n                                            style={{ position: 'absolute' }}\r\n                                            color='orange'\r\n                                            ribbon='right'>\r\n                                            Host\r\n                                        </Label>)\r\n                                    }\r\n                                    <Image size='tiny' src={attendee.image || '/assets/user.png'} />\r\n                                    <Item.Content verticalAlign='middle'>\r\n                                        <Item.Header as='h3'>\r\n                                            <Link to={`${NAV_USER_PROFILE}/${attendee.appUserId}`}>\r\n                                                {attendee.displayName}\r\n                                            </Link>\r\n                                        </Item.Header>\r\n                                        {attendee.following &&\r\n                                            <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>\r\n                                        }\r\n                                    </Item.Content>\r\n                                </Item>\r\n                            );\r\n                        })\r\n                    }\r\n                </List>\r\n            </Segment>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default observer(ActivityDetailedSidebar);","import React, { useContext, useEffect } from 'react';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nimport { rootStoreContext } from '../../../stores/rootStore';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport ProgressBar from '../../../layout/ProgressBar';\r\nimport ActivityDetailChat from './ActivityDetailChat';\r\nimport ActivityDetailHeader from './ActivityDetailHeader';\r\nimport ActivityDetailInfo from './ActivityDetailInfo';\r\nimport ActivityDetailSidebar from './ActivityDetailedSidebar';\r\n\r\ninterface iRouteProps {\r\n    id: string;\r\n};\r\n\r\nconst ActivityDetails: React.FC<RouteComponentProps<iRouteProps>> = (props) => {\r\n    const rootStoreObj = useContext(rootStoreContext);\r\n    const activityStoreObj = rootStoreObj.activityStore;\r\n    const { loadActivity, selectedActivity } = activityStoreObj;\r\n\r\n    useEffect(() => {\r\n        if (props.match.params.id && props.match.params.id.length > 0) {\r\n            const load = async () => {\r\n                await loadActivity(props.match.params.id);\r\n            };\r\n            load();\r\n        }\r\n    }, [loadActivity, props.match.params.id]);\r\n\r\n    if (activityStoreObj.isLoadingActivity)\r\n        return <ProgressBar message=\"Loading Activity\" />\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityDetailHeader activity={selectedActivity!} />\r\n                <ActivityDetailInfo activity={selectedActivity!} />\r\n                <ActivityDetailChat />\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <ActivityDetailSidebar attendees={selectedActivity?.attendees!} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n};\r\n\r\nexport default observer(ActivityDetails);","export interface IUserActivity {\r\n    activityId: string;\r\n    title: string;\r\n    description: string;\r\n    category: string;\r\n    date: Date;\r\n};\r\n\r\nexport interface IActivity {\r\n    id: string;\r\n    title: string;\r\n    description: string;\r\n    category: string;\r\n    date: Date;\r\n    city: string;\r\n    venue: string;\r\n    host: IAttendee | null;\r\n    isCurrentUserGoing: boolean;\r\n    isCurrentUserHost: boolean;\r\n    attendees: IAttendee[];\r\n    comments: IComment[];\r\n};\r\n\r\nexport interface IComment {\r\n    id: string;\r\n    body: string;\r\n    createdAt: Date;\r\n    userId: string;\r\n    userDisplayName: string;\r\n    userImage: string;\r\n}\r\n\r\nexport interface IAttendee {\r\n    appUserId: string,\r\n    displayName: string,\r\n    image: string,\r\n    isHost: boolean,\r\n    following?: boolean\r\n};\r\n\r\n//following \"extends Partial<IActivity>\" line will inherit all the properties from IActivity and make all them optional \r\nexport interface IActivityFormValues extends Partial<IActivity> {\r\n    time?: Date\r\n}\r\n\r\nexport class ActivityFormValues implements IActivityFormValues {\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    description: string = '';\r\n    category: string = '';\r\n    date?: Date = undefined;\r\n    time?: Date = undefined;\r\n    city: string = '';\r\n    venue: string = '';\r\n\r\n    constructor(value?: IActivityFormValues) {\r\n        Object.assign(this, value);\r\n        if (value && value.date)\r\n            this.time = value.date;\r\n    }\r\n}","//import moment from \"moment\";\r\n\r\nexport const combineDateAndTime = (date: Date, time: Date) => {\r\n    const year = date.getFullYear();\r\n    const month = date.getMonth() + 1;\r\n    const day = date.getDate();\r\n    const dateString = `${year}-${month}-${day}`;\r\n    const timeString = time.getHours() + ':' + time.getMinutes() + ':00';\r\n    const dt = new Date(dateString + ' ' + timeString);\r\n\r\n    //const dt2 = moment(`${dateString}${timeString}`, \"YYYY-MM-DDHH:mm:SS\").local();\r\n    return dt;\r\n    //return dt2;\r\n};\r\n\r\n//export const combineDateAndTime = (date: Date, time: Date) => {\r\n\r\n//    //const year = date.getFullYear();\r\n//    //const month = date.getMonth() + 1;\r\n//    //const day = date.getDate();\r\n//    //const dateString = date.toISOString().split('T')[0];\r\n//    //const timeString = time.toISOString().split(' ')[0];\r\n\r\n//    //const dtIso = new Date(dateString + 'T' + timeString + '.000Z');\r\n//    //return dtIso;\r\n//    //console.log(dateString + 'T' + timeString);\r\n\r\n//    //console.log(moment(date.toISOString()).format('YYYY-MM-DD') + 'T' + moment(time.toISOString()).format('HH:mm:SS') + '.000Z');\r\n\r\n//    //const dtLocal = new Date(moment(date).format('YYYY-MM-DD') + 'T' + moment(time.toISOString()).format('HH:mm:SS') + '.000Z');\r\n\r\n//    ////const dtLocal: Date = moment(dtIso).local().toDate();\r\n//    //console.log(dtLocal);\r\n//    //return dtLocal;\r\n//};","import React from 'react';\r\nimport { FieldRenderProps } from 'react-final-form';\r\nimport { FormFieldProps, Form, Label } from 'semantic-ui-react';\r\n\r\ninterface IProps extends FieldRenderProps<string, HTMLElement>, FormFieldProps { }\r\n\r\nconst TextInput: React.FC<IProps> = ({\r\n    input,\r\n    width,\r\n    type,\r\n    placeholder,\r\n    meta: { touched, error }\r\n}) => {\r\n    return (\r\n        <Form.Field error={touched && !!error} type={type} width={width}>\r\n            <input {...input} placeholder={placeholder} />\r\n            {touched && error && (\r\n                <Label basic color='red'>\r\n                    {error}\r\n                </Label>\r\n            )}\r\n        </Form.Field>\r\n    );\r\n};\r\n\r\nexport default TextInput;\r\n","import React from 'react';\r\nimport { FieldRenderProps } from 'react-final-form';\r\nimport { FormFieldProps, Form, Select, Label } from 'semantic-ui-react';\r\n\r\ninterface IProps extends FieldRenderProps<string, HTMLElement>, FormFieldProps { }\r\n\r\nconst SelectInput: React.FC<IProps> = ({\r\n    input,\r\n    options,\r\n    width,\r\n    placeholder,\r\n    meta: { touched, error } }) => {\r\n    return (\r\n        <Form.Field error={touched && !!error} width={width}>\r\n            <Select placeholder={placeholder}\r\n                value={input.value}\r\n                options={options}\r\n                onChange={(_event, data) => input.onChange(data.value)}>\r\n            </Select>\r\n            {touched && error && (\r\n                <Label basic color='red'>\r\n                    {error}\r\n                </Label>\r\n            )}\r\n        </Form.Field>\r\n    )\r\n};\r\n\r\nexport default SelectInput;","import React from 'react';\r\nimport { FieldRenderProps } from 'react-final-form';\r\nimport { FormFieldProps, Form, Label } from 'semantic-ui-react';\r\nimport { DateTimePicker } from 'react-widgets';\r\n\r\ninterface IProps extends FieldRenderProps<Date, HTMLElement>, FormFieldProps { }\r\n\r\nconst DateInput: React.FC<IProps> = ({\r\n    input,\r\n    width,\r\n    date = false,\r\n    time = false,\r\n    placeholder,\r\n    meta: { touched, error },\r\n    ...rest\r\n}) => {\r\n    return (\r\n        <Form.Field error={touched && !!error} width={width}>\r\n            <DateTimePicker\r\n                placeholder={placeholder}\r\n                value={input.value || undefined}\r\n                onChange={input.onChange}\r\n                onBlur={input.onBlur}\r\n                onKeyDown={(e) => e.preventDefault()}\r\n                date={date}\r\n                time={time}\r\n            />\r\n\r\n            {touched && error && (\r\n                <Label basic color='red'>\r\n                    {error}\r\n                </Label>\r\n            )}\r\n        </Form.Field>\r\n    );\r\n};\r\n\r\nexport default DateInput;","export const categoryOptions = [\r\n    { key: 'drinks', text: 'Drinks', value: 'drinks' },\r\n    { key: 'culture', text: 'Culture', value: 'culture' },\r\n    { key: 'film', text: 'Film', value: 'film' },\r\n    { key: 'food', text: 'Food', value: 'food' },\r\n    { key: 'music', text: 'Music', value: 'music' },\r\n    { key: 'travel', text: 'Travel', value: 'travel' }\r\n];","import React, { useState, useContext, useEffect } from 'react';\r\nimport { Form, Segment, Button, Grid } from 'semantic-ui-react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Form as FinalForm, Field } from 'react-final-form';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { combineValidators, isRequired, composeValidators, hasLengthGreaterThan } from 'revalidate';\r\n\r\nimport { rootStoreContext } from '../../../stores/rootStore';\r\nimport { ActivityFormValues } from '../../../models/IActivity';\r\nimport * as constants from '../../../utils/constants';\r\nimport * as util from '../../../utils/util';\r\nimport TextInput from '../../../common/elements/TextInput';\r\nimport TextAreaInput from '../../../common/elements/TextAreaInput';\r\nimport SelectInput from '../../../common/elements/SelectInput';\r\nimport DateInput from '../../../common/elements/DateInput';\r\nimport { categoryOptions } from '../../../common/options/categoryOptions';\r\nimport createBrowserHistory from '../../../utils/createBrowserHistory';\r\n\r\ninterface IRouteProp {\r\n    id: string;\r\n}\r\n\r\nconst validationRules = combineValidators({\r\n    title: isRequired({ message: 'The Event title is required' }),\r\n    description: composeValidators(\r\n        isRequired('Description'),\r\n        hasLengthGreaterThan(4)({ message: 'Description needs to be at least 5 characters' }),\r\n    )(),\r\n    category: isRequired({ message: 'The Event category is required' }),\r\n    date: isRequired('Date'),\r\n    time: isRequired('Time'),\r\n    city: isRequired('City'),\r\n    venue: isRequired('Venue')\r\n});\r\n\r\nconst ActivityForm: React.FC<RouteComponentProps<IRouteProp>> = (props) => {\r\n    const rootStoreObj = useContext(rootStoreContext);\r\n    const activityStoreObj = rootStoreObj.activityStore;\r\n    const { loadActivity } = activityStoreObj;\r\n    const [activity, setActivity] = useState(new ActivityFormValues());\r\n\r\n    useEffect(() => {\r\n        if (props.match.params.id) {\r\n            loadActivity(props.match.params.id)\r\n                .then((activity) => {\r\n                    setActivity(new ActivityFormValues(activity));\r\n                })\r\n        }\r\n    }, [loadActivity, props.match.params.id]);\r\n\r\n    const redirectToDetailPage = (id: string) => {\r\n        createBrowserHistory.push(`${constants.NAV_ACTIVITY_DETAIL}/${id}`);\r\n    }\r\n\r\n    const onCancelClickHandler = () => {\r\n        if (activity.id)\r\n            redirectToDetailPage(activity.id);\r\n        else\r\n            createBrowserHistory.push(constants.NAV_ACTIVITIES);\r\n    }\r\n\r\n    const onFinalFormSubmit = async (values: any) => {\r\n        const { date, time, ...activity } = values;\r\n        activity.date = util.combineDateAndTime(values.date!, values.time!);\r\n        if (activity.id) {\r\n            const isSuccess = await activityStoreObj.editActivity(activity);\r\n            if (isSuccess)\r\n                redirectToDetailPage(activity.id);\r\n        }\r\n        else {\r\n            const id = await activityStoreObj.createActivity(activity);\r\n            if (id && id !== '') {\r\n                activity.id = id;\r\n                redirectToDetailPage(id);\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <Segment clearing>\r\n                    <FinalForm onSubmit={onFinalFormSubmit}\r\n                        validate={validationRules}\r\n                        initialValues={activity}\r\n                        render={(props) => (\r\n                            <Form\r\n                                onSubmit={props.handleSubmit}\r\n                                loading={activityStoreObj.isLoadingActivity}>\r\n                                <Field\r\n                                    name='title'\r\n                                    placeholder='Title'\r\n                                    value={activity.title}\r\n                                    component={TextInput}\r\n                                />\r\n\r\n                                <Field\r\n                                    name=\"description\"\r\n                                    placeholder=\"Description\"\r\n                                    rows={3}\r\n                                    value={activity.description}\r\n                                    component={TextAreaInput}\r\n                                />\r\n\r\n                                <Field\r\n                                    name=\"category\"\r\n                                    placeholder=\"Category\"\r\n                                    value={activity.category}\r\n                                    component={SelectInput}\r\n                                    options={categoryOptions}\r\n                                />\r\n\r\n                                <Form.Group widths='equal'>\r\n                                    <Field component={DateInput}\r\n                                        name=\"date\"\r\n                                        placeholder=\"Date\"\r\n                                        date={true}\r\n                                        value={activity.date}\r\n                                    />\r\n\r\n                                    <Field component={DateInput}\r\n                                        name=\"time\"\r\n                                        placeholder=\"Time\"\r\n                                        time={true}\r\n                                        value={activity.time}\r\n                                    />\r\n                                </Form.Group>\r\n\r\n                                <Field\r\n                                    name=\"city\"\r\n                                    placeholder=\"City\"\r\n                                    value={activity.city}\r\n                                    component={TextInput}\r\n                                />\r\n\r\n                                <Field\r\n                                    name=\"venue\"\r\n                                    placeholder=\"Venue\"\r\n                                    value={activity.venue}\r\n                                    component={TextInput}\r\n                                />\r\n\r\n                                <Button\r\n                                    floated=\"right\"\r\n                                    type=\"Submit\"\r\n                                    loading={activityStoreObj.isSaving}\r\n                                    disabled={activityStoreObj.isLoadingActivity || props.invalid || props.pristine}\r\n                                    positive content=\"Submit\" />\r\n\r\n                                <Button\r\n                                    onClick={onCancelClickHandler}\r\n                                    floated=\"right\"\r\n                                    type=\"Button\"\r\n                                    disabled={activityStoreObj.isLoadingActivity}\r\n                                    content=\"Cancel\" />\r\n                            </Form>\r\n                        )}>\r\n                    </FinalForm>\r\n                </Segment>\r\n            </Grid.Column>\r\n        </Grid >\r\n    );\r\n};\r\n\r\nexport default observer(ActivityForm);","import React from 'react';\r\nimport { AxiosResponse } from 'axios';\r\nimport { Message } from 'semantic-ui-react';\r\n\r\ninterface IProps {\r\n    error: AxiosResponse,\r\n    text?: string\r\n};\r\n\r\nconst ErrorMessage: React.FC<IProps> = (props) => {\r\n    return (\r\n        <Message negative>\r\n            <Message.Header>{props.error.statusText}</Message.Header>\r\n\r\n            {props.error.data && Object.keys(props.error.data).length > 0 &&\r\n                (\r\n                    <Message.List>\r\n                        {Object.values(props.error.data.errors).flat().map((err: string, idx: number) => {\r\n                            return (<Message.Item key={idx}>{err}</Message.Item>);\r\n                        })}\r\n                    </Message.List>\r\n                )}\r\n\r\n            {props.text && (<Message.Content>{props.text}</Message.Content>)}\r\n        </Message>\r\n    );\r\n}\r\n\r\nexport default ErrorMessage;","import React, { Fragment, useContext, useEffect } from 'react';\r\nimport { Form, Button, Header } from 'semantic-ui-react';\r\nimport { Form as FinalForm, Field } from 'react-final-form';\r\nimport { combineValidators, isRequired } from 'revalidate';\r\nimport { FORM_ERROR } from 'final-form';\r\n\r\nimport { ILogin } from '../../../models/IUser';\r\nimport TextInput from '../../../common/elements/TextInput';\r\nimport { rootStoreContext } from '../../../stores/rootStore';\r\nimport createBrowserHistory from '../../../utils/createBrowserHistory';\r\nimport * as constants from '../../../utils/constants';\r\nimport ModelContainer, { modalSize } from '../../../common/modals/modalContainer';\r\nimport ErrorMessage from '../../../common/elements/ErrorMessage';\r\n//import FBLogin from '../FBLogin';\r\n\r\nconst LoginForm = () => {\r\n    const rootStoreObj = useContext(rootStoreContext);\r\n    const userStoreObj = rootStoreObj.userStore;\r\n\r\n    const validationRules = combineValidators({\r\n        userName: isRequired('User name'),\r\n        password: isRequired('Password')\r\n    });\r\n\r\n    const redirectToHomePage = () => {\r\n        createBrowserHistory.push(constants.NAV_HOME);\r\n    };\r\n\r\n    useEffect(() => {\r\n        // If user is already logged in, redirect user to home page.\r\n        if (userStoreObj.canAccessSecureResource) {\r\n            redirectToHomePage();\r\n        }\r\n    }, [userStoreObj.canAccessSecureResource]);\r\n\r\n    const onLoginHandler = async (values: ILogin) => {\r\n        try {\r\n            await userStoreObj.login(values);\r\n            createBrowserHistory.push(constants.NAV_ACTIVITIES);\r\n        } catch (err) {\r\n            //Return Form Error to React Final Form, It will populate the submitError prop\r\n            return { [FORM_ERROR]: err.statusText }\r\n        }\r\n    };\r\n\r\n    const getContent = () => {\r\n        return (<FinalForm\r\n            onSubmit={onLoginHandler}\r\n            validate={validationRules}\r\n            render={(props) => (\r\n                <Form>\r\n                    <Header\r\n                        as=\"h2\"\r\n                        content=\"Login to Social Network\"\r\n                        color=\"teal\"\r\n                        textAlign=\"center\" />\r\n\r\n                    <Field name=\"userName\"\r\n                        component={TextInput}\r\n                        placeholder='User Name' />\r\n\r\n                    <Field name=\"password\"\r\n                        type=\"Password\"\r\n                        component={TextInput}\r\n                        placeholder='Password' />\r\n\r\n                    {props.submitError && !props.dirtySinceLastSubmit &&\r\n                        (<ErrorMessage error={props.submitError} text='Invalid user name or password' />)\r\n                    }\r\n\r\n                    <Button\r\n                        loading={props.submitting}\r\n                        disabled={(props.invalid && !props.dirtySinceLastSubmit) || props.pristine}\r\n                        onClick={props.handleSubmit}\r\n                        content=\"Login\"\r\n                        color=\"teal\"\r\n                        fluid\r\n                    />\r\n                    {/*\r\n                     * <Divider horizontal>Or</Divider>\r\n                    <FBLogin fbResponseCallback={userStoreObj.fbResponseHandler} />\r\n                                *<pre>{JSON.stringify(props.form.getState(), null, 2)} </pre> \r\n                            */}\r\n                </Form>\r\n            )}\r\n        />);\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <ModelContainer\r\n                defaultOpen={true}\r\n                content={getContent()}\r\n                onClose={redirectToHomePage}\r\n                size={modalSize.Tiny} />\r\n        </Fragment>\r\n    );\r\n\r\n};\r\n\r\nexport default LoginForm;","import { createValidator } from 'revalidate';\r\n\r\nexport const isValidEmail = createValidator(\r\n    message => value => {\r\n        if (value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\r\n            return message\r\n        }\r\n    },\r\n    'Invalid email address'\r\n)\r\n\r\nexport const isValidPassword = createValidator(\r\n    message => value => {\r\n        if (value && !/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[#$^+=!*()@%&]).{6,10}$$/g.test(value)) {\r\n            return message\r\n        }\r\n    },\r\n    'Password requires atleast 1 lower case letter, 1 capital letter, 1 digit, 1 special character' +\r\n        ' and the length should be between 6-10 characters.'\r\n)\r\n\r\nexport const isGreaterThan = (n: number) => createValidator(\r\n    message => value => {\r\n        if (value && Number(value) <= n) {\r\n            return message\r\n        }\r\n    },\r\n    field => `${field} must be greater than ${n}`\r\n)","import React, { useContext } from 'react';\r\nimport { Form, Button, Header } from 'semantic-ui-react';\r\nimport { Form as FinalForm, Field } from 'react-final-form';\r\nimport { combineValidators, isRequired, composeValidators, hasLengthGreaterThan, hasLengthLessThan } from 'revalidate';\r\nimport { FORM_ERROR } from 'final-form';\r\n\r\nimport { IRegister } from '../../../models/IUser';\r\nimport TextInput from '../../../common/elements/TextInput';\r\nimport { rootStoreContext } from '../../../stores/rootStore';\r\nimport createBrowserHistory from '../../../utils/createBrowserHistory';\r\nimport { isValidEmail, isValidPassword } from '../../../utils/customValidators';\r\nimport * as constants from '../../../utils/constants';\r\nimport ModelContainer, { modalSize } from '../../../common/modals/modalContainer';\r\nimport ErrorMessage from '../../../common/elements/ErrorMessage';\r\n\r\nconst RegisterForm = () => {\r\n    const rootStoreObj = useContext(rootStoreContext);\r\n    const userStoreObj = rootStoreObj.userStore;\r\n    const onClose = () => {\r\n        createBrowserHistory.push(constants.NAV_HOME);\r\n    };\r\n\r\n    const validationRules = combineValidators({\r\n        firstName: composeValidators(\r\n            isRequired('First name'),\r\n            hasLengthGreaterThan(1)({ message: 'First name must contain atleast 2 characters!' }),\r\n            hasLengthLessThan(25)({ message: 'First name must be 24 characters or less!' })\r\n        )(),\r\n        lastName: composeValidators(\r\n            isRequired('Last name'),\r\n            hasLengthGreaterThan(1)({ message: 'Last name must contain atleast 2 characters!' }),\r\n            hasLengthLessThan(25)({ message: 'Last name must be 24 characters or less!' })\r\n        )(),\r\n        email: composeValidators(\r\n            isRequired('Email'),\r\n            isValidEmail\r\n        )(),\r\n        userName: composeValidators(\r\n            isRequired('User name'),\r\n            hasLengthGreaterThan(5)({ message: 'User name must contain atleast 6 characters!' }),\r\n            hasLengthLessThan(25)({ message: 'User name must be 24 characters or less!' })\r\n        )(),\r\n        password: composeValidators(\r\n            isRequired('Password'),\r\n            hasLengthGreaterThan(5)({ message: 'Password must contain atleast 6 characters!' }),\r\n            hasLengthLessThan(11)({ message: 'Password must be 10 characters or less!' }),\r\n            isValidPassword\r\n        )()\r\n    });\r\n\r\n    const onRegisterHandler = async (values: IRegister) => {\r\n        try {\r\n            await userStoreObj.register(values);\r\n            createBrowserHistory.push(constants.NAV_HOME);\r\n        } catch (err) {\r\n            return { [FORM_ERROR]: err };\r\n        }\r\n    };\r\n\r\n    const getModalContent = () => {\r\n        return (\r\n            <FinalForm\r\n                onSubmit={onRegisterHandler}\r\n                validate={validationRules}\r\n                render={(props) => (\r\n                    <Form>\r\n                        <Header\r\n                            as=\"h2\"\r\n                            content=\"Register\"\r\n                            color=\"teal\"\r\n                            textAlign=\"center\" />\r\n\r\n                        <Field name=\"firstName\"\r\n                            component={TextInput}\r\n                            placeholder='First Name' />\r\n\r\n                        <Field name=\"lastName\"\r\n                            component={TextInput}\r\n                            placeholder='Last Name' />\r\n\r\n                        <Field name=\"email\"\r\n                            component={TextInput}\r\n                            placeholder='Email' />\r\n\r\n                        <Field name=\"userName\"\r\n                            component={TextInput}\r\n                            placeholder='User Name' />\r\n\r\n                        <Field name=\"password\"\r\n                            type=\"Password\"\r\n                            component={TextInput}\r\n                            placeholder='Password' />\r\n\r\n                        {props.submitError && !props.dirtySinceLastSubmit &&\r\n                            (<ErrorMessage error={props.submitError} />)\r\n                        }\r\n\r\n                        <Button\r\n                            loading={props.submitting}\r\n                            disabled={(props.invalid && !props.dirtySinceLastSubmit) || props.pristine}\r\n                            onClick={props.handleSubmit}\r\n                            content=\"Register\"\r\n                            color=\"teal\"\r\n                            fluid\r\n                        />\r\n                        {/*{<pre>{JSON.stringify(props.form.getState(), null, 2)}</pre>} */}\r\n                    </Form>\r\n                )}\r\n            />\r\n        );\r\n    };\r\n\r\n    return (\r\n        <ModelContainer\r\n            defaultOpen={true}\r\n            content={getModalContent()}\r\n            onClose={onClose}\r\n            size={modalSize.Tiny}\r\n        />\r\n    );\r\n};\r\n\r\nexport default RegisterForm;","import React, { useContext, Fragment, useState } from 'react';\r\nimport { Segment, Item, Header, Button, Grid, Statistic, Divider, Reveal } from 'semantic-ui-react';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nimport { rootStoreContext } from '../../stores/rootStore';\r\n\r\nconst ProfileHeader = () => {\r\n    const rootStoreObj = useContext(rootStoreContext);\r\n    const [isUpdatingFollowFlag, setIsUpdatingFollowFlag] = useState(false);\r\n    const { userProfile, follow, unfollow, isViewingOwnProfile } = rootStoreObj.profileStore;\r\n\r\n    const onFollowClickHandler = async () => {\r\n        setIsUpdatingFollowFlag(true);\r\n        if (userProfile!.following)\r\n            await unfollow(userProfile!.appUserId);\r\n        else\r\n            await follow(userProfile!.appUserId);\r\n        setIsUpdatingFollowFlag(false);\r\n    };\r\n\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={userProfile?.mainPhoto?.url || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1'>{userProfile?.displayName}</Header>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group widths={2}>\r\n                        <Statistic label='Followers' value={userProfile?.followersCount} />\r\n                        <Statistic label='Following' value={userProfile?.followingCount} />\r\n                    </Statistic.Group>\r\n                    {\r\n                        userProfile && !isViewingOwnProfile ?\r\n                            (\r\n                                <Fragment>\r\n                                    <Divider />\r\n                                    <Reveal animated='move'>\r\n                                        <Fragment>\r\n                                            <Reveal.Content hidden>\r\n                                                <Button\r\n                                                    onClick={() => onFollowClickHandler()}\r\n                                                    content={userProfile!.following ? 'Unfollow' : 'Follow'}\r\n                                                    loading={isUpdatingFollowFlag}\r\n                                                    className={userProfile!.following ? 'negative' : 'positive'}\r\n                                                    fluid basic />\r\n                                            </Reveal.Content>)\r\n                                            <Reveal.Content visible style={{ width: '100%' }}>\r\n                                                <Button\r\n                                                    content={userProfile!.following ? 'Following' : 'Not following'}\r\n                                                    fluid color='teal' />\r\n                                            </Reveal.Content>\r\n                                        </Fragment>\r\n                                    </Reveal>\r\n                                </Fragment>\r\n                            ) : \"\"\r\n                    }\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    );\r\n};\r\n\r\nexport default observer(ProfileHeader);\r\n","import React, { useCallback } from 'react';\r\nimport { useDropzone } from 'react-dropzone';\r\nimport { Icon, Header } from 'semantic-ui-react';\r\n\r\nconst dropzoneStyles = {\r\n    border: 'dashed 3px',\r\n    borderColor: '#eee',\r\n    borderRadius: '5px',\r\n    paddingTop: '30px',\r\n    textAlign: 'center' as 'center',\r\n    height: '200px'\r\n};\r\n\r\nconst dropzoneActive = {\r\n    borderColor: 'teal'\r\n};\r\n\r\ninterface IProps {\r\n    setFiles: (files: object[]) => void;\r\n}\r\n\r\nconst PhotoDropzone: React.FC<IProps> = ({ setFiles }) => {\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        const files: object[] = acceptedFiles.map((file: object) => {\r\n            console.log(typeof file);\r\n            return {\r\n                file: file,\r\n                preview: URL.createObjectURL(file)\r\n            };\r\n        });\r\n        console.log(files);\r\n        setFiles(files);\r\n    }, [setFiles]);\r\n\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\r\n\r\n    return (\r\n        <div {...getRootProps()}\r\n            style={isDragActive ? { ...dropzoneStyles, ...dropzoneActive } : dropzoneStyles}>\r\n            <input {...getInputProps()} />\r\n            <Icon name='upload' size='huge' />\r\n            <Header content='Drop image here' />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PhotoDropzone;\r\n","import React, { useRef } from 'react';\r\n\r\nimport Cropper from 'react-cropper';\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\ninterface IProps {\r\n    setImage: (img: Blob) => void,\r\n    previewImage: string\r\n};\r\n\r\nconst PhotoCropper: React.FC<IProps> = (props) => {\r\n    const cropper = useRef<Cropper>(null);\r\n\r\n    const cropImage = () => {\r\n        if (cropper && cropper.current) {\r\n\r\n            if (typeof cropper.current.getCroppedCanvas() === 'undefined')\r\n                return;\r\n\r\n            cropper.current.getCroppedCanvas().toBlob((blob: any) => {\r\n                props.setImage(blob);\r\n            }, 'image/jpeg');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Cropper\r\n            ref={cropper}\r\n            src={props.previewImage}\r\n            style={{ height: 200, width: '100%' }}\r\n            // Cropper.js options\r\n            aspectRatio={1 / 1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            dragMode='move'\r\n            scalable={true}\r\n            cropBoxMovable={true}\r\n            cropBoxResizable={true}\r\n            crop={cropImage}\r\n        />\r\n    );\r\n};\r\n\r\nexport default PhotoCropper;","import React, { useState, useEffect, Fragment } from 'react';\r\nimport { Grid, Header, Button } from 'semantic-ui-react';\r\n\r\nimport PhotoDropzone from './PhotoDropzone';\r\nimport PhotoCropper from './PhotoCropper';\r\n\r\ninterface IProps {\r\n    uploadPhoto: (image: Blob) => Promise<any>;\r\n};\r\n\r\nconst PhotoUpload: React.FC<IProps> = ({ uploadPhoto }) => {\r\n    const [files, setFiles] = useState<any[]>([]);\r\n    const [image, setImage] = useState<Blob | null>(null);\r\n    const [isUploading, setIsUploading] = useState(false);\r\n\r\n    const onUploadClick = async () => {\r\n        setIsUploading(true);\r\n        await uploadPhoto(image!);\r\n        setIsUploading(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        //Cleanup Resource: ObjectURL was created for preview when file was uploaded, \r\n        //to avoid memory leak, releases an object URL\r\n        return () => {\r\n            files.forEach((file) => {\r\n                URL.revokeObjectURL(file.preview);\r\n            });\r\n        };\r\n    }, [files]);\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 1 - Add Photo' />\r\n                <PhotoDropzone setFiles={setFiles} />\r\n            </Grid.Column>\r\n            <Grid.Column width={1}>\r\n            </Grid.Column>\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 2 - Resize Image' />\r\n                {\r\n                    files && files.length > 0 &&\r\n                    <PhotoCropper setImage={setImage} previewImage={files[0].preview} />\r\n                }\r\n            </Grid.Column>\r\n            <Grid.Column width={1}>\r\n            </Grid.Column >\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 3 - Preview & Upload' />\r\n                {\r\n                    files && files.length > 0 &&\r\n                    (<Fragment>\r\n                        <div className='img-preview' style={{ minHeight: 200, overflow: 'hidden' }}> </div>\r\n                        <Button.Group widths={2}>\r\n                            <Button loading={isUploading} onClick={() => onUploadClick()} icon='check' positive/>\r\n                            <Button disabled={isUploading} onClick={() => setFiles([])} icon='close'/>\r\n                        </Button.Group>\r\n                    </Fragment>)\r\n                }\r\n            </Grid.Column>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default PhotoUpload;\r\n","import React, { useState, useContext } from 'react';\r\nimport { Tab, Header, Card, Image, Button, Grid } from 'semantic-ui-react';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nimport { rootStoreContext } from '../../stores/rootStore';\r\nimport PhotoUpload from '../../common/upload/PhotoUpload';\r\n\r\nconst ProfilePhoto = () => {\r\n    const rootStoreObj = useContext(rootStoreContext);\r\n    const { userProfile, isViewingOwnProfile, uploadPhoto, setMainPhoto, deletePhoto } = rootStoreObj.profileStore;\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [isSettingMainPhoto, setIsSettingMainPhoto] = useState(false);\r\n    const [isDeletingPhoto, setIsDeletingPhoto] = useState(false);\r\n    const [target, setTarget] = useState('');\r\n\r\n    //useEffect(() => {\r\n    //    setAddPhotoMode(profileStoreObj.isViewingOwnProfile);\r\n    //}, [profileStoreObj.isViewingOwnProfile]);\r\n\r\n    const onAddPhoto = () => {\r\n        setAddPhotoMode(!addPhotoMode);\r\n    };\r\n\r\n    const onPhotoUploadHandler = async (photo: Blob) => {\r\n        await uploadPhoto(photo);\r\n        setAddPhotoMode(false);\r\n    };\r\n\r\n    const onSetMainPhotoHandler = async (e: React.SyntheticEvent<HTMLButtonElement>, photoId: string) => {\r\n        setTarget(e.currentTarget.name)\r\n        setIsSettingMainPhoto(true);\r\n        await setMainPhoto(photoId);\r\n        setIsSettingMainPhoto(false);\r\n    };\r\n\r\n    const onDeletePhotoHandler = async (e: React.SyntheticEvent<HTMLButtonElement>, photoId: string) => {\r\n        setTarget(e.currentTarget.name)\r\n        setIsDeletingPhoto(true);\r\n        await deletePhoto(photoId);\r\n        setIsDeletingPhoto(false);\r\n    };\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16} style={{ paddingBottom: 0 }}>\r\n                    <Header floated='left' icon='image' content='Photos' />\r\n                    {\r\n                        isViewingOwnProfile &&\r\n                        <Button onClick={() => onAddPhoto()} floated='right' primary\r\n                            basic content={addPhotoMode ? 'Cancel' : 'Add Photo'} />\r\n                    }\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ?\r\n                        (<div><PhotoUpload uploadPhoto={onPhotoUploadHandler} /></div>) :\r\n                        (<Card.Group itemsPerRow={5}>\r\n                            {\r\n                                userProfile && userProfile.photos &&\r\n                                userProfile.photos.map(photo => {\r\n                                    return (\r\n                                        <Card key={photo.id}>\r\n                                            <Card.Content>\r\n                                                <Image src={photo.url} />\r\n                                            </Card.Content>\r\n                                            <Card.Content extra style={{ padding: 0 }}>\r\n                                                <Button.Group fluid widths={2}>\r\n                                                    <Button\r\n                                                        name={photo.id}\r\n                                                        onClick={(e) => onSetMainPhotoHandler(e, photo.id)}\r\n                                                        loading={isSettingMainPhoto && target === photo.id}\r\n                                                        disabled={userProfile.mainPhoto?.id === photo.id}\r\n                                                        basic positive content='Main' />\r\n\r\n                                                    <Button\r\n                                                        name={photo.id}\r\n                                                        onClick={(e) => onDeletePhotoHandler(e, photo.id)}\r\n                                                        loading={isDeletingPhoto && target === photo.id}\r\n                                                        disabled={userProfile.mainPhoto?.id === photo.id}\r\n                                                        basic negative icon='trash' />\r\n                                                </Button.Group>\r\n                                            </Card.Content>\r\n                                        </Card>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </Card.Group>)}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane >\r\n    );\r\n};\r\n\r\nexport default observer(ProfilePhoto);","import React, { useState } from 'react';\r\nimport { Form, Tab, Button } from 'semantic-ui-react';\r\nimport { Form as FinalForm, Field } from 'react-final-form';\r\nimport { FORM_ERROR } from 'final-form';\r\nimport { combineValidators, isRequired, composeValidators, hasLengthGreaterThan, hasLengthLessThan } from 'revalidate';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nimport { isValidEmail } from '../../../utils/customValidators';\r\nimport TextInput from '../../../common/elements/TextInput';\r\nimport TextAreaInput from '../../../common/elements/TextAreaInput';\r\nimport { IProfile } from '../../../models/IProfile';\r\n\r\ninterface IProps {\r\n    updateProfile: (profile: IProfile) => Promise<void>,\r\n    userProfile: IProfile,\r\n    setEditMode: (value:boolean) => void\r\n};\r\n\r\nconst ProfileEditForm: React.FC<IProps> = ({ updateProfile, userProfile, setEditMode }) => {\r\n    const [isSaving, setIsSaving] = useState(false);\r\n\r\n    const onUpdateProfileHandler = async (profile: IProfile) => {\r\n        try {\r\n            setIsSaving(true);\r\n            await updateProfile(profile);\r\n            setEditMode(false);\r\n            setIsSaving(false);\r\n        } catch (err) {\r\n            return { [FORM_ERROR]: err };\r\n        }\r\n    };\r\n\r\n    const validationRules = combineValidators({\r\n        firstName: composeValidators(\r\n            isRequired('First name'),\r\n            hasLengthGreaterThan(1)({ message: 'First name must contain atleast 2 characters!' }),\r\n            hasLengthLessThan(25)({ message: 'First name must be 24 characters or less!' })\r\n        )(),\r\n        lastName: composeValidators(\r\n            isRequired('Last name'),\r\n            hasLengthGreaterThan(1)({ message: 'Last name must contain atleast 2 characters!' }),\r\n            hasLengthLessThan(25)({ message: 'Last name must be 24 characters or less!' })\r\n        )(),\r\n        email: composeValidators(\r\n            isRequired('Email'),\r\n            isValidEmail\r\n        )(),\r\n        bio: hasLengthLessThan(241)({ message: 'Bio must be 240 characters or less!' })\r\n    });\r\n\r\n    if (!userProfile)\r\n        return <Tab.Pane>Loading user profile data</Tab.Pane>\r\n\r\n    //console.log(toJS(userProfile));\r\n    return (\r\n        <FinalForm\r\n            onSubmit={onUpdateProfileHandler}\r\n            validate={validationRules}\r\n            initialValues={userProfile}\r\n            render={(props) => (\r\n                <Form onSubmit={props.handleSubmit}>\r\n                    <Field name=\"firstName\"\r\n                        component={TextInput}\r\n                        value={userProfile?.firstName}\r\n                        placeholder='First Name' />\r\n\r\n                    <Field name=\"lastName\"\r\n                        component={TextInput}\r\n                        value={userProfile?.lastName}\r\n                        placeholder='Last Name' />\r\n\r\n                    <Field name=\"email\"\r\n                        component={TextInput}\r\n                        value={userProfile?.email}\r\n                        placeholder='Email' />\r\n\r\n                    <Field name=\"bio\"\r\n                        component={TextAreaInput}\r\n                        value={userProfile?.bio}\r\n                        placeholder='bio' />\r\n\r\n                    <Button\r\n                        floated=\"right\"\r\n                        type=\"Submit\"\r\n                        loading={isSaving}\r\n                        disabled={props.invalid || props.pristine}\r\n                        positive content=\"Submit\" />\r\n                </Form>\r\n            )}\r\n        />\r\n    )\r\n};\r\n\r\nexport default observer(ProfileEditForm);","import React, { useContext, useState } from 'react';\r\nimport { Tab, Grid, Button, Header, Card, Icon } from 'semantic-ui-react';\r\n\r\nimport ProfileEditForm from './forms/ProfileEditForm';\r\nimport { rootStoreContext } from '../../stores/rootStore';\r\n\r\nconst ProfileAbout = () => {\r\n    const rootStoreObj = useContext(rootStoreContext);\r\n    const { userProfile, isViewingOwnProfile, updateProfile } = rootStoreObj.profileStore;\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header\r\n                        floated='left'\r\n                        icon='user'\r\n                        content={`About ${userProfile?.displayName}`}\r\n                    />\r\n                    {isViewingOwnProfile && (\r\n                        <Button\r\n                            floated='right'\r\n                            basic\r\n                            content={editMode ? 'Cancel' : 'Edit Profile'}\r\n                            onClick={() => setEditMode(!editMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {editMode ? (\r\n                        <ProfileEditForm\r\n                            setEditMode={setEditMode}\r\n                            updateProfile={updateProfile}\r\n                            userProfile={userProfile!} />\r\n                    ) : (\r\n                            <Card fluid>\r\n                                <Card.Content>\r\n                                    <Card.Description>\r\n                                        {userProfile?.bio}\r\n                                    </Card.Description>\r\n                                </Card.Content>\r\n                                <Card.Content extra>\r\n                                    <Icon name='mail' />\r\n                                    {userProfile?.email}\r\n                                </Card.Content>\r\n                            </Card>\r\n                        )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n};\r\n\r\nexport default ProfileAbout;\r\n\r\n//<Container text>\r\n//    <Segment.Group>\r\n//        <Segment>First Name: {.firstName}</Segment>\r\n//        <Segment>Last Name: {userProfile?.lastName}</Segment>\r\n//        <Segment>Email: {userProfile?.email}</Segment>\r\n//        <Segment>Bio: {userProfile?.bio}</Segment>\r\n//    </Segment.Group>\r\n//</Container>","import React, { useEffect, useContext, useState } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Tab, Grid, Header, Card, Image, TabProps } from 'semantic-ui-react';\r\n\r\nimport { Link } from 'react-router-dom';\r\nimport moment from 'moment';\r\n\r\nimport { rootStoreContext } from '../../stores/rootStore';\r\nimport { IUserActivity } from '../../models/IActivity';\r\nimport * as constants from '../../utils/constants';\r\n\r\nconst panes = [\r\n    { menuItem: 'Future Events', pane: { key: 'futureEvents' } },\r\n    { menuItem: 'Past Events', pane: { key: 'pastEvents' } },\r\n    { menuItem: 'Hosting', pane: { key: 'hosted' } }\r\n];\r\n\r\nconst ProfileEvents = () => {\r\n    const [loadingActivities, setLoadingActivities] = useState(false);\r\n    const rootStore = useContext(rootStoreContext);\r\n    const { loadUserActivities, userProfile, userActivities } = rootStore.profileStore;\r\n\r\n    useEffect(() => {\r\n        const load = async () => {\r\n            setLoadingActivities(true);\r\n            await loadUserActivities(userProfile!.appUserId, '');\r\n            setLoadingActivities(false);\r\n        };\r\n        load();\r\n    }, [loadUserActivities, userProfile]);\r\n\r\n    const handleTabChange = (_: React.MouseEvent<HTMLDivElement, MouseEvent>, data: TabProps) => {\r\n        setLoadingActivities(true);\r\n        let predicate;\r\n        switch (data.activeIndex) {\r\n            case 1:\r\n                predicate = 'past';\r\n                break;\r\n            case 2:\r\n                predicate = 'hosting';\r\n                break;\r\n            default:\r\n                predicate = 'future';\r\n                break;\r\n        }\r\n        loadUserActivities(userProfile!.appUserId, predicate)\r\n            .then(() => { setLoadingActivities(false)});\r\n    };\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='calendar' content={'Activities'} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab\r\n                        panes={panes}\r\n                        menu={{ secondary: true, pointing: true }}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                    />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {userActivities && userActivities.map((activity: IUserActivity) => (\r\n                            <Card\r\n                                as={Link}\r\n                                to={`${constants.NAV_ACTIVITIES}/${activity.activityId}`}\r\n                                key={activity.activityId}>\r\n                                <Image\r\n                                    src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                                    style={{ minHeight: 100, objectFit: 'cover' }}\r\n                                />\r\n                                <Card.Content>\r\n                                    <Card.Header textAlign='center'>{activity.title}</Card.Header>\r\n                                    <Card.Meta textAlign='center'>\r\n                                        <div>{moment(activity.date).format(\"MMM Do YYYY\")}</div>\r\n                                        <div>{moment(activity.date).format(\"h:mm A\")}</div>\r\n                                    </Card.Meta>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n};\r\n\r\nexport default observer(ProfileEvents);","import React from 'react';\r\nimport { Card, Image, Icon } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nimport { IProfile } from '../../models/IProfile';\r\nimport * as constants from '../../utils/constants';\r\n\r\ninterface IProps {\r\n    profile: IProfile;\r\n    isFollowersTab: boolean;\r\n}\r\n\r\nconst ProfileCard: React.FC<IProps> = ({ profile, isFollowersTab }) => {\r\n    return (\r\n        <Card as={Link} to={`${constants.NAV_USER_PROFILE}/${profile.appUserId}`}>\r\n            <Image src={profile.mainPhoto?.url || '/assets/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <div>\r\n                    <Icon name='user' />\r\n                    {isFollowersTab ? `${profile.followersCount}` : `${profile.followingCount}`}\r\n                </div>\r\n            </Card.Content>\r\n        </Card>\r\n    )\r\n};\r\n\r\nexport default observer(ProfileCard);","import React, { useContext } from 'react';\r\nimport { Tab, Grid, Header, Card } from 'semantic-ui-react';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nimport { rootStoreContext } from '../../stores/rootStore';\r\nimport ProfileCard from './ProfileCard';\r\n\r\nconst ProfileFollowing = () => {\r\n    const rootStore = useContext(rootStoreContext);\r\n    const { userProfile, isLoadingfollowers, followers, isUserViewingFollowersTab } = rootStore.profileStore;\r\n\r\n    return (\r\n        <Tab.Pane loading={isLoadingfollowers}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header\r\n                        floated='left'\r\n                        icon='user'\r\n                        content={\r\n                            isUserViewingFollowersTab\r\n                                ? `${userProfile!.displayName} is followed by below users`\r\n                                : `${userProfile!.displayName} is following below users.`\r\n                        }\r\n                    />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={5}>\r\n                        {\r\n                            followers && followers.length > 0 &&\r\n                            followers?.map((profile) => {\r\n                                return <ProfileCard\r\n                                    key={profile.appUserId}\r\n                                    profile={profile}\r\n                                    isFollowersTab={isUserViewingFollowersTab}\r\n                                />\r\n                            })\r\n                        }\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n}\r\n\r\nexport default observer(ProfileFollowing);","import React, { useContext } from 'react';\r\nimport { Tab, TabProps } from 'semantic-ui-react';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nimport ProfilePhoto from './ProfilePhoto';\r\nimport ProfileAbout from './ProfileAbout';\r\nimport ProfileEvents from './ProfileEvents';\r\nimport ProfileFollowing from './ProfileFollowing';\r\nimport { rootStoreContext } from '../../stores/rootStore';\r\n\r\nconst panes = () => [\r\n    { menuItem: 'About', render: () => <ProfileAbout /> },\r\n    { menuItem: 'Photos', render: () => <ProfilePhoto /> },\r\n    { menuItem: 'Activities', render: () => <ProfileEvents /> },\r\n    { menuItem: 'Followers', render: () => <ProfileFollowing /> },\r\n    { menuItem: 'Following', render: () => <ProfileFollowing /> }\r\n];\r\n\r\nconst ProfileContent = () => {\r\n    const rootStoreObject = useContext(rootStoreContext);\r\n    return (\r\n        <Tab menu={{ fluid: true, vertical: true }}\r\n            menuPosition='right'\r\n            panes={panes()}\r\n            onTabChange={(_, data: TabProps) => rootStoreObject.profileStore.setActiveTab(data.activeIndex)}\r\n        />\r\n    );\r\n};\r\n\r\nexport default observer(ProfileContent);","import React, { useEffect, useContext, Fragment, useState } from 'react';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nimport ProfileHeader from './ProfileHeader';\r\nimport ProfileContent from './ProfileContent';\r\nimport ProgressBar from '../../layout/ProgressBar';\r\nimport { rootStoreContext } from '../../stores/rootStore';\r\n\r\ninterface iRouteProps {\r\n    appUserId: string\r\n};\r\n\r\ninterface iProps extends RouteComponentProps<iRouteProps> {\r\n};\r\n\r\nconst UserProfile: React.FC<iProps> = (props) => {\r\n    const rootStoreObj = useContext(rootStoreContext);\r\n    const { getUserProfile } = rootStoreObj.profileStore;\r\n    const [isLoadingProfile, setIsLoadingProfile] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const load = async () => {\r\n            setIsLoadingProfile(true);\r\n            await getUserProfile(props.match.params.appUserId);\r\n            setIsLoadingProfile(false);\r\n        }\r\n        load();\r\n    }, [getUserProfile, props.match.params.appUserId]);\r\n\r\n    //Profile Photo\r\n    if (isLoadingProfile)\r\n        return <ProgressBar message=\"Loading Profile\" />\r\n\r\n    return (\r\n        <Fragment>\r\n            <ProfileHeader />\r\n            <ProfileContent />\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default observer(UserProfile);","import React from 'react';\r\nimport { Segment, Button, Header, Icon } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport * as constants from '../utils/constants';\r\n\r\nconst NotFound: React.FC = () => {\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name=\"search\" />\r\n                Oops, We've found everywhere but we could not find this.\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to={constants.NAV_ACTIVITIES} primary >\r\n                    Return to Activity Page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    );\r\n};\r\n\r\nexport default NotFound;","import React, { useContext } from 'react';\r\nimport { RouteProps, RouteComponentProps, Route, Redirect } from 'react-router-dom';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\n\r\nimport { rootStoreContext } from '../stores/rootStore';\r\nimport * as constants from '../utils/constants';\r\n\r\ninterface IProps extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>>\r\n}\r\n\r\n// A wrapper for <Route> that redirects to the login\r\n// screen if you're not yet authenticated.\r\nconst SecureRoute: React.FC<IProps> = ({ component: Component, ...rest }) => {\r\n    const rootStoreObj = useContext(rootStoreContext);\r\n    const { canAccessSecureResource } = rootStoreObj.userStore;\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={(props) => canAccessSecureResource ? <Component {...props} /> : <Redirect to={constants.NAV_LOGIN} />}\r\n        />\r\n    );\r\n};\r\n\r\n\r\nexport default observer(SecureRoute);\r\n","import React, { useEffect, useContext } from 'react';\r\nimport { Container } from 'semantic-ui-react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Route, withRouter, RouteComponentProps, Switch } from 'react-router-dom';\r\nimport { ToastContainer } from 'react-toastify';\r\n\r\nimport NavBar from '../features/nav/NavBar';\r\nimport HomePage from '../features/home/HomePage';\r\nimport ActivityDashboard from '../features/activities/dashboard/ActivityDashboard';\r\nimport ActivityDetails from '../features/activities/details/ActivityDetails';\r\nimport ActivityForm from '../features/activities/forms/ActivityForm';\r\nimport LoginForm from '../features/user/forms/LoginForm';\r\nimport RegisterForm from '../features/user/forms/RegisterForm';\r\nimport UserProfile from '../features/profile/UserProfile';\r\nimport { rootStoreContext } from '../stores/rootStore';\r\nimport * as constants from '../utils/constants';\r\nimport NotFound from './NotFound';\r\nimport ProgressBar from './ProgressBar';\r\nimport SecureRoute from './SecureRoute';\r\n\r\nconst App: React.FC<RouteComponentProps> = ({ location }) => {\r\n    const rootStoreObj = useContext(rootStoreContext);\r\n    const commonStore = rootStoreObj.commonStore;\r\n    const { current } = rootStoreObj.userStore;\r\n\r\n    useEffect(() => {\r\n        const hasToken = !!commonStore.getToken();\r\n        if (hasToken) {\r\n            //If token exists fetch user information.\r\n            const loadUser = async () => {\r\n                await current().finally(() => commonStore.setAppLoaded());\r\n            };\r\n            loadUser();\r\n        }\r\n        else\r\n            commonStore.setAppLoaded();\r\n    }, [current, commonStore]);\r\n\r\n    if (!commonStore.appLoaded) {\r\n        return <ProgressBar message=\"Loading Application...\" />\r\n    }\r\n\r\n    return (\r\n\r\n        <React.Fragment>\r\n            <ToastContainer position=\"bottom-right\" />\r\n\r\n            {/*Root URL.*/}\r\n            <Route path={constants.NAV_HOME} exact component={HomePage} />\r\n\r\n            <Route path={'/(.+)'} render={() => (\r\n                <React.Fragment>\r\n                    <NavBar />\r\n                    <Container style={{ marginTop: '7em' }}>\r\n                        <Switch>\r\n                            <SecureRoute path={constants.NAV_ACTIVITIES} exact component={ActivityDashboard} />\r\n                            <SecureRoute path={`${constants.NAV_ACTIVITY_DETAIL}/:id`} exact component={ActivityDetails} />\r\n\r\n                            {/*Key: To fully unmounted and remounted component on ID change.*/}\r\n                            <SecureRoute key={location.key} exact\r\n                                path={[constants.NAV_CREATE_ACTIVITY, `${constants.NAV_MANAGE_ACTIVITY}/:id`]}\r\n                                component={ActivityForm} />\r\n\r\n                            <SecureRoute path={`${constants.NAV_USER_PROFILE}/:appUserId`} component={UserProfile} />\r\n\r\n                            <Route path={constants.NAV_LOGIN} component={LoginForm} />\r\n                            <Route path={constants.NAV_REGISTER} component={RegisterForm} />\r\n                            <Route component={NotFound} />\r\n                        </Switch>\r\n                    </Container>\r\n                </React.Fragment>\r\n            )} />\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default withRouter(observer(App));","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Router } from 'react-router-dom';\r\n\r\nimport momentLocalizer from 'react-widgets-moment';\r\n\r\nimport 'mobx-react-lite/batchingForReactDom';\r\nimport 'react-toastify/dist/ReactToastify.min.css';\r\nimport 'react-widgets/dist/css/react-widgets.css';\r\nimport 'semantic-ui-css/semantic.min.css';\r\n\r\nimport './layout/styles.css';\r\n\r\nimport ScrollToTop from './layout/ScrollToTop';\r\nimport createBrowserHistory from './utils/createBrowserHistory';\r\nimport App from './layout/App';\r\n\r\nmomentLocalizer();\r\n\r\nReactDOM.render(\r\n    <Router history={createBrowserHistory}>\r\n        <React.Fragment>\r\n            <ScrollToTop />\r\n            <App />\r\n        </React.Fragment>\r\n    </Router>,\r\n    document.querySelector(\"#root\"));\r\n"],"sourceRoot":""}