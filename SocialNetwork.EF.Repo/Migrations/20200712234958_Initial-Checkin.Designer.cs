// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SocialNetwork.EF.Repo;

namespace SocialNetwork.EF.Repo.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20200712234958_Initial-Checkin")]
    partial class InitialCheckin
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SocialNetwork.DataModel.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .HasColumnType("VARCHAR(50)")
                        .HasMaxLength(50);

                    b.Property<string>("City")
                        .HasColumnType("VARCHAR(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("VARCHAR(24)")
                        .HasMaxLength(24);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Title")
                        .HasColumnType("VARCHAR(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("VARCHAR(24)")
                        .HasMaxLength(24);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Venue")
                        .HasColumnType("VARCHAR(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Activity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4f74da04-2b1a-4eda-8a0a-2bfa6e127402"),
                            Category = "drinks",
                            City = "London",
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 7, 12, 19, 49, 57, 561, DateTimeKind.Local).AddTicks(8895),
                            Date = new DateTime(2020, 5, 12, 19, 49, 57, 557, DateTimeKind.Local).AddTicks(4582),
                            Description = "Activity 2 months ago",
                            Title = "Past Activity 1",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 7, 12, 19, 49, 57, 561, DateTimeKind.Local).AddTicks(9664),
                            Venue = "Pub"
                        },
                        new
                        {
                            Id = new Guid("fcca52bb-630b-41f7-bc08-7ef54e0059ab"),
                            Category = "culture",
                            City = "Paris",
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 7, 12, 19, 49, 57, 562, DateTimeKind.Local).AddTicks(598),
                            Date = new DateTime(2020, 6, 12, 19, 49, 57, 561, DateTimeKind.Local).AddTicks(3758),
                            Description = "Activity 1 month ago",
                            Title = "Past Activity 2",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 7, 12, 19, 49, 57, 562, DateTimeKind.Local).AddTicks(673),
                            Venue = "Louvre"
                        },
                        new
                        {
                            Id = new Guid("87cea642-4afb-4cc9-8b90-1e7be653fa4a"),
                            Category = "culture",
                            City = "London",
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 7, 12, 19, 49, 57, 562, DateTimeKind.Local).AddTicks(705),
                            Date = new DateTime(2020, 8, 12, 19, 49, 57, 561, DateTimeKind.Local).AddTicks(3931),
                            Description = "Activity 1 month in future",
                            Title = "Future Activity 1",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 7, 12, 19, 49, 57, 562, DateTimeKind.Local).AddTicks(712),
                            Venue = "Natural History Museum"
                        },
                        new
                        {
                            Id = new Guid("65dda113-2519-4a4a-a811-3d444c966205"),
                            Category = "music",
                            City = "London",
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 7, 12, 19, 49, 57, 562, DateTimeKind.Local).AddTicks(720),
                            Date = new DateTime(2020, 9, 12, 19, 49, 57, 561, DateTimeKind.Local).AddTicks(3946),
                            Description = "Activity 2 months in future",
                            Title = "Future Activity 2",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 7, 12, 19, 49, 57, 562, DateTimeKind.Local).AddTicks(726),
                            Venue = "O2 Arena"
                        },
                        new
                        {
                            Id = new Guid("e223904d-9518-43af-b20b-f929e7cc7f84"),
                            Category = "drinks",
                            City = "London",
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 7, 12, 19, 49, 57, 562, DateTimeKind.Local).AddTicks(756),
                            Date = new DateTime(2020, 10, 12, 19, 49, 57, 561, DateTimeKind.Local).AddTicks(3955),
                            Description = "Activity 3 months in future",
                            Title = "Future Activity 3",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 7, 12, 19, 49, 57, 562, DateTimeKind.Local).AddTicks(762),
                            Venue = "Another pub"
                        },
                        new
                        {
                            Id = new Guid("f1e2ef5c-2576-4cf1-9e93-dcf8213f5a3e"),
                            Category = "drinks",
                            City = "London",
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 7, 12, 19, 49, 57, 562, DateTimeKind.Local).AddTicks(771),
                            Date = new DateTime(2020, 11, 12, 19, 49, 57, 561, DateTimeKind.Local).AddTicks(3970),
                            Description = "Activity 4 months in future",
                            Title = "Future Activity 4",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 7, 12, 19, 49, 57, 562, DateTimeKind.Local).AddTicks(778),
                            Venue = "Yet another pub"
                        },
                        new
                        {
                            Id = new Guid("326635b0-4f5c-416e-8183-876cb7984a89"),
                            Category = "drinks",
                            City = "London",
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 7, 12, 19, 49, 57, 562, DateTimeKind.Local).AddTicks(785),
                            Date = new DateTime(2020, 12, 12, 19, 49, 57, 561, DateTimeKind.Local).AddTicks(3979),
                            Description = "Activity 5 months in future",
                            Title = "Future Activity 5",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 7, 12, 19, 49, 57, 562, DateTimeKind.Local).AddTicks(791),
                            Venue = "Just another pub"
                        },
                        new
                        {
                            Id = new Guid("82aa4561-93d2-4f05-864c-4a2510c2fa13"),
                            Category = "music",
                            City = "London",
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 7, 12, 19, 49, 57, 562, DateTimeKind.Local).AddTicks(798),
                            Date = new DateTime(2021, 1, 12, 19, 49, 57, 561, DateTimeKind.Local).AddTicks(3988),
                            Description = "Activity 6 months in future",
                            Title = "Future Activity 6",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 7, 12, 19, 49, 57, 562, DateTimeKind.Local).AddTicks(805),
                            Venue = "Roundhouse Camden"
                        },
                        new
                        {
                            Id = new Guid("b478363b-94c7-4816-9095-a96fd89c160f"),
                            Category = "travel",
                            City = "London",
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 7, 12, 19, 49, 57, 562, DateTimeKind.Local).AddTicks(813),
                            Date = new DateTime(2021, 2, 12, 19, 49, 57, 561, DateTimeKind.Local).AddTicks(3997),
                            Description = "Activity 2 months ago",
                            Title = "Future Activity 7",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 7, 12, 19, 49, 57, 562, DateTimeKind.Local).AddTicks(820),
                            Venue = "Somewhere on the Thames"
                        },
                        new
                        {
                            Id = new Guid("7ca5cc71-6bdc-40ae-bc41-1157fe724f55"),
                            Category = "film",
                            City = "London",
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 7, 12, 19, 49, 57, 562, DateTimeKind.Local).AddTicks(828),
                            Date = new DateTime(2021, 3, 12, 19, 49, 57, 561, DateTimeKind.Local).AddTicks(4009),
                            Description = "Activity 8 months in future",
                            Title = "Future Activity 8",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 7, 12, 19, 49, 57, 562, DateTimeKind.Local).AddTicks(834),
                            Venue = "Cinema"
                        });
                });

            modelBuilder.Entity("SocialNetwork.DataModel.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bio")
                        .HasColumnType("VARCHAR(240)")
                        .HasMaxLength(240);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("VARCHAR(24)")
                        .HasMaxLength(24);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("VARCHAR(24)")
                        .HasMaxLength(24);

                    b.Property<string>("FirstName")
                        .HasColumnType("VARCHAR(24)")
                        .HasMaxLength(24);

                    b.Property<string>("LastName")
                        .HasColumnType("VARCHAR(24)")
                        .HasMaxLength(24);

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("VARCHAR(24)")
                        .HasMaxLength(24);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AppUser");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9cd36689-42c2-425e-8eb1-b52e68a2ea1d"),
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 7, 12, 19, 49, 57, 566, DateTimeKind.Local).AddTicks(111),
                            Email = "JohnDoe@domain.com",
                            FirstName = "John",
                            LastName = "Doe",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 7, 12, 19, 49, 57, 566, DateTimeKind.Local).AddTicks(286)
                        },
                        new
                        {
                            Id = new Guid("0f463d2c-6227-4ea8-abad-304669ee661a"),
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 7, 12, 19, 49, 57, 566, DateTimeKind.Local).AddTicks(362),
                            Email = "Jane.Smith@domain.com",
                            FirstName = "Jane",
                            LastName = "Smith",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 7, 12, 19, 49, 57, 566, DateTimeKind.Local).AddTicks(369)
                        },
                        new
                        {
                            Id = new Guid("581e4e4d-90ed-4afa-8799-85706984256e"),
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 7, 12, 19, 49, 57, 566, DateTimeKind.Local).AddTicks(395),
                            Email = "Bruce.Lee@domain.com",
                            FirstName = "Bruce",
                            LastName = "Lee",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 7, 12, 19, 49, 57, 566, DateTimeKind.Local).AddTicks(401)
                        },
                        new
                        {
                            Id = new Guid("4d2650c0-3387-47f5-a48b-812997ccf24c"),
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 7, 12, 19, 49, 57, 566, DateTimeKind.Local).AddTicks(408),
                            Email = "NP@domain.com",
                            FirstName = "Nij",
                            LastName = "Patel",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 7, 12, 19, 49, 57, 566, DateTimeKind.Local).AddTicks(413)
                        });
                });

            modelBuilder.Entity("SocialNetwork.DataModel.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .HasColumnType("VARCHAR(240)")
                        .HasMaxLength(240);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("SocialNetwork.DataModel.IdentityUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("VARCHAR(24)")
                        .HasMaxLength(24);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Passoword")
                        .HasColumnType("VARCHAR(50)")
                        .HasMaxLength(50);

                    b.Property<string>("RefreshToken")
                        .HasColumnType("VARCHAR(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("RefreshTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("Salt")
                        .HasColumnType("VARCHAR(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("VARCHAR(24)")
                        .HasMaxLength(24);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasColumnType("VARCHAR(24)")
                        .HasMaxLength(24);

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("IdentityUser");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d65d1fc3-b593-4e6e-b47f-ab4985fb8584"),
                            AppUserId = new Guid("9cd36689-42c2-425e-8eb1-b52e68a2ea1d"),
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 7, 12, 19, 49, 57, 567, DateTimeKind.Local).AddTicks(5247),
                            Passoword = "/8j7Y3aH1/NIcu5PWDxBaTftbv7kIhPN7IsIY+iDIZ0=",
                            Salt = "St0OnTE2Ju3Li9uSnlz/Mg==",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 7, 12, 19, 49, 57, 567, DateTimeKind.Local).AddTicks(5401),
                            UserName = "JohnDoe@domain.com"
                        },
                        new
                        {
                            Id = new Guid("9e68581a-4588-41d9-89b1-c54f8be60c20"),
                            AppUserId = new Guid("0f463d2c-6227-4ea8-abad-304669ee661a"),
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 7, 12, 19, 49, 57, 567, DateTimeKind.Local).AddTicks(5789),
                            Passoword = "S10V+ChlwEm8VzgQIqvhHrUS65y7d9/E0AiYhKLwT0o=",
                            Salt = "f9/SzZwluz+xI51/VQQIzg==",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 7, 12, 19, 49, 57, 567, DateTimeKind.Local).AddTicks(5801),
                            UserName = "Jane.Smith@domain.com"
                        },
                        new
                        {
                            Id = new Guid("9c59f24a-97c0-4eee-8088-9d842cf236a7"),
                            AppUserId = new Guid("581e4e4d-90ed-4afa-8799-85706984256e"),
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 7, 12, 19, 49, 57, 567, DateTimeKind.Local).AddTicks(5814),
                            Passoword = "5OekvvKMPp2M+O3Ts2/G912N9lCNqz412l1y8uHazZc=",
                            Salt = "DEX8D+3HR9flD6NpGibucQ==",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 7, 12, 19, 49, 57, 567, DateTimeKind.Local).AddTicks(5821),
                            UserName = "Bruce.Lee@domain.com"
                        },
                        new
                        {
                            Id = new Guid("70d318a0-a392-4759-95b3-7b4e0f062d1b"),
                            AppUserId = new Guid("4d2650c0-3387-47f5-a48b-812997ccf24c"),
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 7, 12, 19, 49, 57, 567, DateTimeKind.Local).AddTicks(5832),
                            Passoword = "k94BgmW7ByRA20JstnnZy/r4spmr5a43Wj7TOez6Ceg=",
                            Salt = "tycaGrI7zbrlLUa1rlq/Eg==",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 7, 12, 19, 49, 57, 567, DateTimeKind.Local).AddTicks(5839),
                            UserName = "string"
                        });
                });

            modelBuilder.Entity("SocialNetwork.DataModel.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActualFileName")
                        .HasColumnType("VARCHAR(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CloudFileName")
                        .HasColumnType("VARCHAR(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ContentType")
                        .HasColumnType("VARCHAR(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsMainPhoto")
                        .HasColumnType("bit");

                    b.Property<long>("Length")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Photo");
                });

            modelBuilder.Entity("SocialNetwork.DataModel.UserActivity", b =>
                {
                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateJoined")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsHost")
                        .HasColumnType("bit");

                    b.HasKey("ActivityId", "AppUserId");

                    b.HasIndex("AppUserId");

                    b.ToTable("UserActivity");
                });

            modelBuilder.Entity("SocialNetwork.DataModel.UserFollower", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FollowerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "FollowerId");

                    b.HasIndex("FollowerId");

                    b.ToTable("UserFollower");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("9cd36689-42c2-425e-8eb1-b52e68a2ea1d"),
                            FollowerId = new Guid("0f463d2c-6227-4ea8-abad-304669ee661a")
                        },
                        new
                        {
                            UserId = new Guid("9cd36689-42c2-425e-8eb1-b52e68a2ea1d"),
                            FollowerId = new Guid("581e4e4d-90ed-4afa-8799-85706984256e")
                        },
                        new
                        {
                            UserId = new Guid("581e4e4d-90ed-4afa-8799-85706984256e"),
                            FollowerId = new Guid("9cd36689-42c2-425e-8eb1-b52e68a2ea1d")
                        },
                        new
                        {
                            UserId = new Guid("9cd36689-42c2-425e-8eb1-b52e68a2ea1d"),
                            FollowerId = new Guid("4d2650c0-3387-47f5-a48b-812997ccf24c")
                        },
                        new
                        {
                            UserId = new Guid("0f463d2c-6227-4ea8-abad-304669ee661a"),
                            FollowerId = new Guid("581e4e4d-90ed-4afa-8799-85706984256e")
                        },
                        new
                        {
                            UserId = new Guid("581e4e4d-90ed-4afa-8799-85706984256e"),
                            FollowerId = new Guid("0f463d2c-6227-4ea8-abad-304669ee661a")
                        },
                        new
                        {
                            UserId = new Guid("0f463d2c-6227-4ea8-abad-304669ee661a"),
                            FollowerId = new Guid("4d2650c0-3387-47f5-a48b-812997ccf24c")
                        },
                        new
                        {
                            UserId = new Guid("581e4e4d-90ed-4afa-8799-85706984256e"),
                            FollowerId = new Guid("4d2650c0-3387-47f5-a48b-812997ccf24c")
                        });
                });

            modelBuilder.Entity("SocialNetwork.DataModel.Comment", b =>
                {
                    b.HasOne("SocialNetwork.DataModel.Activity", "Activity")
                        .WithMany("Comments")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialNetwork.DataModel.AppUser", "Author")
                        .WithMany("Comments")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialNetwork.DataModel.IdentityUser", b =>
                {
                    b.HasOne("SocialNetwork.DataModel.AppUser", "AppUser")
                        .WithOne("IdentityUser")
                        .HasForeignKey("SocialNetwork.DataModel.IdentityUser", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialNetwork.DataModel.Photo", b =>
                {
                    b.HasOne("SocialNetwork.DataModel.AppUser", "AppUser")
                        .WithMany("Photos")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialNetwork.DataModel.UserActivity", b =>
                {
                    b.HasOne("SocialNetwork.DataModel.Activity", "Activity")
                        .WithMany("UserActivities")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialNetwork.DataModel.AppUser", "AppUser")
                        .WithMany("Activities")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialNetwork.DataModel.UserFollower", b =>
                {
                    b.HasOne("SocialNetwork.DataModel.AppUser", "Follower")
                        .WithMany("Followers")
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SocialNetwork.DataModel.AppUser", "User")
                        .WithMany("Followings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
