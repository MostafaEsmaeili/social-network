// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SocialNetwork.EF.Repo;

namespace SocialNetwork.EF.Repo.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SocialNetwork.DataModel.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .HasColumnType("VARCHAR(50)")
                        .HasMaxLength(50);

                    b.Property<string>("City")
                        .HasColumnType("VARCHAR(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("VARCHAR(24)")
                        .HasMaxLength(24);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Title")
                        .HasColumnType("VARCHAR(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("VARCHAR(24)")
                        .HasMaxLength(24);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Venue")
                        .HasColumnType("VARCHAR(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Activity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7613990e-c668-453e-9f8d-e16124f30e46"),
                            Category = "drinks",
                            City = "London",
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 6, 19, 22, 31, 16, 530, DateTimeKind.Local).AddTicks(1234),
                            Date = new DateTime(2020, 4, 19, 22, 31, 16, 526, DateTimeKind.Local).AddTicks(6625),
                            Description = "Activity 2 months ago",
                            Title = "Past Activity 1",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 6, 19, 22, 31, 16, 530, DateTimeKind.Local).AddTicks(1842),
                            Venue = "Pub"
                        },
                        new
                        {
                            Id = new Guid("44f145ad-ad2a-4031-a5b3-d253e0ed6480"),
                            Category = "culture",
                            City = "Paris",
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 6, 19, 22, 31, 16, 530, DateTimeKind.Local).AddTicks(2508),
                            Date = new DateTime(2020, 5, 19, 22, 31, 16, 529, DateTimeKind.Local).AddTicks(7514),
                            Description = "Activity 1 month ago",
                            Title = "Past Activity 2",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 6, 19, 22, 31, 16, 530, DateTimeKind.Local).AddTicks(2560),
                            Venue = "Louvre"
                        },
                        new
                        {
                            Id = new Guid("28aa731b-5e7a-4516-871e-a10a6ca6b5c2"),
                            Category = "culture",
                            City = "London",
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 6, 19, 22, 31, 16, 530, DateTimeKind.Local).AddTicks(2582),
                            Date = new DateTime(2020, 7, 19, 22, 31, 16, 529, DateTimeKind.Local).AddTicks(7639),
                            Description = "Activity 1 month in future",
                            Title = "Future Activity 1",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 6, 19, 22, 31, 16, 530, DateTimeKind.Local).AddTicks(2586),
                            Venue = "Natural History Museum"
                        },
                        new
                        {
                            Id = new Guid("8547c80a-09e1-48c3-aabe-8f1d074be38d"),
                            Category = "music",
                            City = "London",
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 6, 19, 22, 31, 16, 530, DateTimeKind.Local).AddTicks(2592),
                            Date = new DateTime(2020, 8, 19, 22, 31, 16, 529, DateTimeKind.Local).AddTicks(7650),
                            Description = "Activity 2 months in future",
                            Title = "Future Activity 2",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 6, 19, 22, 31, 16, 530, DateTimeKind.Local).AddTicks(2595),
                            Venue = "O2 Arena"
                        },
                        new
                        {
                            Id = new Guid("d481ad8e-757d-4c7d-bd28-3248c05ff9a4"),
                            Category = "drinks",
                            City = "London",
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 6, 19, 22, 31, 16, 530, DateTimeKind.Local).AddTicks(2600),
                            Date = new DateTime(2020, 9, 19, 22, 31, 16, 529, DateTimeKind.Local).AddTicks(7655),
                            Description = "Activity 3 months in future",
                            Title = "Future Activity 3",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 6, 19, 22, 31, 16, 530, DateTimeKind.Local).AddTicks(2604),
                            Venue = "Another pub"
                        },
                        new
                        {
                            Id = new Guid("49bedc85-4de2-434b-9252-9be64feeddce"),
                            Category = "drinks",
                            City = "London",
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 6, 19, 22, 31, 16, 530, DateTimeKind.Local).AddTicks(2608),
                            Date = new DateTime(2020, 10, 19, 22, 31, 16, 529, DateTimeKind.Local).AddTicks(7756),
                            Description = "Activity 4 months in future",
                            Title = "Future Activity 4",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 6, 19, 22, 31, 16, 530, DateTimeKind.Local).AddTicks(2612),
                            Venue = "Yet another pub"
                        },
                        new
                        {
                            Id = new Guid("bda0114e-2e66-4972-9255-ba9231aa5940"),
                            Category = "drinks",
                            City = "London",
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 6, 19, 22, 31, 16, 530, DateTimeKind.Local).AddTicks(2617),
                            Date = new DateTime(2020, 11, 19, 22, 31, 16, 529, DateTimeKind.Local).AddTicks(7763),
                            Description = "Activity 5 months in future",
                            Title = "Future Activity 5",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 6, 19, 22, 31, 16, 530, DateTimeKind.Local).AddTicks(2621),
                            Venue = "Just another pub"
                        },
                        new
                        {
                            Id = new Guid("476844c5-46f5-4b95-958f-2e8199286f77"),
                            Category = "music",
                            City = "London",
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 6, 19, 22, 31, 16, 530, DateTimeKind.Local).AddTicks(2641),
                            Date = new DateTime(2020, 12, 19, 22, 31, 16, 529, DateTimeKind.Local).AddTicks(7769),
                            Description = "Activity 6 months in future",
                            Title = "Future Activity 6",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 6, 19, 22, 31, 16, 530, DateTimeKind.Local).AddTicks(2645),
                            Venue = "Roundhouse Camden"
                        },
                        new
                        {
                            Id = new Guid("0589e668-24a8-41b9-b5bc-17812a13b6c7"),
                            Category = "travel",
                            City = "London",
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 6, 19, 22, 31, 16, 530, DateTimeKind.Local).AddTicks(2649),
                            Date = new DateTime(2021, 1, 19, 22, 31, 16, 529, DateTimeKind.Local).AddTicks(7774),
                            Description = "Activity 2 months ago",
                            Title = "Future Activity 7",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 6, 19, 22, 31, 16, 530, DateTimeKind.Local).AddTicks(2653),
                            Venue = "Somewhere on the Thames"
                        },
                        new
                        {
                            Id = new Guid("889ff5af-1a02-4c9c-b231-73b1267be854"),
                            Category = "film",
                            City = "London",
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 6, 19, 22, 31, 16, 530, DateTimeKind.Local).AddTicks(2657),
                            Date = new DateTime(2021, 2, 19, 22, 31, 16, 529, DateTimeKind.Local).AddTicks(7782),
                            Description = "Activity 8 months in future",
                            Title = "Future Activity 8",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 6, 19, 22, 31, 16, 530, DateTimeKind.Local).AddTicks(2661),
                            Venue = "Cinema"
                        });
                });

            modelBuilder.Entity("SocialNetwork.DataModel.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("VARCHAR(24)")
                        .HasMaxLength(24);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("VARCHAR(24)")
                        .HasMaxLength(24);

                    b.Property<string>("FirstName")
                        .HasColumnType("VARCHAR(24)")
                        .HasMaxLength(24);

                    b.Property<string>("LastName")
                        .HasColumnType("VARCHAR(24)")
                        .HasMaxLength(24);

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("VARCHAR(24)")
                        .HasMaxLength(24);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AppUser");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d377a106-380f-48e3-a049-e434943b2e13"),
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 6, 19, 22, 31, 16, 531, DateTimeKind.Local).AddTicks(2843),
                            Email = "JohnDoe@domain.com",
                            FirstName = "John",
                            LastName = "Doe",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 6, 19, 22, 31, 16, 531, DateTimeKind.Local).AddTicks(2897)
                        },
                        new
                        {
                            Id = new Guid("04dc3fab-d529-406d-a542-771c16250615"),
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 6, 19, 22, 31, 16, 531, DateTimeKind.Local).AddTicks(2942),
                            Email = "Jane.Smith@domain.com",
                            FirstName = "Jane",
                            LastName = "Smith",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 6, 19, 22, 31, 16, 531, DateTimeKind.Local).AddTicks(2947)
                        },
                        new
                        {
                            Id = new Guid("3885f8f6-72eb-4bc0-bb43-443564f0df3b"),
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 6, 19, 22, 31, 16, 531, DateTimeKind.Local).AddTicks(2954),
                            Email = "Bruce.Lee@domain.com",
                            FirstName = "Bruce",
                            LastName = "Lee",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 6, 19, 22, 31, 16, 531, DateTimeKind.Local).AddTicks(2958)
                        },
                        new
                        {
                            Id = new Guid("33f1bce9-29e0-46c3-bd49-2302a345931c"),
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 6, 19, 22, 31, 16, 531, DateTimeKind.Local).AddTicks(2963),
                            Email = "NP@domain.com",
                            FirstName = "Nij",
                            LastName = "Patel",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 6, 19, 22, 31, 16, 531, DateTimeKind.Local).AddTicks(2966)
                        });
                });

            modelBuilder.Entity("SocialNetwork.DataModel.IdentityUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("VARCHAR(24)")
                        .HasMaxLength(24);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Passoword")
                        .HasColumnType("VARCHAR(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Salt")
                        .HasColumnType("VARCHAR(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("VARCHAR(24)")
                        .HasMaxLength(24);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasColumnType("VARCHAR(24)")
                        .HasMaxLength(24);

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("IdentityUser");

                    b.HasData(
                        new
                        {
                            Id = new Guid("68741c21-35bf-4564-aa03-c35293ca972a"),
                            AppUserId = new Guid("d377a106-380f-48e3-a049-e434943b2e13"),
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 6, 19, 22, 31, 16, 532, DateTimeKind.Local).AddTicks(3320),
                            Passoword = "/8j7Y3aH1/NIcu5PWDxBaTftbv7kIhPN7IsIY+iDIZ0=",
                            Salt = "St0OnTE2Ju3Li9uSnlz/Mg==",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 6, 19, 22, 31, 16, 532, DateTimeKind.Local).AddTicks(3395),
                            UserName = "JohnDoe@domain.com"
                        },
                        new
                        {
                            Id = new Guid("b87e8320-ac39-4dcc-adc0-0963ae4f25f9"),
                            AppUserId = new Guid("04dc3fab-d529-406d-a542-771c16250615"),
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 6, 19, 22, 31, 16, 532, DateTimeKind.Local).AddTicks(3684),
                            Passoword = "S10V+ChlwEm8VzgQIqvhHrUS65y7d9/E0AiYhKLwT0o=",
                            Salt = "f9/SzZwluz+xI51/VQQIzg==",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 6, 19, 22, 31, 16, 532, DateTimeKind.Local).AddTicks(3692),
                            UserName = "Jane.Smith@domain.com"
                        },
                        new
                        {
                            Id = new Guid("bd6ad8bb-7f52-4edd-9589-70e4bdace0d5"),
                            AppUserId = new Guid("3885f8f6-72eb-4bc0-bb43-443564f0df3b"),
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 6, 19, 22, 31, 16, 532, DateTimeKind.Local).AddTicks(3701),
                            Passoword = "5OekvvKMPp2M+O3Ts2/G912N9lCNqz412l1y8uHazZc=",
                            Salt = "DEX8D+3HR9flD6NpGibucQ==",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 6, 19, 22, 31, 16, 532, DateTimeKind.Local).AddTicks(3705),
                            UserName = "Bruce.Lee@domain.com"
                        },
                        new
                        {
                            Id = new Guid("a136495b-bb12-4894-8947-24d609f6d9fa"),
                            AppUserId = new Guid("33f1bce9-29e0-46c3-bd49-2302a345931c"),
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 6, 19, 22, 31, 16, 532, DateTimeKind.Local).AddTicks(3712),
                            Passoword = "k94BgmW7ByRA20JstnnZy/r4spmr5a43Wj7TOez6Ceg=",
                            Salt = "tycaGrI7zbrlLUa1rlq/Eg==",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 6, 19, 22, 31, 16, 532, DateTimeKind.Local).AddTicks(3715),
                            UserName = "string"
                        });
                });

            modelBuilder.Entity("SocialNetwork.DataModel.UserActivity", b =>
                {
                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateJoined")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsHost")
                        .HasColumnType("bit");

                    b.HasKey("ActivityId", "AppUserId");

                    b.HasIndex("AppUserId");

                    b.ToTable("UserActivity");
                });

            modelBuilder.Entity("SocialNetwork.DataModel.Value", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Value");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Value 101"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Value 201"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Value 301"
                        });
                });

            modelBuilder.Entity("SocialNetwork.DataModel.IdentityUser", b =>
                {
                    b.HasOne("SocialNetwork.DataModel.AppUser", "AppUser")
                        .WithOne("IdentityUser")
                        .HasForeignKey("SocialNetwork.DataModel.IdentityUser", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialNetwork.DataModel.UserActivity", b =>
                {
                    b.HasOne("SocialNetwork.DataModel.Activity", "Activity")
                        .WithMany("UserActivities")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialNetwork.DataModel.AppUser", "AppUser")
                        .WithMany("UserActivities")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
