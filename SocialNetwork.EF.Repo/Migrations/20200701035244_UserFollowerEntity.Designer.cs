// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SocialNetwork.EF.Repo;

namespace SocialNetwork.EF.Repo.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20200701035244_UserFollowerEntity")]
    partial class UserFollowerEntity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SocialNetwork.DataModel.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .HasColumnType("VARCHAR(50)")
                        .HasMaxLength(50);

                    b.Property<string>("City")
                        .HasColumnType("VARCHAR(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("VARCHAR(24)")
                        .HasMaxLength(24);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Title")
                        .HasColumnType("VARCHAR(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("VARCHAR(24)")
                        .HasMaxLength(24);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Venue")
                        .HasColumnType("VARCHAR(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Activity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fcda0ee6-0b33-4402-a42e-ebdeaba3c027"),
                            Category = "drinks",
                            City = "London",
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 6, 30, 23, 52, 42, 802, DateTimeKind.Local).AddTicks(5681),
                            Date = new DateTime(2020, 4, 30, 23, 52, 42, 797, DateTimeKind.Local).AddTicks(897),
                            Description = "Activity 2 months ago",
                            Title = "Past Activity 1",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 6, 30, 23, 52, 42, 802, DateTimeKind.Local).AddTicks(6385),
                            Venue = "Pub"
                        },
                        new
                        {
                            Id = new Guid("43a35040-876a-4694-b49a-c0430749d1fd"),
                            Category = "culture",
                            City = "Paris",
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 6, 30, 23, 52, 42, 802, DateTimeKind.Local).AddTicks(7143),
                            Date = new DateTime(2020, 5, 30, 23, 52, 42, 802, DateTimeKind.Local).AddTicks(1056),
                            Description = "Activity 1 month ago",
                            Title = "Past Activity 2",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 6, 30, 23, 52, 42, 802, DateTimeKind.Local).AddTicks(7268),
                            Venue = "Louvre"
                        },
                        new
                        {
                            Id = new Guid("383b73d9-581d-4825-bcff-5960142c1528"),
                            Category = "culture",
                            City = "London",
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 6, 30, 23, 52, 42, 802, DateTimeKind.Local).AddTicks(7489),
                            Date = new DateTime(2020, 7, 30, 23, 52, 42, 802, DateTimeKind.Local).AddTicks(1208),
                            Description = "Activity 1 month in future",
                            Title = "Future Activity 1",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 6, 30, 23, 52, 42, 802, DateTimeKind.Local).AddTicks(7509),
                            Venue = "Natural History Museum"
                        },
                        new
                        {
                            Id = new Guid("e61a5a31-c4b6-4d9b-a479-4522a117708d"),
                            Category = "music",
                            City = "London",
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 6, 30, 23, 52, 42, 802, DateTimeKind.Local).AddTicks(7515),
                            Date = new DateTime(2020, 8, 30, 23, 52, 42, 802, DateTimeKind.Local).AddTicks(1220),
                            Description = "Activity 2 months in future",
                            Title = "Future Activity 2",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 6, 30, 23, 52, 42, 802, DateTimeKind.Local).AddTicks(7519),
                            Venue = "O2 Arena"
                        },
                        new
                        {
                            Id = new Guid("58768f77-8fcd-42f6-b9d8-de4f1d4cf8df"),
                            Category = "drinks",
                            City = "London",
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 6, 30, 23, 52, 42, 802, DateTimeKind.Local).AddTicks(7525),
                            Date = new DateTime(2020, 9, 30, 23, 52, 42, 802, DateTimeKind.Local).AddTicks(1225),
                            Description = "Activity 3 months in future",
                            Title = "Future Activity 3",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 6, 30, 23, 52, 42, 802, DateTimeKind.Local).AddTicks(7530),
                            Venue = "Another pub"
                        },
                        new
                        {
                            Id = new Guid("ae685e8e-2521-4469-9ba2-6ecb935f6ec6"),
                            Category = "drinks",
                            City = "London",
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 6, 30, 23, 52, 42, 802, DateTimeKind.Local).AddTicks(7535),
                            Date = new DateTime(2020, 10, 30, 23, 52, 42, 802, DateTimeKind.Local).AddTicks(1240),
                            Description = "Activity 4 months in future",
                            Title = "Future Activity 4",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 6, 30, 23, 52, 42, 802, DateTimeKind.Local).AddTicks(7540),
                            Venue = "Yet another pub"
                        },
                        new
                        {
                            Id = new Guid("b81b1e3d-7c2b-4b41-95de-1ac2129b4bd4"),
                            Category = "drinks",
                            City = "London",
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 6, 30, 23, 52, 42, 802, DateTimeKind.Local).AddTicks(7559),
                            Date = new DateTime(2020, 11, 30, 23, 52, 42, 802, DateTimeKind.Local).AddTicks(1245),
                            Description = "Activity 5 months in future",
                            Title = "Future Activity 5",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 6, 30, 23, 52, 42, 802, DateTimeKind.Local).AddTicks(7563),
                            Venue = "Just another pub"
                        },
                        new
                        {
                            Id = new Guid("5753186c-dccc-4196-b75f-cfdab0aa6cd6"),
                            Category = "music",
                            City = "London",
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 6, 30, 23, 52, 42, 802, DateTimeKind.Local).AddTicks(7569),
                            Date = new DateTime(2020, 12, 30, 23, 52, 42, 802, DateTimeKind.Local).AddTicks(1251),
                            Description = "Activity 6 months in future",
                            Title = "Future Activity 6",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 6, 30, 23, 52, 42, 802, DateTimeKind.Local).AddTicks(7573),
                            Venue = "Roundhouse Camden"
                        },
                        new
                        {
                            Id = new Guid("6f81c396-3161-4a9d-acf1-648e71a6a98b"),
                            Category = "travel",
                            City = "London",
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 6, 30, 23, 52, 42, 802, DateTimeKind.Local).AddTicks(7578),
                            Date = new DateTime(2021, 1, 30, 23, 52, 42, 802, DateTimeKind.Local).AddTicks(1257),
                            Description = "Activity 2 months ago",
                            Title = "Future Activity 7",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 6, 30, 23, 52, 42, 802, DateTimeKind.Local).AddTicks(7583),
                            Venue = "Somewhere on the Thames"
                        },
                        new
                        {
                            Id = new Guid("5124498c-1451-450d-a4c1-9c80b9f43b4c"),
                            Category = "film",
                            City = "London",
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 6, 30, 23, 52, 42, 802, DateTimeKind.Local).AddTicks(7588),
                            Date = new DateTime(2021, 2, 28, 23, 52, 42, 802, DateTimeKind.Local).AddTicks(1265),
                            Description = "Activity 8 months in future",
                            Title = "Future Activity 8",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 6, 30, 23, 52, 42, 802, DateTimeKind.Local).AddTicks(7592),
                            Venue = "Cinema"
                        });
                });

            modelBuilder.Entity("SocialNetwork.DataModel.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bio")
                        .HasColumnType("VARCHAR(240)")
                        .HasMaxLength(240);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("VARCHAR(24)")
                        .HasMaxLength(24);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("VARCHAR(24)")
                        .HasMaxLength(24);

                    b.Property<string>("FirstName")
                        .HasColumnType("VARCHAR(24)")
                        .HasMaxLength(24);

                    b.Property<string>("LastName")
                        .HasColumnType("VARCHAR(24)")
                        .HasMaxLength(24);

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("VARCHAR(24)")
                        .HasMaxLength(24);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AppUser");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3c5e848f-a6e1-4b5d-9d98-ca792d0bb1bf"),
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 6, 30, 23, 52, 42, 804, DateTimeKind.Local).AddTicks(3718),
                            Email = "JohnDoe@domain.com",
                            FirstName = "John",
                            LastName = "Doe",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 6, 30, 23, 52, 42, 804, DateTimeKind.Local).AddTicks(3833)
                        },
                        new
                        {
                            Id = new Guid("430ca1f5-aed7-46a9-923b-39da0ec5b83b"),
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 6, 30, 23, 52, 42, 804, DateTimeKind.Local).AddTicks(3907),
                            Email = "Jane.Smith@domain.com",
                            FirstName = "Jane",
                            LastName = "Smith",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 6, 30, 23, 52, 42, 804, DateTimeKind.Local).AddTicks(3914)
                        },
                        new
                        {
                            Id = new Guid("c991a793-4298-4a6a-b45a-8a35955a3af2"),
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 6, 30, 23, 52, 42, 804, DateTimeKind.Local).AddTicks(3922),
                            Email = "Bruce.Lee@domain.com",
                            FirstName = "Bruce",
                            LastName = "Lee",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 6, 30, 23, 52, 42, 804, DateTimeKind.Local).AddTicks(3928)
                        },
                        new
                        {
                            Id = new Guid("743fbd05-33eb-431a-9889-6cc1350a3dd7"),
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 6, 30, 23, 52, 42, 804, DateTimeKind.Local).AddTicks(3937),
                            Email = "NP@domain.com",
                            FirstName = "Nij",
                            LastName = "Patel",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 6, 30, 23, 52, 42, 804, DateTimeKind.Local).AddTicks(3943)
                        });
                });

            modelBuilder.Entity("SocialNetwork.DataModel.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .HasColumnType("VARCHAR(240)")
                        .HasMaxLength(240);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("SocialNetwork.DataModel.IdentityUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("VARCHAR(24)")
                        .HasMaxLength(24);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Passoword")
                        .HasColumnType("VARCHAR(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Salt")
                        .HasColumnType("VARCHAR(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("VARCHAR(24)")
                        .HasMaxLength(24);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasColumnType("VARCHAR(24)")
                        .HasMaxLength(24);

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("IdentityUser");

                    b.HasData(
                        new
                        {
                            Id = new Guid("084f7f36-fa5e-4bf5-a693-ebc375fde0cb"),
                            AppUserId = new Guid("3c5e848f-a6e1-4b5d-9d98-ca792d0bb1bf"),
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 6, 30, 23, 52, 42, 805, DateTimeKind.Local).AddTicks(8869),
                            Passoword = "/8j7Y3aH1/NIcu5PWDxBaTftbv7kIhPN7IsIY+iDIZ0=",
                            Salt = "St0OnTE2Ju3Li9uSnlz/Mg==",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 6, 30, 23, 52, 42, 805, DateTimeKind.Local).AddTicks(9035),
                            UserName = "JohnDoe@domain.com"
                        },
                        new
                        {
                            Id = new Guid("e987411c-5bf5-4103-8900-1fef7fbb080a"),
                            AppUserId = new Guid("430ca1f5-aed7-46a9-923b-39da0ec5b83b"),
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 6, 30, 23, 52, 42, 805, DateTimeKind.Local).AddTicks(9484),
                            Passoword = "S10V+ChlwEm8VzgQIqvhHrUS65y7d9/E0AiYhKLwT0o=",
                            Salt = "f9/SzZwluz+xI51/VQQIzg==",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 6, 30, 23, 52, 42, 805, DateTimeKind.Local).AddTicks(9493),
                            UserName = "Jane.Smith@domain.com"
                        },
                        new
                        {
                            Id = new Guid("267e9e33-f597-4933-af82-1159ef48b4d5"),
                            AppUserId = new Guid("c991a793-4298-4a6a-b45a-8a35955a3af2"),
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 6, 30, 23, 52, 42, 805, DateTimeKind.Local).AddTicks(9503),
                            Passoword = "5OekvvKMPp2M+O3Ts2/G912N9lCNqz412l1y8uHazZc=",
                            Salt = "DEX8D+3HR9flD6NpGibucQ==",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 6, 30, 23, 52, 42, 805, DateTimeKind.Local).AddTicks(9510),
                            UserName = "Bruce.Lee@domain.com"
                        },
                        new
                        {
                            Id = new Guid("29fe9311-4c54-456c-bdad-cbea92b63908"),
                            AppUserId = new Guid("743fbd05-33eb-431a-9889-6cc1350a3dd7"),
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 6, 30, 23, 52, 42, 805, DateTimeKind.Local).AddTicks(9522),
                            Passoword = "k94BgmW7ByRA20JstnnZy/r4spmr5a43Wj7TOez6Ceg=",
                            Salt = "tycaGrI7zbrlLUa1rlq/Eg==",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 6, 30, 23, 52, 42, 805, DateTimeKind.Local).AddTicks(9528),
                            UserName = "string"
                        });
                });

            modelBuilder.Entity("SocialNetwork.DataModel.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActualFileName")
                        .HasColumnType("VARCHAR(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CloudFileName")
                        .HasColumnType("VARCHAR(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ContentType")
                        .HasColumnType("VARCHAR(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsMainPhoto")
                        .HasColumnType("bit");

                    b.Property<long>("Length")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Photo");
                });

            modelBuilder.Entity("SocialNetwork.DataModel.UserActivity", b =>
                {
                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateJoined")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsHost")
                        .HasColumnType("bit");

                    b.HasKey("ActivityId", "AppUserId");

                    b.HasIndex("AppUserId");

                    b.ToTable("UserActivity");
                });

            modelBuilder.Entity("SocialNetwork.DataModel.UserFollower", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FollowerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "FollowerId");

                    b.HasIndex("FollowerId");

                    b.ToTable("UserFollower");
                });

            modelBuilder.Entity("SocialNetwork.DataModel.Value", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Value");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Value 101"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Value 201"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Value 301"
                        });
                });

            modelBuilder.Entity("SocialNetwork.DataModel.Comment", b =>
                {
                    b.HasOne("SocialNetwork.DataModel.Activity", "Activity")
                        .WithMany("Comments")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialNetwork.DataModel.AppUser", "Author")
                        .WithMany("Comments")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialNetwork.DataModel.IdentityUser", b =>
                {
                    b.HasOne("SocialNetwork.DataModel.AppUser", "AppUser")
                        .WithOne("IdentityUser")
                        .HasForeignKey("SocialNetwork.DataModel.IdentityUser", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialNetwork.DataModel.Photo", b =>
                {
                    b.HasOne("SocialNetwork.DataModel.AppUser", "AppUser")
                        .WithMany("Photos")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialNetwork.DataModel.UserActivity", b =>
                {
                    b.HasOne("SocialNetwork.DataModel.Activity", "Activity")
                        .WithMany("UserActivities")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialNetwork.DataModel.AppUser", "AppUser")
                        .WithMany("Activities")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialNetwork.DataModel.UserFollower", b =>
                {
                    b.HasOne("SocialNetwork.DataModel.AppUser", "Follower")
                        .WithMany("Followers")
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SocialNetwork.DataModel.AppUser", "User")
                        .WithMany("Followings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
