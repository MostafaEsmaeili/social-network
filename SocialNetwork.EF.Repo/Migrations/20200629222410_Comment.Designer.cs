// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SocialNetwork.EF.Repo;

namespace SocialNetwork.EF.Repo.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20200629222410_Comment")]
    partial class Comment
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SocialNetwork.DataModel.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .HasColumnType("VARCHAR(50)")
                        .HasMaxLength(50);

                    b.Property<string>("City")
                        .HasColumnType("VARCHAR(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("VARCHAR(24)")
                        .HasMaxLength(24);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Title")
                        .HasColumnType("VARCHAR(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("VARCHAR(24)")
                        .HasMaxLength(24);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Venue")
                        .HasColumnType("VARCHAR(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Activity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2b7fd22d-f0ee-4a50-a6fb-871b8fd06a1d"),
                            Category = "drinks",
                            City = "London",
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 6, 29, 18, 24, 9, 365, DateTimeKind.Local).AddTicks(5021),
                            Date = new DateTime(2020, 4, 29, 18, 24, 9, 359, DateTimeKind.Local).AddTicks(34),
                            Description = "Activity 2 months ago",
                            Title = "Past Activity 1",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 6, 29, 18, 24, 9, 365, DateTimeKind.Local).AddTicks(6317),
                            Venue = "Pub"
                        },
                        new
                        {
                            Id = new Guid("9192118e-bc9a-4775-bf25-922f4e81629c"),
                            Category = "culture",
                            City = "Paris",
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 6, 29, 18, 24, 9, 365, DateTimeKind.Local).AddTicks(7550),
                            Date = new DateTime(2020, 5, 29, 18, 24, 9, 364, DateTimeKind.Local).AddTicks(8609),
                            Description = "Activity 1 month ago",
                            Title = "Past Activity 2",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 6, 29, 18, 24, 9, 365, DateTimeKind.Local).AddTicks(7628),
                            Venue = "Louvre"
                        },
                        new
                        {
                            Id = new Guid("1b25ee77-4ea9-4812-902f-cdfb538c874f"),
                            Category = "culture",
                            City = "London",
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 6, 29, 18, 24, 9, 365, DateTimeKind.Local).AddTicks(7673),
                            Date = new DateTime(2020, 7, 29, 18, 24, 9, 364, DateTimeKind.Local).AddTicks(8821),
                            Description = "Activity 1 month in future",
                            Title = "Future Activity 1",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 6, 29, 18, 24, 9, 365, DateTimeKind.Local).AddTicks(7680),
                            Venue = "Natural History Museum"
                        },
                        new
                        {
                            Id = new Guid("fef6aef4-be94-4b36-b814-5d825bbe6f2a"),
                            Category = "music",
                            City = "London",
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 6, 29, 18, 24, 9, 365, DateTimeKind.Local).AddTicks(7710),
                            Date = new DateTime(2020, 8, 29, 18, 24, 9, 364, DateTimeKind.Local).AddTicks(8840),
                            Description = "Activity 2 months in future",
                            Title = "Future Activity 2",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 6, 29, 18, 24, 9, 365, DateTimeKind.Local).AddTicks(7717),
                            Venue = "O2 Arena"
                        },
                        new
                        {
                            Id = new Guid("569f94f0-3e42-4160-96ab-bd7a79920f1c"),
                            Category = "drinks",
                            City = "London",
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 6, 29, 18, 24, 9, 365, DateTimeKind.Local).AddTicks(7726),
                            Date = new DateTime(2020, 9, 29, 18, 24, 9, 364, DateTimeKind.Local).AddTicks(8850),
                            Description = "Activity 3 months in future",
                            Title = "Future Activity 3",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 6, 29, 18, 24, 9, 365, DateTimeKind.Local).AddTicks(7733),
                            Venue = "Another pub"
                        },
                        new
                        {
                            Id = new Guid("29fcdf4a-6edf-43e8-b23e-234b7ebdf2e1"),
                            Category = "drinks",
                            City = "London",
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 6, 29, 18, 24, 9, 365, DateTimeKind.Local).AddTicks(7741),
                            Date = new DateTime(2020, 10, 29, 18, 24, 9, 364, DateTimeKind.Local).AddTicks(8867),
                            Description = "Activity 4 months in future",
                            Title = "Future Activity 4",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 6, 29, 18, 24, 9, 365, DateTimeKind.Local).AddTicks(7747),
                            Venue = "Yet another pub"
                        },
                        new
                        {
                            Id = new Guid("e9c12889-6947-4224-a8ce-7212f929c7f2"),
                            Category = "drinks",
                            City = "London",
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 6, 29, 18, 24, 9, 365, DateTimeKind.Local).AddTicks(7755),
                            Date = new DateTime(2020, 11, 29, 18, 24, 9, 364, DateTimeKind.Local).AddTicks(8876),
                            Description = "Activity 5 months in future",
                            Title = "Future Activity 5",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 6, 29, 18, 24, 9, 365, DateTimeKind.Local).AddTicks(7762),
                            Venue = "Just another pub"
                        },
                        new
                        {
                            Id = new Guid("224c2d36-98dc-4e69-9e07-1e87f4219e74"),
                            Category = "music",
                            City = "London",
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 6, 29, 18, 24, 9, 365, DateTimeKind.Local).AddTicks(7771),
                            Date = new DateTime(2020, 12, 29, 18, 24, 9, 364, DateTimeKind.Local).AddTicks(8885),
                            Description = "Activity 6 months in future",
                            Title = "Future Activity 6",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 6, 29, 18, 24, 9, 365, DateTimeKind.Local).AddTicks(7777),
                            Venue = "Roundhouse Camden"
                        },
                        new
                        {
                            Id = new Guid("7138ce38-45c6-4412-b816-7879c4c332d0"),
                            Category = "travel",
                            City = "London",
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 6, 29, 18, 24, 9, 365, DateTimeKind.Local).AddTicks(7785),
                            Date = new DateTime(2021, 1, 29, 18, 24, 9, 364, DateTimeKind.Local).AddTicks(8894),
                            Description = "Activity 2 months ago",
                            Title = "Future Activity 7",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 6, 29, 18, 24, 9, 365, DateTimeKind.Local).AddTicks(7792),
                            Venue = "Somewhere on the Thames"
                        },
                        new
                        {
                            Id = new Guid("ce788c7f-df8b-416f-bdf7-ccc0cb66b0ee"),
                            Category = "film",
                            City = "London",
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 6, 29, 18, 24, 9, 365, DateTimeKind.Local).AddTicks(7801),
                            Date = new DateTime(2021, 2, 28, 18, 24, 9, 364, DateTimeKind.Local).AddTicks(8908),
                            Description = "Activity 8 months in future",
                            Title = "Future Activity 8",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 6, 29, 18, 24, 9, 365, DateTimeKind.Local).AddTicks(7807),
                            Venue = "Cinema"
                        });
                });

            modelBuilder.Entity("SocialNetwork.DataModel.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bio")
                        .HasColumnType("VARCHAR(240)")
                        .HasMaxLength(240);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("VARCHAR(24)")
                        .HasMaxLength(24);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("VARCHAR(24)")
                        .HasMaxLength(24);

                    b.Property<string>("FirstName")
                        .HasColumnType("VARCHAR(24)")
                        .HasMaxLength(24);

                    b.Property<string>("LastName")
                        .HasColumnType("VARCHAR(24)")
                        .HasMaxLength(24);

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("VARCHAR(24)")
                        .HasMaxLength(24);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AppUser");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f4dab947-cb80-403c-ac06-0b4d8f43d86f"),
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 6, 29, 18, 24, 9, 367, DateTimeKind.Local).AddTicks(5707),
                            Email = "JohnDoe@domain.com",
                            FirstName = "John",
                            LastName = "Doe",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 6, 29, 18, 24, 9, 367, DateTimeKind.Local).AddTicks(5831)
                        },
                        new
                        {
                            Id = new Guid("bf0f0369-0e79-443c-a4be-2e096cfadc19"),
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 6, 29, 18, 24, 9, 367, DateTimeKind.Local).AddTicks(5934),
                            Email = "Jane.Smith@domain.com",
                            FirstName = "Jane",
                            LastName = "Smith",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 6, 29, 18, 24, 9, 367, DateTimeKind.Local).AddTicks(5944)
                        },
                        new
                        {
                            Id = new Guid("75da9d7c-fea3-4f22-862d-e5a40d004e65"),
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 6, 29, 18, 24, 9, 367, DateTimeKind.Local).AddTicks(5955),
                            Email = "Bruce.Lee@domain.com",
                            FirstName = "Bruce",
                            LastName = "Lee",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 6, 29, 18, 24, 9, 367, DateTimeKind.Local).AddTicks(5961)
                        },
                        new
                        {
                            Id = new Guid("41ecd0fd-8ff4-4c1d-aed6-8158ad8e1905"),
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 6, 29, 18, 24, 9, 367, DateTimeKind.Local).AddTicks(5971),
                            Email = "NP@domain.com",
                            FirstName = "Nij",
                            LastName = "Patel",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 6, 29, 18, 24, 9, 367, DateTimeKind.Local).AddTicks(5977)
                        });
                });

            modelBuilder.Entity("SocialNetwork.DataModel.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .HasColumnType("VARCHAR(240)")
                        .HasMaxLength(240);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("SocialNetwork.DataModel.IdentityUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("VARCHAR(24)")
                        .HasMaxLength(24);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Passoword")
                        .HasColumnType("VARCHAR(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Salt")
                        .HasColumnType("VARCHAR(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("VARCHAR(24)")
                        .HasMaxLength(24);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasColumnType("VARCHAR(24)")
                        .HasMaxLength(24);

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("IdentityUser");

                    b.HasData(
                        new
                        {
                            Id = new Guid("864c11fe-e06b-4f54-a504-f94376c8f770"),
                            AppUserId = new Guid("f4dab947-cb80-403c-ac06-0b4d8f43d86f"),
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 6, 29, 18, 24, 9, 369, DateTimeKind.Local).AddTicks(3893),
                            Passoword = "/8j7Y3aH1/NIcu5PWDxBaTftbv7kIhPN7IsIY+iDIZ0=",
                            Salt = "St0OnTE2Ju3Li9uSnlz/Mg==",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 6, 29, 18, 24, 9, 369, DateTimeKind.Local).AddTicks(3987),
                            UserName = "JohnDoe@domain.com"
                        },
                        new
                        {
                            Id = new Guid("98221c13-b39e-4058-a52f-b87c6ff95c98"),
                            AppUserId = new Guid("bf0f0369-0e79-443c-a4be-2e096cfadc19"),
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 6, 29, 18, 24, 9, 369, DateTimeKind.Local).AddTicks(4383),
                            Passoword = "S10V+ChlwEm8VzgQIqvhHrUS65y7d9/E0AiYhKLwT0o=",
                            Salt = "f9/SzZwluz+xI51/VQQIzg==",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 6, 29, 18, 24, 9, 369, DateTimeKind.Local).AddTicks(4396),
                            UserName = "Jane.Smith@domain.com"
                        },
                        new
                        {
                            Id = new Guid("c7112578-f044-4f48-9f41-7a8842f0d1ef"),
                            AppUserId = new Guid("75da9d7c-fea3-4f22-862d-e5a40d004e65"),
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 6, 29, 18, 24, 9, 369, DateTimeKind.Local).AddTicks(4412),
                            Passoword = "5OekvvKMPp2M+O3Ts2/G912N9lCNqz412l1y8uHazZc=",
                            Salt = "DEX8D+3HR9flD6NpGibucQ==",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 6, 29, 18, 24, 9, 369, DateTimeKind.Local).AddTicks(4418),
                            UserName = "Bruce.Lee@domain.com"
                        },
                        new
                        {
                            Id = new Guid("693017b7-fd2d-431f-a5ca-6bf903101e48"),
                            AppUserId = new Guid("41ecd0fd-8ff4-4c1d-aed6-8158ad8e1905"),
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 6, 29, 18, 24, 9, 369, DateTimeKind.Local).AddTicks(4430),
                            Passoword = "k94BgmW7ByRA20JstnnZy/r4spmr5a43Wj7TOez6Ceg=",
                            Salt = "tycaGrI7zbrlLUa1rlq/Eg==",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 6, 29, 18, 24, 9, 369, DateTimeKind.Local).AddTicks(4437),
                            UserName = "string"
                        });
                });

            modelBuilder.Entity("SocialNetwork.DataModel.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActualFileName")
                        .HasColumnType("VARCHAR(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CloudFileName")
                        .HasColumnType("VARCHAR(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ContentType")
                        .HasColumnType("VARCHAR(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsMainPhoto")
                        .HasColumnType("bit");

                    b.Property<long>("Length")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Photo");
                });

            modelBuilder.Entity("SocialNetwork.DataModel.UserActivity", b =>
                {
                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateJoined")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsHost")
                        .HasColumnType("bit");

                    b.HasKey("ActivityId", "AppUserId");

                    b.HasIndex("AppUserId");

                    b.ToTable("UserActivity");
                });

            modelBuilder.Entity("SocialNetwork.DataModel.Value", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Value");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Value 101"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Value 201"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Value 301"
                        });
                });

            modelBuilder.Entity("SocialNetwork.DataModel.Comment", b =>
                {
                    b.HasOne("SocialNetwork.DataModel.Activity", "Activity")
                        .WithMany("Comments")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialNetwork.DataModel.AppUser", "Author")
                        .WithMany("Comments")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialNetwork.DataModel.IdentityUser", b =>
                {
                    b.HasOne("SocialNetwork.DataModel.AppUser", "AppUser")
                        .WithOne("IdentityUser")
                        .HasForeignKey("SocialNetwork.DataModel.IdentityUser", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialNetwork.DataModel.Photo", b =>
                {
                    b.HasOne("SocialNetwork.DataModel.AppUser", "AppUser")
                        .WithMany("Photos")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialNetwork.DataModel.UserActivity", b =>
                {
                    b.HasOne("SocialNetwork.DataModel.Activity", "Activity")
                        .WithMany("UserActivities")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialNetwork.DataModel.AppUser", "AppUser")
                        .WithMany("Activities")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
