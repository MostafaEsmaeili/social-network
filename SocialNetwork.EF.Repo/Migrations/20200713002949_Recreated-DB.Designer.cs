// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SocialNetwork.EF.Repo;

namespace SocialNetwork.EF.Repo.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20200713002949_Recreated-DB")]
    partial class RecreatedDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SocialNetwork.DataModel.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .HasColumnType("VARCHAR(50)")
                        .HasMaxLength(50);

                    b.Property<string>("City")
                        .HasColumnType("VARCHAR(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("VARCHAR(24)")
                        .HasMaxLength(24);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Title")
                        .HasColumnType("VARCHAR(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("VARCHAR(24)")
                        .HasMaxLength(24);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Venue")
                        .HasColumnType("VARCHAR(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Activity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9411f42d-592a-4b01-bee8-db08f9473a48"),
                            Category = "drinks",
                            City = "London",
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 7, 12, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(1720),
                            Date = new DateTime(2020, 5, 12, 20, 29, 49, 54, DateTimeKind.Local).AddTicks(6355),
                            Description = "Activity 2 months ago",
                            Title = "Past Activity 1",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 7, 12, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(1805),
                            Venue = "Pub"
                        },
                        new
                        {
                            Id = new Guid("f74a0ce5-1bfb-4b94-b0c5-663629ec8588"),
                            Category = "culture",
                            City = "Paris",
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 7, 12, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(1863),
                            Date = new DateTime(2020, 6, 12, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(189),
                            Description = "Activity 1 month ago",
                            Title = "Past Activity 2",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 7, 12, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(1870),
                            Venue = "Louvre"
                        },
                        new
                        {
                            Id = new Guid("d48ac8d3-7ff4-46c8-b652-5d87afbfd1f7"),
                            Category = "culture",
                            City = "London",
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 7, 12, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(1878),
                            Date = new DateTime(2020, 8, 12, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(297),
                            Description = "Activity 1 month in future",
                            Title = "Future Activity 1",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 7, 12, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(1885),
                            Venue = "Natural History Museum"
                        },
                        new
                        {
                            Id = new Guid("d3fe056e-2fbd-435b-93f8-79a39142b530"),
                            Category = "music",
                            City = "London",
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 7, 12, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(1892),
                            Date = new DateTime(2020, 9, 12, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(307),
                            Description = "Activity 2 months in future",
                            Title = "Future Activity 2",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 7, 12, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(1898),
                            Venue = "O2 Arena"
                        },
                        new
                        {
                            Id = new Guid("12b96b10-4fba-4b85-8804-b7172f0eaff1"),
                            Category = "drinks",
                            City = "London",
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 7, 12, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(1905),
                            Date = new DateTime(2020, 10, 12, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(315),
                            Description = "Activity 3 months in future",
                            Title = "Future Activity 3",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 7, 12, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(1911),
                            Venue = "Another pub"
                        },
                        new
                        {
                            Id = new Guid("753d5b55-ff88-4a28-a92c-364c3b68736c"),
                            Category = "drinks",
                            City = "London",
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 7, 12, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(1919),
                            Date = new DateTime(2020, 11, 12, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(330),
                            Description = "Activity 4 months in future",
                            Title = "Future Activity 4",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 7, 12, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(1925),
                            Venue = "Yet another pub"
                        },
                        new
                        {
                            Id = new Guid("7d9ab25f-2ca9-42fa-b2d9-29d40892a26b"),
                            Category = "drinks",
                            City = "London",
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 7, 12, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(1933),
                            Date = new DateTime(2020, 12, 12, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(339),
                            Description = "Activity 5 months in future",
                            Title = "Future Activity 5",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 7, 12, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(1939),
                            Venue = "Just another pub"
                        },
                        new
                        {
                            Id = new Guid("00e6b54a-27bf-4e0e-897f-0773c8c2ada5"),
                            Category = "music",
                            City = "London",
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 7, 12, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(1947),
                            Date = new DateTime(2021, 1, 12, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(346),
                            Description = "Activity 6 months in future",
                            Title = "Future Activity 6",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 7, 12, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(1952),
                            Venue = "Roundhouse Camden"
                        },
                        new
                        {
                            Id = new Guid("5ed64d2e-7dbc-4538-ac0a-eb073eb75bb3"),
                            Category = "travel",
                            City = "London",
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 7, 12, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(1968),
                            Date = new DateTime(2021, 2, 12, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(355),
                            Description = "Activity 2 months ago",
                            Title = "Future Activity 7",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 7, 12, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(1974),
                            Venue = "Somewhere on the Thames"
                        },
                        new
                        {
                            Id = new Guid("76a7f1e7-f9ee-4df2-9268-3d7bd4a15578"),
                            Category = "film",
                            City = "London",
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 7, 12, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(1982),
                            Date = new DateTime(2021, 3, 12, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(366),
                            Description = "Activity 8 months in future",
                            Title = "Future Activity 8",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 7, 12, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(1988),
                            Venue = "Cinema"
                        },
                        new
                        {
                            Id = new Guid("bcdae06a-2c5e-4019-bdab-b59893df8a08"),
                            Category = "drinks",
                            City = "Richmond",
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 7, 12, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(1996),
                            Date = new DateTime(2021, 4, 12, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(374),
                            Description = "Activity 9 months in future",
                            Title = "Future Activity 9",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 7, 12, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(2002),
                            Venue = "Pub"
                        },
                        new
                        {
                            Id = new Guid("e102f5ab-0ded-4a3d-96a0-7bafe78ab476"),
                            Category = "music",
                            City = "Glen Allen",
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 7, 12, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(2010),
                            Date = new DateTime(2021, 5, 12, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(382),
                            Description = "Activity 10 months in future",
                            Title = "Future Activity 10",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 7, 12, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(2015),
                            Venue = "Party Place"
                        },
                        new
                        {
                            Id = new Guid("c10a7210-3887-4c1c-b584-df6f78dee370"),
                            Category = "music",
                            City = "RVA",
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 7, 12, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(2024),
                            Date = new DateTime(2021, 6, 12, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(391),
                            Description = "Activity 11 months in future",
                            Title = "Future Activity 11",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 7, 12, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(2030),
                            Venue = "Bollywood Music"
                        },
                        new
                        {
                            Id = new Guid("f75728db-f94a-4c7e-be7f-b6fa38354872"),
                            Category = "music",
                            City = "Seattle",
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 7, 12, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(2038),
                            Date = new DateTime(2021, 7, 12, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(399),
                            Description = "Activity 12 months in future",
                            Title = "Future Activity 12",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 7, 12, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(2043),
                            Venue = "Party Place"
                        },
                        new
                        {
                            Id = new Guid("8418c88c-f351-4816-b36a-c2bb55cf0825"),
                            Category = "drinks",
                            City = "Fairfax",
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 7, 12, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(2051),
                            Date = new DateTime(2021, 8, 12, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(407),
                            Description = "Activity 13 months in future",
                            Title = "Future Activity 13",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 7, 12, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(2057),
                            Venue = "Disco Place"
                        });
                });

            modelBuilder.Entity("SocialNetwork.DataModel.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bio")
                        .HasColumnType("VARCHAR(240)")
                        .HasMaxLength(240);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("VARCHAR(24)")
                        .HasMaxLength(24);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("VARCHAR(24)")
                        .HasMaxLength(24);

                    b.Property<string>("FirstName")
                        .HasColumnType("VARCHAR(24)")
                        .HasMaxLength(24);

                    b.Property<string>("LastName")
                        .HasColumnType("VARCHAR(24)")
                        .HasMaxLength(24);

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("VARCHAR(24)")
                        .HasMaxLength(24);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AppUser");

                    b.HasData(
                        new
                        {
                            Id = new Guid("327987e6-fe50-4ebc-9729-fa87348857c1"),
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 7, 12, 20, 29, 49, 44, DateTimeKind.Local).AddTicks(723),
                            Email = "JohnDoe@domain.com",
                            FirstName = "John",
                            LastName = "Doe",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 7, 12, 20, 29, 49, 47, DateTimeKind.Local).AddTicks(4200)
                        },
                        new
                        {
                            Id = new Guid("cf94be86-baa2-46e2-9efe-a212ca53dc3a"),
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 7, 12, 20, 29, 49, 47, DateTimeKind.Local).AddTicks(5431),
                            Email = "Jane.Smith@domain.com",
                            FirstName = "Jane",
                            LastName = "Smith",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 7, 12, 20, 29, 49, 47, DateTimeKind.Local).AddTicks(5528)
                        },
                        new
                        {
                            Id = new Guid("08d170bc-a29c-4591-a3e8-abf513d5f936"),
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 7, 12, 20, 29, 49, 47, DateTimeKind.Local).AddTicks(5567),
                            Email = "Bruce.Lee@domain.com",
                            FirstName = "Bruce",
                            LastName = "Lee",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 7, 12, 20, 29, 49, 47, DateTimeKind.Local).AddTicks(5574)
                        },
                        new
                        {
                            Id = new Guid("5249a8c8-528e-4090-b404-40d5123e4af4"),
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 7, 12, 20, 29, 49, 47, DateTimeKind.Local).AddTicks(5582),
                            Email = "NP@domain.com",
                            FirstName = "Nij",
                            LastName = "Patel",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 7, 12, 20, 29, 49, 47, DateTimeKind.Local).AddTicks(5588)
                        });
                });

            modelBuilder.Entity("SocialNetwork.DataModel.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .HasColumnType("VARCHAR(240)")
                        .HasMaxLength(240);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("SocialNetwork.DataModel.IdentityUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("VARCHAR(24)")
                        .HasMaxLength(24);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Passoword")
                        .HasColumnType("VARCHAR(50)")
                        .HasMaxLength(50);

                    b.Property<string>("RefreshToken")
                        .HasColumnType("VARCHAR(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("RefreshTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("Salt")
                        .HasColumnType("VARCHAR(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("VARCHAR(24)")
                        .HasMaxLength(24);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasColumnType("VARCHAR(24)")
                        .HasMaxLength(24);

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("IdentityUser");

                    b.HasData(
                        new
                        {
                            Id = new Guid("29d18e18-3b07-452d-9caa-7a14f2750d14"),
                            AppUserId = new Guid("327987e6-fe50-4ebc-9729-fa87348857c1"),
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 7, 12, 20, 29, 49, 51, DateTimeKind.Local).AddTicks(5254),
                            Passoword = "/8j7Y3aH1/NIcu5PWDxBaTftbv7kIhPN7IsIY+iDIZ0=",
                            Salt = "St0OnTE2Ju3Li9uSnlz/Mg==",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 7, 12, 20, 29, 49, 51, DateTimeKind.Local).AddTicks(5394),
                            UserName = "JohnDoe@domain.com"
                        },
                        new
                        {
                            Id = new Guid("658aaf4c-6c7b-435d-8194-e20b57ff7f0c"),
                            AppUserId = new Guid("cf94be86-baa2-46e2-9efe-a212ca53dc3a"),
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 7, 12, 20, 29, 49, 51, DateTimeKind.Local).AddTicks(5740),
                            Passoword = "S10V+ChlwEm8VzgQIqvhHrUS65y7d9/E0AiYhKLwT0o=",
                            Salt = "f9/SzZwluz+xI51/VQQIzg==",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 7, 12, 20, 29, 49, 51, DateTimeKind.Local).AddTicks(5749),
                            UserName = "Jane.Smith@domain.com"
                        },
                        new
                        {
                            Id = new Guid("53926a03-90a8-4eeb-b3c4-5c541f9f66b6"),
                            AppUserId = new Guid("08d170bc-a29c-4591-a3e8-abf513d5f936"),
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 7, 12, 20, 29, 49, 51, DateTimeKind.Local).AddTicks(5763),
                            Passoword = "5OekvvKMPp2M+O3Ts2/G912N9lCNqz412l1y8uHazZc=",
                            Salt = "DEX8D+3HR9flD6NpGibucQ==",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 7, 12, 20, 29, 49, 51, DateTimeKind.Local).AddTicks(5770),
                            UserName = "Bruce.Lee@domain.com"
                        },
                        new
                        {
                            Id = new Guid("fd7a3c5d-c9bd-4a18-8a38-672b2b7f5f96"),
                            AppUserId = new Guid("5249a8c8-528e-4090-b404-40d5123e4af4"),
                            CreatedBy = "Seed",
                            CreatedDate = new DateTime(2020, 7, 12, 20, 29, 49, 51, DateTimeKind.Local).AddTicks(5781),
                            Passoword = "k94BgmW7ByRA20JstnnZy/r4spmr5a43Wj7TOez6Ceg=",
                            Salt = "tycaGrI7zbrlLUa1rlq/Eg==",
                            UpdatedBy = "Seed",
                            UpdatedDate = new DateTime(2020, 7, 12, 20, 29, 49, 51, DateTimeKind.Local).AddTicks(5788),
                            UserName = "string"
                        });
                });

            modelBuilder.Entity("SocialNetwork.DataModel.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActualFileName")
                        .HasColumnType("VARCHAR(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CloudFileName")
                        .HasColumnType("VARCHAR(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ContentType")
                        .HasColumnType("VARCHAR(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsMainPhoto")
                        .HasColumnType("bit");

                    b.Property<long>("Length")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Photo");
                });

            modelBuilder.Entity("SocialNetwork.DataModel.UserActivity", b =>
                {
                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateJoined")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsHost")
                        .HasColumnType("bit");

                    b.HasKey("ActivityId", "AppUserId");

                    b.HasIndex("AppUserId");

                    b.ToTable("UserActivity");

                    b.HasData(
                        new
                        {
                            ActivityId = new Guid("9411f42d-592a-4b01-bee8-db08f9473a48"),
                            AppUserId = new Guid("327987e6-fe50-4ebc-9729-fa87348857c1"),
                            DateJoined = new DateTime(2020, 5, 12, 20, 29, 49, 54, DateTimeKind.Local).AddTicks(6355),
                            IsHost = true
                        },
                        new
                        {
                            ActivityId = new Guid("9411f42d-592a-4b01-bee8-db08f9473a48"),
                            AppUserId = new Guid("cf94be86-baa2-46e2-9efe-a212ca53dc3a"),
                            DateJoined = new DateTime(2020, 5, 14, 20, 29, 49, 54, DateTimeKind.Local).AddTicks(6355),
                            IsHost = false
                        },
                        new
                        {
                            ActivityId = new Guid("f74a0ce5-1bfb-4b94-b0c5-663629ec8588"),
                            AppUserId = new Guid("327987e6-fe50-4ebc-9729-fa87348857c1"),
                            DateJoined = new DateTime(2020, 6, 12, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(189),
                            IsHost = true
                        },
                        new
                        {
                            ActivityId = new Guid("d48ac8d3-7ff4-46c8-b652-5d87afbfd1f7"),
                            AppUserId = new Guid("327987e6-fe50-4ebc-9729-fa87348857c1"),
                            DateJoined = new DateTime(2020, 8, 12, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(297),
                            IsHost = true
                        },
                        new
                        {
                            ActivityId = new Guid("d48ac8d3-7ff4-46c8-b652-5d87afbfd1f7"),
                            AppUserId = new Guid("cf94be86-baa2-46e2-9efe-a212ca53dc3a"),
                            DateJoined = new DateTime(2020, 8, 14, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(297),
                            IsHost = false
                        },
                        new
                        {
                            ActivityId = new Guid("d48ac8d3-7ff4-46c8-b652-5d87afbfd1f7"),
                            AppUserId = new Guid("08d170bc-a29c-4591-a3e8-abf513d5f936"),
                            DateJoined = new DateTime(2020, 8, 14, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(297),
                            IsHost = false
                        },
                        new
                        {
                            ActivityId = new Guid("d3fe056e-2fbd-435b-93f8-79a39142b530"),
                            AppUserId = new Guid("327987e6-fe50-4ebc-9729-fa87348857c1"),
                            DateJoined = new DateTime(2020, 9, 12, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(307),
                            IsHost = true
                        },
                        new
                        {
                            ActivityId = new Guid("d3fe056e-2fbd-435b-93f8-79a39142b530"),
                            AppUserId = new Guid("cf94be86-baa2-46e2-9efe-a212ca53dc3a"),
                            DateJoined = new DateTime(2020, 9, 14, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(307),
                            IsHost = false
                        },
                        new
                        {
                            ActivityId = new Guid("12b96b10-4fba-4b85-8804-b7172f0eaff1"),
                            AppUserId = new Guid("327987e6-fe50-4ebc-9729-fa87348857c1"),
                            DateJoined = new DateTime(2020, 10, 12, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(315),
                            IsHost = true
                        },
                        new
                        {
                            ActivityId = new Guid("12b96b10-4fba-4b85-8804-b7172f0eaff1"),
                            AppUserId = new Guid("cf94be86-baa2-46e2-9efe-a212ca53dc3a"),
                            DateJoined = new DateTime(2020, 10, 14, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(315),
                            IsHost = false
                        },
                        new
                        {
                            ActivityId = new Guid("12b96b10-4fba-4b85-8804-b7172f0eaff1"),
                            AppUserId = new Guid("08d170bc-a29c-4591-a3e8-abf513d5f936"),
                            DateJoined = new DateTime(2020, 10, 14, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(315),
                            IsHost = false
                        },
                        new
                        {
                            ActivityId = new Guid("753d5b55-ff88-4a28-a92c-364c3b68736c"),
                            AppUserId = new Guid("327987e6-fe50-4ebc-9729-fa87348857c1"),
                            DateJoined = new DateTime(2020, 11, 12, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(330),
                            IsHost = true
                        },
                        new
                        {
                            ActivityId = new Guid("753d5b55-ff88-4a28-a92c-364c3b68736c"),
                            AppUserId = new Guid("cf94be86-baa2-46e2-9efe-a212ca53dc3a"),
                            DateJoined = new DateTime(2020, 11, 14, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(330),
                            IsHost = false
                        },
                        new
                        {
                            ActivityId = new Guid("7d9ab25f-2ca9-42fa-b2d9-29d40892a26b"),
                            AppUserId = new Guid("327987e6-fe50-4ebc-9729-fa87348857c1"),
                            DateJoined = new DateTime(2020, 12, 12, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(339),
                            IsHost = true
                        },
                        new
                        {
                            ActivityId = new Guid("7d9ab25f-2ca9-42fa-b2d9-29d40892a26b"),
                            AppUserId = new Guid("cf94be86-baa2-46e2-9efe-a212ca53dc3a"),
                            DateJoined = new DateTime(2020, 12, 14, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(339),
                            IsHost = false
                        },
                        new
                        {
                            ActivityId = new Guid("7d9ab25f-2ca9-42fa-b2d9-29d40892a26b"),
                            AppUserId = new Guid("08d170bc-a29c-4591-a3e8-abf513d5f936"),
                            DateJoined = new DateTime(2020, 12, 14, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(339),
                            IsHost = false
                        },
                        new
                        {
                            ActivityId = new Guid("00e6b54a-27bf-4e0e-897f-0773c8c2ada5"),
                            AppUserId = new Guid("327987e6-fe50-4ebc-9729-fa87348857c1"),
                            DateJoined = new DateTime(2021, 1, 12, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(346),
                            IsHost = true
                        },
                        new
                        {
                            ActivityId = new Guid("00e6b54a-27bf-4e0e-897f-0773c8c2ada5"),
                            AppUserId = new Guid("cf94be86-baa2-46e2-9efe-a212ca53dc3a"),
                            DateJoined = new DateTime(2021, 1, 14, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(346),
                            IsHost = false
                        },
                        new
                        {
                            ActivityId = new Guid("5ed64d2e-7dbc-4538-ac0a-eb073eb75bb3"),
                            AppUserId = new Guid("327987e6-fe50-4ebc-9729-fa87348857c1"),
                            DateJoined = new DateTime(2021, 2, 12, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(355),
                            IsHost = true
                        },
                        new
                        {
                            ActivityId = new Guid("5ed64d2e-7dbc-4538-ac0a-eb073eb75bb3"),
                            AppUserId = new Guid("cf94be86-baa2-46e2-9efe-a212ca53dc3a"),
                            DateJoined = new DateTime(2021, 2, 14, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(355),
                            IsHost = false
                        },
                        new
                        {
                            ActivityId = new Guid("76a7f1e7-f9ee-4df2-9268-3d7bd4a15578"),
                            AppUserId = new Guid("327987e6-fe50-4ebc-9729-fa87348857c1"),
                            DateJoined = new DateTime(2021, 3, 12, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(366),
                            IsHost = true
                        },
                        new
                        {
                            ActivityId = new Guid("76a7f1e7-f9ee-4df2-9268-3d7bd4a15578"),
                            AppUserId = new Guid("cf94be86-baa2-46e2-9efe-a212ca53dc3a"),
                            DateJoined = new DateTime(2021, 3, 14, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(366),
                            IsHost = false
                        },
                        new
                        {
                            ActivityId = new Guid("76a7f1e7-f9ee-4df2-9268-3d7bd4a15578"),
                            AppUserId = new Guid("08d170bc-a29c-4591-a3e8-abf513d5f936"),
                            DateJoined = new DateTime(2021, 3, 14, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(366),
                            IsHost = false
                        },
                        new
                        {
                            ActivityId = new Guid("bcdae06a-2c5e-4019-bdab-b59893df8a08"),
                            AppUserId = new Guid("327987e6-fe50-4ebc-9729-fa87348857c1"),
                            DateJoined = new DateTime(2021, 4, 12, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(374),
                            IsHost = true
                        },
                        new
                        {
                            ActivityId = new Guid("bcdae06a-2c5e-4019-bdab-b59893df8a08"),
                            AppUserId = new Guid("cf94be86-baa2-46e2-9efe-a212ca53dc3a"),
                            DateJoined = new DateTime(2021, 4, 14, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(374),
                            IsHost = false
                        },
                        new
                        {
                            ActivityId = new Guid("bcdae06a-2c5e-4019-bdab-b59893df8a08"),
                            AppUserId = new Guid("08d170bc-a29c-4591-a3e8-abf513d5f936"),
                            DateJoined = new DateTime(2021, 4, 14, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(374),
                            IsHost = false
                        },
                        new
                        {
                            ActivityId = new Guid("e102f5ab-0ded-4a3d-96a0-7bafe78ab476"),
                            AppUserId = new Guid("327987e6-fe50-4ebc-9729-fa87348857c1"),
                            DateJoined = new DateTime(2021, 5, 12, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(382),
                            IsHost = true
                        },
                        new
                        {
                            ActivityId = new Guid("c10a7210-3887-4c1c-b584-df6f78dee370"),
                            AppUserId = new Guid("327987e6-fe50-4ebc-9729-fa87348857c1"),
                            DateJoined = new DateTime(2021, 6, 12, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(391),
                            IsHost = true
                        },
                        new
                        {
                            ActivityId = new Guid("f75728db-f94a-4c7e-be7f-b6fa38354872"),
                            AppUserId = new Guid("327987e6-fe50-4ebc-9729-fa87348857c1"),
                            DateJoined = new DateTime(2021, 7, 12, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(399),
                            IsHost = true
                        },
                        new
                        {
                            ActivityId = new Guid("8418c88c-f351-4816-b36a-c2bb55cf0825"),
                            AppUserId = new Guid("327987e6-fe50-4ebc-9729-fa87348857c1"),
                            DateJoined = new DateTime(2021, 8, 12, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(407),
                            IsHost = true
                        },
                        new
                        {
                            ActivityId = new Guid("8418c88c-f351-4816-b36a-c2bb55cf0825"),
                            AppUserId = new Guid("cf94be86-baa2-46e2-9efe-a212ca53dc3a"),
                            DateJoined = new DateTime(2021, 8, 14, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(407),
                            IsHost = false
                        },
                        new
                        {
                            ActivityId = new Guid("8418c88c-f351-4816-b36a-c2bb55cf0825"),
                            AppUserId = new Guid("08d170bc-a29c-4591-a3e8-abf513d5f936"),
                            DateJoined = new DateTime(2021, 8, 14, 20, 29, 49, 55, DateTimeKind.Local).AddTicks(407),
                            IsHost = false
                        });
                });

            modelBuilder.Entity("SocialNetwork.DataModel.UserFollower", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FollowerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "FollowerId");

                    b.HasIndex("FollowerId");

                    b.ToTable("UserFollower");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("327987e6-fe50-4ebc-9729-fa87348857c1"),
                            FollowerId = new Guid("cf94be86-baa2-46e2-9efe-a212ca53dc3a")
                        },
                        new
                        {
                            UserId = new Guid("327987e6-fe50-4ebc-9729-fa87348857c1"),
                            FollowerId = new Guid("08d170bc-a29c-4591-a3e8-abf513d5f936")
                        },
                        new
                        {
                            UserId = new Guid("08d170bc-a29c-4591-a3e8-abf513d5f936"),
                            FollowerId = new Guid("327987e6-fe50-4ebc-9729-fa87348857c1")
                        },
                        new
                        {
                            UserId = new Guid("327987e6-fe50-4ebc-9729-fa87348857c1"),
                            FollowerId = new Guid("5249a8c8-528e-4090-b404-40d5123e4af4")
                        },
                        new
                        {
                            UserId = new Guid("cf94be86-baa2-46e2-9efe-a212ca53dc3a"),
                            FollowerId = new Guid("08d170bc-a29c-4591-a3e8-abf513d5f936")
                        },
                        new
                        {
                            UserId = new Guid("08d170bc-a29c-4591-a3e8-abf513d5f936"),
                            FollowerId = new Guid("cf94be86-baa2-46e2-9efe-a212ca53dc3a")
                        },
                        new
                        {
                            UserId = new Guid("cf94be86-baa2-46e2-9efe-a212ca53dc3a"),
                            FollowerId = new Guid("5249a8c8-528e-4090-b404-40d5123e4af4")
                        },
                        new
                        {
                            UserId = new Guid("08d170bc-a29c-4591-a3e8-abf513d5f936"),
                            FollowerId = new Guid("5249a8c8-528e-4090-b404-40d5123e4af4")
                        },
                        new
                        {
                            UserId = new Guid("5249a8c8-528e-4090-b404-40d5123e4af4"),
                            FollowerId = new Guid("327987e6-fe50-4ebc-9729-fa87348857c1")
                        },
                        new
                        {
                            UserId = new Guid("5249a8c8-528e-4090-b404-40d5123e4af4"),
                            FollowerId = new Guid("cf94be86-baa2-46e2-9efe-a212ca53dc3a")
                        });
                });

            modelBuilder.Entity("SocialNetwork.DataModel.Comment", b =>
                {
                    b.HasOne("SocialNetwork.DataModel.Activity", "Activity")
                        .WithMany("Comments")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialNetwork.DataModel.AppUser", "Author")
                        .WithMany("Comments")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialNetwork.DataModel.IdentityUser", b =>
                {
                    b.HasOne("SocialNetwork.DataModel.AppUser", "AppUser")
                        .WithOne("IdentityUser")
                        .HasForeignKey("SocialNetwork.DataModel.IdentityUser", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialNetwork.DataModel.Photo", b =>
                {
                    b.HasOne("SocialNetwork.DataModel.AppUser", "AppUser")
                        .WithMany("Photos")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialNetwork.DataModel.UserActivity", b =>
                {
                    b.HasOne("SocialNetwork.DataModel.Activity", "Activity")
                        .WithMany("UserActivities")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialNetwork.DataModel.AppUser", "AppUser")
                        .WithMany("Activities")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialNetwork.DataModel.UserFollower", b =>
                {
                    b.HasOne("SocialNetwork.DataModel.AppUser", "Follower")
                        .WithMany("Followers")
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SocialNetwork.DataModel.AppUser", "User")
                        .WithMany("Followings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
